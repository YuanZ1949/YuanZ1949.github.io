{"meta":{"title":"苑长的Index","subtitle":"Life & Science & Technology","description":"Life & Science & Technology 这里是苑长的Index","author":"苑长","url":"https://yuanz1949.github.io","root":"/"},"pages":[],"posts":[{"title":"我眼中的Chagas","slug":"我眼中的Chagas","date":"2021-01-29T14:28:02.000Z","updated":"2021-01-29T14:28:02.000Z","comments":true,"path":"科技/生物/我眼中的Chagas/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E7%94%9F%E7%89%A9/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84Chagas/","excerpt":"内容","text":"内容 什么是Chagas🐛 参考资料 什么是Chagas🐛 Chagas disease, also known as American trypanosomiasis, is a potentially life-threatening illness caused by the protozoan parasite, Trypanosoma cruzi or (T. cruzi)^ WHO | What is Chagas disease?. *以下内容为翻译,来源同上 恰加斯氏病, 也被称为南美锥虫病，是一种由原生生物寄生虫( 锥虫 克氏 或者 T. 克氏) 导致的可能威胁生命的疾病. [^ 世界卫生组织 | 什么是克氏病?] 它主要在21个拉丁美洲国家发现，在那里主要是(虫)媒介传播。将这种寄生虫传染给人类的主要媒介是三线虫(锥蝽；锥蝽类)，也称为“接吻虫”。据估计，全世界有800万人受到感染，其中大部分在拉丁美洲。如果在早期开始治疗，恰加斯病在临床上是可以治愈的。因此，普及及时诊断和护理是至关重要的。 恰加斯病一度完全局限于美洲地区，但在上个世纪已蔓延到其他大陆，主要原因是旅行途径的增加和全球人口往来拉丁美洲。 据估计，每年有1万多人死于恰加斯病的临床症状，超过2500万人有可能感染此病。 传播媒介的控制仍然是预防感染最有用的方法。血液筛查对于避免输血和器官移植感染至关重要。对孕妇及其子女进行筛查和诊断是必要的控制措施。 查加斯病是以巴西医生卡洛斯·查斯蒂尼亚诺·查加斯的名字命名的，他在1909年发现了这种疾病。 参考资料 世界卫生组织 相关主题: Health topics | Chagas disease (American trypanosomiasis) Chagas disease - Symptoms and causes - Mayo Clinic CDC - Chagas Disease","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"生物","slug":"科技/生物","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E7%94%9F%E7%89%A9/"}],"tags":[{"name":"Chagas","slug":"Chagas","permalink":"https://yuanz1949.github.io/tags/Chagas/"},{"name":"疾病","slug":"疾病","permalink":"https://yuanz1949.github.io/tags/%E7%96%BE%E7%97%85/"}]},{"title":"政策索引","slug":"政策索引","date":"2020-12-29T16:00:00.000Z","updated":"2020-12-29T16:00:00.000Z","comments":true,"path":"索引/政策索引/政策索引/","link":"","permalink":"https://yuanz1949.github.io/%E7%B4%A2%E5%BC%95/%E6%94%BF%E7%AD%96%E7%B4%A2%E5%BC%95/%E6%94%BF%E7%AD%96%E7%B4%A2%E5%BC%95/","excerpt":"好好生活 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"好好生活 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 为什么要研读政策 参考资料 社会保障相关 为什么要研读政策 参考资料 社会保障相关 什么是五险一金？「社保」怎么使用最划算？ - 晓虎解读五险一金的回答 - 知乎 https://www.zhihu.com/question/24908926/answer/916890869 医保有什么用？ - 保贝说保的文章 - 知乎 https://zhuanlan.zhihu.com/p/101708861","categories":[{"name":"索引","slug":"索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/"},{"name":"政策索引","slug":"索引/政策索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/%E6%94%BF%E7%AD%96%E7%B4%A2%E5%BC%95/"}],"tags":[{"name":"政策","slug":"政策","permalink":"https://yuanz1949.github.io/tags/%E6%94%BF%E7%AD%96/"}]},{"title":"苑长YuanZ-开发记录","slug":"苑长YuanZ-开发记录","date":"2020-12-06T03:28:46.085Z","updated":"2020-12-06T03:28:46.085Z","comments":true,"path":"科技/信息技术/苑长YuanZ-开发记录/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/%E8%8B%91%E9%95%BFYuanZ-%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/","excerpt":"自己设计工作流 ——苑长","text":"自己设计工作流 ——苑长 什么是[苑长YuanZ] 功能设计 GUI 什么是[苑长YuanZ] 划词翻译保存词库 截图及图像处理 录屏 C&amp;Python程序 剪贴板 爬虫&amp;RSS APP PC 功能设计 GUI 主界面 全功能设置 自定义悬浮窗 贴边 特定生产力功能设定 界面控制 任务栏 小功能执行 软件状态显示 界面调用","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"信息技术","slug":"科技/信息技术","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"开发","slug":"开发","permalink":"https://yuanz1949.github.io/tags/%E5%BC%80%E5%8F%91/"}]},{"title":"书签索引","slug":"书签索引","date":"2020-11-27T13:25:07.066Z","updated":"2020-11-27T13:25:07.066Z","comments":true,"path":"索引/资源索引/书签索引/","link":"","permalink":"https://yuanz1949.github.io/%E7%B4%A2%E5%BC%95/%E8%B5%84%E6%BA%90%E7%B4%A2%E5%BC%95/%E4%B9%A6%E7%AD%BE%E7%B4%A2%E5%BC%95/","excerpt":"检索资料，建立索引。 ——苑长 如你所见，这是苑长的书签，也可以是大家的书签。","text":"检索资料，建立索引。 ——苑长 如你所见，这是苑长的书签，也可以是大家的书签。 书签下载（右键另存为） Bookmarks Bookmarks 收藏夹栏 已导入 游戏 Community Mods and Plugins Library continued for 1.2.2 &amp; 1.3 - Add-on Releases - Kerbal Space Program Forums Tutorials - Kerbal Space Program Wiki Mods - Projects - Kerbal CurseForge Mods - Kerbal Space Program - CurseForge SteamCN 蒸汽动力 - 驱动正版游戏的引擎！ NGA玩家社区 Home · SteamDB · Steam Database 坎喵KerbCat - 坎喵KerbCat致力成为中国最棒的坎巴拉太空计划综合资讯教程站点 Forums - Kerbal Space Program Forums Repack-Games - Free Download PC Games Community – Kerbal Space Program Downloads - Klei Entertainment Forums 【MOD大楼目录】【坎巴拉太空计划吧】_百度贴吧 文件传输 File Hub Aria2 WebUI Download: 0.00 B/s, Upload: 0.00 B/s - AriaNg Aria2 Web 控制台 Transmission WEB 控制器 1.0 Beta http://192.168.1.1/ariaweb 百度网盘-全部文件 特定IP或域名 路由器后台 edge://flags 华为路由 WS5200 MW325R 192.168.123.1 192.168.1.1 有趣 The globe of economic complexity Universal computer - LifeWiki 邮件 - outlook_D8991FAE1D2CC2BB@outlook.com 收件箱 - yuanjinhao1949@gmail.com - Gmail 台风路径 CCTV-13新闻频道高清直播_CCTV节目官网_央视网 Farben-Welten – zu Goethes Farbenlehre CGTN - Homepage - Breaking News, China News, World News and Video 中国铁路12306 常走走 Blog YuanZ1949 (苑金浩) 苑长的Index 苑长的Index 仓库 localhost:4000 Fishes-pool Fishes-pool仓库 YuanZ1949/FoolFatFish: 傻肥鱼不是鱼——我的“傻肥鱼”网站模板 网站列表 - 网站中心 Read World Plugins | Hexo 外链工厂 - 免费无限外链相册 路过图床 - 免费图片上传, 专业图片外链, 免费公共图床 价格详情 - 七牛云 Introduction to Vercel - Vercel Documentation 微信公众平台 论坛 DIY 模友之吧官网:我爱送模型论坛,航模论坛,中国唯一免费送模型网站 - Powered by Discuz! 5iMX.com 我爱模型 玩家论坛 ——中国最具人气和影响力的综合模型论坛（注册会员超30万，创始于2003年） - 我爱模型 玩家论坛 BBS.5iMX.com 分享模型兴趣爱好 Science Toys | Science Toys 航天爱好者论坛 - Powered by Discuz! Stack Overflow - Where Developers Learn, Share, &amp; Build Careers 科创 - 科创论坛 - 黑科技与极客社区 GunWorld ——〖枪炮世界〗——銃器の世界 My Digital Life Forums KeyFansClub 我们的梦想 AutoHotkey Community - Index page 学习 LintCode 领扣 力扣 (LeetCode) 官网 - 全球极客挚爱的技术成长平台 “Windows 上的 Python”文档 | Microsoft Docs 学堂在线-最大的中文慕课(MOOC)平台 菜鸟教程 - 学的不仅是技术，更是梦想！ 中国大学MOOC(慕课)_最好的在线课程学习平台 Competitions | Kaggle C语言中文网：c语言程序设计门户网站(入门教程、编程软件) Python &amp; OpenGL for Scientific Visualization Web API简介 - 学习 Web 开发 | MDN Latest Posts STHDA - Accueil Public Library of Bioinformatics | focus on bioinformatics 生信坑 Immersive Math Linux命令搜索引擎 命令，Linux Linux命令搜索引擎 命令详解：最专业的Linux命令大全，内容包含Linux命令手册、详解、学习，值得收藏的Linux命令速查手册。 - Linux 命令搜索引擎 Home - Bioinformatics.org 程明明个人主页 Design Patterns &amp; Refactoring Dive Into Python 3 Software Carpentry 这本书能让你连接互联网2 .NET 文档 | Microsoft Docs 媒体 蓝点网|给你感兴趣的内容！ Engadget 中国版 - 消费性电子产品新闻和评测 观察者网-中国关怀 全球视野 人民日报-人民网 人民网_网上的人民日报 新华社新闻_新华网 果壳 科技有意思 CNN International - Breaking News, US News, World News and Video Associated Press News www.reuters.com www.bloomberg.com AFP.com Home | Bill Gates 知乎 Quora - A place to share knowledge and better understand the world. 微博 – 随时随地发现新鲜事 百度贴吧——全球最大的中文社区 哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 中国气象网-中国气象局政府门户网站 AcFun弹幕视频网 - 认真你就输啦 (・ω・)ノ- ( ゜- ゜)つロ 美股市场_同花顺行情中心_同花顺财经网 航天爱好者网 Science | AAAS Nature 科学网—构建全球华人科学社区 arXiv.org e-Print archive 江科大VPN pixivision- 事物其实可以更有趣 Volumes | Nature 信息技术 基础学习 极客战记 - 学编程 用玩的 w3school 在线教程 菜鸟教程 - 学的不仅是技术，更是梦想！ 选择一个开源软件协议 - Choose a License 序言 | Android官方培训课程中文版(v0.9.7) Android学习之路 - stormzhang LintCode 领扣 力扣 (LeetCode) 官网 - 全球极客挚爱的技术成长平台 C语言中文网：c语言程序设计门户网站(入门教程、编程软件) CodePen Dashboard RFC INDEX Document Search Requests: 让 HTTP 服务人类 — Requests 2.18.1 文档 PhantomJS - Scriptable Headless Browser const那些事 - C++那些事 MDN Web 文档 Programming from the Ground Up Book - Summary [Savannah] Linux C编程一站式学习 The GNU C Library 论坛 博客 首页 - 廖雪峰的官方网站 Archive 10月 | 雷军的博客 CSDN-专业IT技术社区 繁花嗅 Linux.中国-开源社区 火绒安全官方论坛 - Powered by Discuz! 黑客内参 - 资源最全面的黑客论坛，新鲜的黑客技术内部资料 CoCode 博客园 - 开发者的网上家园 掘金 - juejin.im - 一个帮助开发者成长的社区 RoboMaster论坛 开源中国 - 找到您想要的开源项目，分享和交流 V2EX 酷壳 – CoolShell.cn yangyang&#39;s delight λ-calculus（惊愕到手了欧耶，GetBlogPostIds.aspx） - C++博客 IBM Developer 中国 : 为开发者和 IT 专业人员提供专业资源 Windows 文档 - Windows apps | Microsoft Docs 红色石头的个人博客-机器学习、深度学习之路 Jupyter Notebook Viewer 深度科技社区 MATLAB中文论坛 稚晖的个人站 GitHub yangyang&amp;#39;s delight 资源下载 (60 条消息)Python - 知乎 免费下载笔记本驱动程序，软件，手册 Microsoft - Official Home Page practicals - Windows Apps That Amaze Us 软件下载_更快更安全的软件下载中心_2345软件大全(多特软件下载站) 第五驱动 - 提供电脑及外设驱动,移动数码资源,常用软件下载 吾爱破解 - LCG - LSG|安卓破解|病毒分析|破解软件|www.52pojie.cn MSDN, 我告诉你 Electronic library. Download books free. Finding books Greasy Fork - 安全、有用的用户脚本大全 Crx4Chrome - Download CRX for Chrome Apps &amp; Extensions 浏览迷 安卓X86最新版下载 - UpdateStar.com 下载 Windows 10 脚本之家_www.jb51.net NoCmd - 绿色软件站 | 打造最纯净的绿色软件下载站！-最新发布-第2页 Java知识分享网-免费Java资源下载 OpenUserJS Chrome插件(谷歌浏览器插件) - 提供Chrome商店中优秀的Chrome插件推荐与下载服务 APKCombo: #1 APK Downloader - 下载 APK &amp; OBB (免费) 驱动列表 A8-6410 搭载 Radeon™ R5 集显 Drivers &amp; Support | AMD Club Apk - Free Android Premium Apps,Games And News Download Free Apps (APK) for Android - FilePlanet Free download Apps and Games APK - AppToGame.Com Microsoft Edge Addons FOSSHUB Index of / Green Tea Press – Free books by Allen B. Downey 爱盘 - 最新的在线破解工具包 北京外国语大学开源软件镜像站 | BFSU Open Source Mirror 项目 官网 Simple DirectMedia Layer - Homepage C++ FAQ LITE C/C++ Users Group Free C/C++ Libraries, Source Code and Frameworks(thefreecountry.com) Welcome to Python.org cplusplus.com - The C++ Resources Network PyPI – the Python Package Index · PyPI TensorFlow Java NIO, PyTorch, SLF4J, Parallax Scrolling, Java Cryptography, YAML, Python Data Science, Java i18n, GitLab, TestRail, Versio Free Pascal - Advanced open source Pascal compiler for Pascal and Object Pascal - Home Page Primers – Math ∩ Programming CGold: The Hitchhiker’s Guide to the CMake — CGold 0.1 documentation Awesome Python Microsoft.com 网站地图 Mingw-w64 - GCC for Windows 64 &amp; 32 bits [mingw-w64] GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF) 龙芯社区开源项目源码库 OpenCV 教程 — OpenCV 2.3.2 documentation The Comprehensive R Archive Network PDF reDirect - The free PDF Creator alternative to pdf995, cutepdf and freepdf IFTTT helps your apps and devices work together Welcome to Unified Extensible Firmware Interface Forum | Unified Extensible Firmware Interface Forum 我们的龙芯3号---致龙芯15周年_龙芯官方网站-[龙芯官方网站] blender.org - Home of the Blender project - Free and Open 3D Creation Software 深度科技社区 Home - Keras Documentation China 简体中文 — WordPress SourceForge - Download, Develop and Publish Free Open Source Software mIRC: Internet Relay Chat client Tutorial — Bottle 0.13-dev documentation OllyDbg v1.10 Git - Downloading Package Jekyll • 简单静态博客网站生成器 - 将纯文本转换为静态博客网站 The GNU C Library OpenHarmony SRCs|安全应急响应中心 - 0xsafe sbc.just.edu.cn 中国互联网络信息中心 试着 VMware 工作站临，运行 Linux 和 Windows 的虚拟机中 我的工作台 - 码云 Gitee.com Your Actions GitLogs News - Discover The Top Trending Repos effbot.org 免费代理IP_HTTP代理服务器IP_隐藏IP_QQ代理_国内外代理_西刺免费代理IP Sakura Frp — 免费高速内网穿透|高防节点|不限流量|Minecraft我的世界|微信开发调试|端口映射|无需公网|免备案 Data Structure Visualization Computer Vision Models Keith Price Bibliography Annotated Computer Vision Bibliography: Table of Contents [Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ STC: 1T 8051 单片机创新者, ISP/IAP 技术创新者 DistroWatch.com: Put the fun back into computing. Use Linux, BSD. APNIC SSD VPS Servers, Cloud Servers and Cloud Hosting by Vultr - Vultr.com Overview - Process Hacker IANA — Domain Name Services Hexo highlight.js 中共中央网络安全和信息化委员会办公室 开发 - Apple Developer Windows 开发人员文档 | Microsoft Docs 地图 | 卡巴斯基网络威胁实时地图 腾讯开放平台beta|开放成就梦想 帮助中心 - CODING - 一站式软件研发管理平台 Visual Studio Code - Code Editing. Redefined chromedriver.storage.googleapis.com/index.html USTC Open Source Software Mirror 首页 - MATLAB中文论坛 Welcome to uClibc-ng! - Embedded C library Testing/Builds - glibc wiki Index of /gnu/glibc h5ai · modern HTTP web server index for Apache httpd, lighttpd, nginx and Cherokee · larsjung.de 工具 IT 运营商劫持测试 Unicode Technical Site The Best IP Address, Email and Networking Tools - IPAddress.com 开发工具 - 爱资料工具 脚本之家在线工具 ZoomEye - Cyberspace Search Engine FileZilla - The free FTP solution JS Bin - Collaborative JavaScript Debugging 站长工具 - 站长之家 Convert cURL command syntax to Python requests, Ansible URI, MATLAB, Node.js, R, PHP, Strest, Go, Dart, JSON, Elixir, and Rust code GitHub代下载服务·永久免费 GitHub 文件加速 jsDelivr - A free, fast, and reliable CDN for open source 微步在线云沙箱 TraceRoute查询_专业的 IP 地址库_IPIP.NET 科学工具 使用Multiwfn绘制红外、拉曼、UV-Vis、ECD、VCD和ROA光谱图 - 思想家公社的门口：量子化学·分子模拟·二次元 ImageJ ImageJ Multiwfn 数字帝国 - 数学工具 Installation — SciPy.org Overview — NumPy v1.19.dev0 Manual Biorender 在线LaTeX公式编辑器-妈叔出品 设计 图表秀 免费在线创建流程图|思维导图 - 迅捷流程图 ico图标制作,在线Favicon.ico制作转换工具,实时预览ico生成效果,ico图标下载 Photopea | Online Image Editor Planet - by Oskar Stålberg Dash by Plotly - Plotly Free Logo Maker - Create your own logo in minutes! ECharts Gallery 在线二维码图片生成器_二维码扫描软件下载_联图二维码 Table Convert Online - table to markdown,csv,json,latex table,excel,sql,xml ProcessOn - 免费在线作图，思维导图，流程图，实时协作 LunaPic | Free Online Photo Editor Silk – Interactive Generative Art 4bit. Terminal Color Scheme Designer 语言 Thesaurus.com | Synonyms and Antonyms of Words at Thesaurus.com Dictionary by Merriam-Webster: America&#39;s most-trusted online dictionary Google 翻译 在线翻译_有道 术语在线—权威的术语知识服务平台 Linggle 10^12- Language Reference Search Engines - NLPLab Vocabulary.com - Learn Words - English Dictionary Photopea | Online Image Editor 逛地球-Google地图-Google Earth-谷歌地图在线 Planet - by Oskar Stålberg Free Logo Maker - Create your own logo in minutes! Image Cyborg · HOME Video Cyborg · HOME 百度网盘免和谐分享 发现中国 - 地图分享知识 生活常用工具大全_生活常用在线工具_好工具网 Detexify LaTeX handwritten symbol recognition 主页 | LibreOffice 简体中文官方网站 - 自由免费的办公套件 ico图标制作,在线Favicon.ico制作转换工具,实时预览ico生成效果,ico图标下载 Open Broadcaster Software 使用Multiwfn绘制红外、拉曼、UV-Vis、ECD、VCD和ROA光谱图 - 思想家公社的门口：量子化学·分子模拟·二次元 Dash by Plotly - Plotly Multiwfn 图表秀 Smallpdf.com Word Art - Edit - WordArt.com 免费在线创建流程图|思维导图 - 迅捷流程图 PaintsTransfer iLovePDF | 为PDF爱好者提供的PDF文件在线处理工具 最佳PDF转换器：在线创建、转换PDF文件(免费) ✔️ ❤️ ★ Unicode®字符百科 Rizon Chat Network PaintsChainer -线稿自动上色服务- Light pollution map 在线随机数生成器 免费天气API接口|天气预报iframe插件|实况天气接口|国外天气接口|机场天气接口 - TianqiAPI.com Texmaker (free cross-platform latex editor) SoX - Sound eXchange | HomePage cairographics.org Home - MiKTeX.org CTAN: The TeX Lion Getting Started with Video.js - Video.js: The Player Framework | Video.js 歌词字幕在线转换器 - 支持LRC SRT UTF KSC SSA ASS SMI SNC TXT格式在线转换 OpenWrt Project: 欢迎访问 OpenWrt 项目 OpenWrt Downloads SimilarSiteSearch.com - The Best Place To Find Similar Websites Satellite Tracking System: Orbitron by Sebastian Stoff / Satellite tracking easiest ever! ManimLab Remove Vocals For Free - Vocal Remover - Edit Your Audio ICOA 在线小工具 · 导航 - 星际中央超自然局 MathJax | Beautiful math in all browsers. Overleaf, Online LaTeX Editor Neat Reader - Web App spacedesk HTML5 VIEWER Texmaker (free cross-platform latex editor) 台风路径实时发布系统 Mixamo waifu2x 学习 网课 学堂在线-最大的中文慕课(MOOC)平台 中国大学资源共享课课程列表 - 爱课程 中国大学MOOC(慕课)_最好的在线课程学习平台 doyoudo 中科云教育 实验空间—国家虚拟仿真实验教学项目共享服务平台 Home | The Metropolitan Museum of Art Rijksmuseum – Het museum van Nederland - te Amsterdam 问答库_做最有用的题库问答学习平台 Discover Art &amp; Artists | The Art Institute of Chicago Mix · For you Learn to Code - for Free | Codecademy Aquatilis Expedition – Portfolio 冻果果 – 地球的小透明 青少年交流社区 发现与众不同 考试酷(examcoo)-永久免费的电子作业与在线考试系统云平台 我爱学习网，IT资讯、学院、资源下载一站式中文门户网站 Encyclopedia Britannica | Britannica.com 高等数学同步课堂 医学微视 Academic Word List | School of Linguistics and Applied Language Studies | Victoria University of Wellington University Language Centre - The University of Manchester Stanford Secure Computer Systems Group David Tong: Cambridge Lecture Notes on Theoretical Physics Lecture 1: The geometry of linear equations | Video Lectures | Linear Algebra | Mathematics | MIT OpenCourseWare Java Geometry Expert NIS.ai | NIS-Elements | 软件 | 产品 | 尼康仪器（上海）有限公司 麻辣GIS | 麻辣地信网 - 小而美的地理信息系统博客 - 立足GIS 放眼3S Glossary of Terms - FPbase Help 中文马克思主义文库·毛泽东 SCILAB 论坛 - EETOP 创芯网论坛 - DIY 模友之吧官网:我爱送模型论坛,航模论坛,中国唯一免费送模型网站 - Powered by Discuz! 5iMX.com 我爱模型 玩家论坛 ——中国最具人气和影响力的综合模型论坛（注册会员超30万，创始于2003年） - 我爱模型 玩家论坛 BBS.5iMX.com 分享模型兴趣爱好 学堂在线-最大的中文慕课(MOOC)平台 中国大学资源共享课课程列表 - 爱课程 中国大学MOOC(慕课)_最好的在线课程学习平台 doyoudo GunWorld ——〖枪炮世界〗——銃器の世界 Dictionary by Merriam-Webster: America&amp;#39;s most-trusted online dictionary 全国大学英语四、六级考试报名网 Immersive Math 主页 - Keras 中文文档 简单粗暴TensorFlow 2.0 | A Concise Handbook of TensorFlow 2.0 — 简单粗暴TensorFlow 2.0 0.4 alpha 文档 Getting started with Anaconda — Anaconda 2.0 documentation IIS Manager | Microsoft Docs Home : The Official Microsoft IIS Site 工具文档 Getting Started Animating with manim and Python 3.7 | Talking Physics QEMU version 4.2.50 User Documentation Home : The Official Microsoft IIS Site IIS Manager | Microsoft Docs 简单粗暴TensorFlow 2.0 | A Concise Handbook of TensorFlow 2.0 — 简单粗暴TensorFlow 2.0 0.4 alpha 文档 首页 - MATLAB中文论坛 主页 - Keras 中文文档 SciPy.org — SciPy.org Getting started with Anaconda — Anaconda 2.0 documentation openpyxl -用于读/写Excel 2010 XLSX/XLSM文件的python库 — openpyxl 2.6.1 文档 Welcome to Manim’s documentation! — Manim documentation The Taichi Programming Language — taichi 0.3.20 documentation Matplotlib: Python plotting — Matplotlib 3.1.1 documentation 欢迎 - Jekyll • 简单静态博客网站生成器 探索 Android Studio | Android Developers Biopython 教程与手册 — Biopython-cn 0.1 文档 Git - Book Aria2 Manual — aria2 1.35.0 documentation Daring Fireball: Markdown Syntax Documentation Astropy Documentation — Astropy v4.0.1 YAML Ain’t Markup Language (YAML™) Version 1.2 在 GitHub 上编写 - GitHub 帮助 介绍 | Valine 入门指南 — MathJax Chinese Doc 2.0 documentation Documentation for Visual Studio Code 开始使用 – Font Awesome 中文网 提问的智慧 API 文档 | Node.js 中文网 微信开放文档 Tutorial Section 1 Working with GitHub Pages - GitHub Help Get started with Docker for Windows | Docker Documentation Linux 内核实验环境 - 泰晓科技 Documentation for Visual Studio Code Free PDF Reader - Sumatra PDF Beginner&#39;s tutorial Lua 5.3 参考手册 Anki - powerful, intelligent flashcards Scribus Wiki Getting Started — Sphinx 4.0.0+ documentation LaTeX Documentation Help On LaTeX Commands Dash for macOS - API Documentation Browser, Snippet Manager - Kapeli Docset Generation Guide - Kapeli Displaying Data — Spectral Python 0.21 documentation Beautiful Soup 4.4.0 文档 — beautifulsoup 4.4.0q 文档 PNG转ICO,PNG转ICNS | 图标格式在线转换 - EASYICON.NET RWEverything – Read &amp; Write Everything Pillow — Pillow (PIL Fork) 7.1.2 documentation LeanCloud 文档 IPython Documentation — IPython 7.15.0 documentation Let the journey begin | www.scilab.org GNU Octave Scrapy 1.7 documentation — Scrapy 1.7.0 文档 Scrapy一目了然 — Scrapy 1.7.0 文档 manim教程文档 — manim v0.2 文档 3.8.4rc1 Documentation Learn | Inkscape Installation - OS.js Web Desktop Manual Meteor API Docs | Meteor API Docs styleguide | Style guides for Google-originated open-source projects Getting started with conda — conda 4.8.4.post108+5928911d documentation User guide — Anaconda documentation Welcome to Spyder’s Documentation — Spyder 4 documentation Python Pillow Download BLAST Software and Databases Documentation Haskell Language Excel Visual Basic for Applications (VBA) 参考 | Microsoft Docs 如何使用 PowerShell 文档 - PowerShell | Microsoft Docs Chocolatey Software | Chocolatey - The package manager for Windows An introduction to seaborn — seaborn 0.11.0 documentation PowerShell Documentation - PowerShell | Microsoft Docs 科学资源搜索 文献 浙江图书馆 arXiv.org e-Print archive Web of Science - 请登录以访问 Web of Science bioRxiv.org - the preprint server for Biology 大雅相似度分析（论文检测、论文查重系统） VPN2-江苏科技大学图书馆 中国知网-VPN Sci-Hub: removing barriers in the way of science Glgoo 学术搜索 中国知网 浙江图书馆-中国知网 JUST-VPN Web of Science [v.5.34] - 所有数据库 基本检索 VPN1-万方数据知识服务平台 VPN1-江苏科技大学图书馆 medRxiv.org - the preprint server for Health Sciences Sci-Hub: removing barriers in the way of science Home - Springer Semantic Scholar APS Physics | APS Home Google学术搜索|SCI-HUB网址|谷歌学术搜索|龙猫学术导航 万千合集站 最专业的学术类资源聚合导航站 万千合集站 - 学术资源导航 交流分享 - Powered by Discuz! NSTL国家科技图书文献中心 欢迎来到中国科学院文献情报中心期刊分区数据在线平台 Google学术搜索镜像_sci-hub网址_大木虫学术导航 Output Styles | EndNote 气象 中国气象网-中国气象局政府门户网站 Windy: Wind map &amp; weather forecast 风云卫星遥感数据服务网 台风路径实时发布系统 中国气象数据网 国家卫星气象中心,启用新域名//www.nsmc.org.cn 国家卫星气象中心,风云四号卫星天气应用平台 静止卫星云图动画 NASA Ozone Watch: Latest status of ozone 首页 | 国际云图集 World Meteorological Organization | 人文社科 中國大陸地方志書目查詢系統 国家哲学社会科学文献中心 Table of Contents (Stanford Encyclopedia of Philosophy) 马克思主义文库 生物 Drug information, side effects, and reviews - Iodine.com WoRMS - World Register of Marine Species 国家人口与健康科学数据共享服务平台 全部实验方法汇总 - 实验方法 - 丁香通 【中国工业生物技术信息网】 国家微生物科学数据中心 Coronavirus COVID-19 (2019-nCoV) RCSB PDB: Homepage Multiple Sequence Alignment - CLUSTALW T-Coffee Home Page InterPro Biopython · Biopython Pfam: Home page ViennaRNA Web Services Main Page - SBML.caltech.edu FRPS《中国植物志》全文电子版网站 生物通今日动态首页 Human Metabolome Database 国家基因库 CFH-植物、动物、微生物名称查询 科学数据库-中国动物主题数据库 国家食品药品监督管理总局 生物软件网-提供生物信息学免费软件和生物信息学、分子生物学图书、图像、视频等资料 National Library of Medicine National Center for Biotechnology Information 小木虫 - 学术 科研 互动社区 生物技术学院 - 江苏科技大学 PPBC中国植物图像库——最大的植物分类图片库 首页_中国农业科学院 National Institutes of Health (NIH) | Turning Discovery Into Health NCBI - National Center for Biotechnology Information/NLM/NIH ATCC: The Global Bioresource Center Omega Bio-tek | Home 中华人民共和国农业农村部 Cancer Program Legacy Publication Resources Dash User Guide and Documentation - Dash by Plotly eGPS Cloud UNITE Home - PubMed - NCBI Index Fungorum - Search Page The International Pharmacopoeia 药品标准查询-药典在线-药物在线数据库 药物在线-快捷药物信息平台 国家药品监督管理局 国家基础科学数据共享服务平台 国家地球系统科学数据共享平台首页 国家基础科学数据共享服务平台 International Astronomical Union | IAU Atmospheric Optics 化学数据库 化学专业数据库 Home - Springer 探月工程数据发布与信息服务系统 全国科学技术名词审定委员会 中国规范术语 - 首页 中国科学院 高分中心（分中心） Exploring Black Holes | National Science Foundation 世界数字图书馆主页 Tiny Images Dataset Face Recognition Homepage - Databases Welcome - Home - DataHub - Frictionless Data 首页 - 全国图书馆参考咨询联盟 WMO OSCAR | Observing Systems Capability Analysis and Review Tool - Home 中国资源卫星应用中心 北斗卫星导航系统 USGS.gov | Science for a changing world OSGeo中国中心,地理空间数据共享,开放地理空间实验室 江苏科技大学学报(自然科学版) 家蚕基因国家重点实验室 书籍资料-中生网 https://scihub.copernicus.eu/dhus/#/home 天山医学院 - 在线医学第一站 - 专业医师知识学习与参考平台 Anaconda Python/R Distribution - Free Download 发现中国 - 地图分享知识 中国互联网协会 中国互联网络信息中心 中国探月与深空探测网 Home | 3D Resources CNSA GEO Home CRISPR Guide RNA Design Software for Molecular Biology | Benchling Python Extension Packages for Windows - Christoph Gohlke LilacSat – 紫丁香系列微纳卫星 iData-知识检索 北京大学图书馆 国研网 CCERDATA 国研网案例库 平台首页 | 高分应用综合信息服务共享平台 Home Page - Sciences and Exploration Directorate - 600 www.arcgis.com National Science Review | Oxford Academic Hi-C 全球肺炎实战共享平台(GMCC) International Service for the Acquisition of Agri-biotech Applications - ISAAA.org 标准产品查询 The Cell Image Library 【推荐】目前最全的化学网站集合 - 无机物化 - 小木虫 - 学术 科研 互动社区 读者云门户 紫外可见光谱数据库 | 光谱学 | Bio-Rad 项目检索 |国家自然科学基金管理信息系统 SDO | Solar Dynamics Observatory Guide to IRIS Data &amp; Data Analysis 科技工作者之家 Mars Place Names International Union of Pure and Applied Chemistry 国家人口与健康科学数据共享服务平台 万千合集站 - 学术资源导航 交流分享 - Powered by Discuz! 中国知网 Glgoo 学术搜索 APS Physics | APS Home 国家哲学社会科学文献中心 arXiv.org e-Print archive 中国知网-VPN Google学术搜索|SCI-HUB网址|谷歌学术搜索|龙猫学术导航 Sci-Hub: removing barriers in the way of science Web of Science - 请登录以访问 Web of Science NSTL国家科技图书文献中心 中國大陸地方志書目查詢系統 风云卫星遥感数据服务网 SciPy.org — SciPy.org 全部实验方法汇总 - 实验方法 - 丁香通 Science | AAAS 国家基因库 Google 国家月球与深空探测科学数据与样品发布系统 国家月球与深空探测科学数据与样品发布系统 WHO Coronavirus Disease (COVID-19) Dashboard | WHO Coronavirus Disease (COVID-19) Dashboard 视与音 Blender Command Line — Blender Manual 启动画面 — Blender Manual Introduction — Blender Manual Blender 2.82a Python API Documentation — Blender Python API Blender中国社区 – 这里有Blender的最新资讯 50个最好的免费下载3D模型的网站（内附网址） - 知乎 POV-Ray - The Persistence of Vision Raytracer Welcome to Pycao’s documentation! — Laurent Evain - Angers - Mathematiques. The Khronos Group Inc Tutorial Table of Contents 影视 x264, the best H.264/AVC encoder - VideoLAN Open Broadcaster Software X264使用介绍 - NMM Doc x264 Pr插件 – CG插件一键安装合集 AviSynth入门与应用指南 - 与时俱进 - 博客园 NMM Doc 尽量不浪费压制时间的简单视频高压要点_月光-涟漪_新浪博客 Adobe Premiere Pro 用户指南 FOSSHUB 全国电视直播---bddn.cn Welcome to AMD Radeon™ ProRender! — AMD Radeon ProRender 创建窗口 - LearnOpenGL CN 资源 音频应用 HDRI Haven Pr插件 – CG插件一键安装合集 x264, the best H.264/AVC encoder - VideoLAN OpenGL - LearnOpenGL CN Mixamo OpenGL - The Industry Standard for High Performance Graphics Your Reality - Doki | Virtual Piano X264使用介绍 - NMM Doc x264 AviSynth入门与应用指南 - 与时俱进 - 博客园 NMM Doc 尽量不浪费压制时间的简单视频高压要点_月光-涟漪_新浪博客 Adobe Premiere Pro 用户指南 全国电视直播---bddn.cn 佳能（中国） - 服务与支持 Welcome to AMD Radeon™ ProRender! — AMD Radeon ProRender 创建窗口 - LearnOpenGL CN foobar2000: Components Repository Open Broadcaster Software Shotcut - Home Audacity ® | Free, open source, cross-platform audio software for multi-track recording and editing. HandBrake SuperCollider » SuperCollider dvisvgm: About manimlib · PyPI Welcome to Manim’s documentation! — Manim documentation Half Lambert - Valve Developer Community Olive - Professional Open-Source Video Editor 爱视传媒免费网络电视在线直播 live streaming 电视直播|网络电视|在线电视--电台之家 BundleFusion mpv.io | Installation mpv - ArchWiki User Scripts · mpv-player/mpv Wiki Dorico SE: Free music notation software | Steinberg madVR 10大开源免费音视频处理软件 - 知乎 3.6 Instrument Window - User manual SuperCollider 3.10.4 Help Radeon ProRender for Blender™ — AMD Radeon ProRender REAPER Forums - Cockos Incorporated Forums 国家新闻出版署 Draw Freely | Inkscape Krita 官方网站 | 社区驱动的自由开源数字绘画软件 Inkscape Beginners&#39; Questions - Inkscape Forum 资源搜索 电子书 Library Genesis Download PDF magazines and ebook free USA, UK, Australia and other Electronic library. Download books free. Finding books Electric Library. Download books free. More than 2 million books and magazines Free eBooks For Your Kindle or Other eReader | ManyBooks Jiumo E-Book Search 鸠摩搜书 - 电子书搜索引擎 汇雅电子书 Gutenberg Library Genesis GetBestBooks - Easy Fast Secure Download 素材模板 PPT模板 HiPPTER | PPT资源导航 | PPT模板下载 PPTBOSS-在线PPT制作工具_免费PPT幻灯片制作软件_在线课件制作软件，提供精美PPT模板、PPT教程 PPT模板下载_免费PPT模板下载_精美免费PPT模板下载 - 优品PPT PPT模板_PPT模板下载_幻灯片模板_PPT模版免费下载 -【第一PPT】 OfficePLUS，微软Office官方在线模板网站！ OfficePLUS，微软Office官方在线模板网站！ 4000+ Free Presentation Templates - SlideHunter.com 图片 Beautiful Free Images | Unsplash Art Abyss - An Art Community Icon Ninja - 33356 vector icons and 700142 png icons for free download 图鱼 - 100%完美平铺的底纹素材网 colorhub.me - 高清无版权图片，个人和商业用途免费 86,400 免费图标-最大的图标包 Free Icon &amp; Vector Illustrations - FindIcons.com Free Stock Photos · Search 40+ sites with LibreStock 62,800 Free Icons (SVG, PNG) Iconfont-阿里巴巴矢量图标库 IconPng.com 爱看图标网，免费中文图标搜索引擎！ 图标下载，ICON(PNG/ICO/ICNS)图标搜索下载 | EASYICON.NET 百度图片-发现多彩世界 SketchUp模型库 - SU模型下载 - 毕马汇 NBimer Material Design Color Palette Generator - Material Palette Discover — Art &amp; Design Inspiration at ColRD.com https://slidemodel.com Presentation Magazine SketchUp吧 - SketchUp中国门户网站 3D Warehouse Illustrations | unDraw Free stock photos · Pexels [字由] 设计师必备字体利器 Fresh Background Gradients | WebGradients.com 💎 PMGEEK - 设计师网址导航 Font Awesome CC0 Textures - Public Domain PBR Materials Iconfont-阿里巴巴矢量图标库 4000+ Free Presentation Templates - SlideHunter.com OfficePLUS，微软Office官方在线模板网站！ Drug information, side effects, and reviews - Iodine.com OfficePLUS，微软Office官方在线模板网站！ Airliners.net | Aviation Photography, Discussion Forums &amp; News 综合搜索 学习资料库，免费共享各类学习资料，学习资料免费下载 小不点搜索_让资源搜索变简单 爱问共享资料_在线资料分享平台 快搜 - 搜索快人一步 - 地图高德地图百度地图谷歌地图腾讯地图搜狗地图必应地图天地地图 国外网站推荐-分享互联网-外国网站大全 茶杯狐 Cupfox 西林街搜索（X站） - 官网 盘多多-百度云盘-百度云搜索-百度云盘资源搜索-百度网盘搜索引擎-微盘,新浪微盘-网盘搜索_盘多多 搜索盘-百度云搜索,百度云网盘搜索,百度网盘资源搜索引擎 - 搜索盘 DogeDoge 多吉搜索 — 不追踪，不误导 Panc.cc-胖次网盘搜索 - 胖次分享社区 - 我们热爱分享 磁力蛙 - 最好用的磁力链接搜索引擎 BtHaha - Magnet Search_Magnet Links 图片壁纸 Safebooru - Anime picture search engine! Awesome Wallpapers - wallhaven.cc Most inspiring and awesome desktop wallpapers - Wallls.com Popular wallpapers | WallpaperUP Art Abyss - An Art Community 必应每日高清壁纸 - 精彩，从这里开始 Multi-service image search SauceNAO Image Search Pictures to Pin on Pinterest - PinsDaddy 百度图片-发现多彩世界 /kantoku | yande.re konachan.net - Konachan.com Anime Wallpapers konachan.com - Konachan.com Anime Wallpapers Gelbooru | Free Anime and Hentai Gallery 可见即可搜 | 必应可视化搜索 Danbooru: Anime Image Board ACG资源 The Visual Novel Database | vndb 动漫花园资源网-动漫花园镜像站~動漫花園資源網 - 動漫愛好者的自由交流平台 首页 - 萌番组 蜜柑计划 - Mikan Project 动画 – 诸神字幕组 萌绘 | 漫画教程 萌图线稿 ACG调查小队 – 动漫资源分享、互动小站 哈哩哈哩_让你爱不离手的ACG二次元导航站(H站) 嘀哩嘀哩，这里是兴趣使然的无名小站（D站）_dilidili UCCUSS ✗ УКУCC НА СВОЙ ВКУSS | Онлайн-дневник кодируемых и не только материалов. E-Hentai Galleries - The Free Hentai Doujinshi, Manga and Image Gallery System 在线看漫画_飒漫乐画_妃夕妍雪 - 看漫画 Top Animation And Comics Websites in the world 動畫 - 末日動漫資源庫 - Project AcgnX Torrent Asia 扶她动漫资源网Futaacg - 新番动漫BT下载 灵梦御所 – 绅士的幻想乡 subbers.org ACG狗狗 – 属于你的二次元世界 5年目の放課後 bt 磁力蛙 - 最好用的磁力链接搜索引擎 BtHaha - Magnet Search_Magnet Links Download music, movies, games, software! The Pirate Bay - The galaxy&#39;s most resilient BitTorrent site KickassTorrents - Download torrent from Kickass Torrents 鸵鸟bt搜索_磁力搜索_磁力链接,磁力搜索，bt搜索,种子搜索,番号搜索器,torrentkitty中文网,ed2k_迅雷种子_种子_磁力聚合搜索 Torrentz2 Search Engine WDFXW文档分享网–免费标准下载文档 Gather, share and discuss ideas with your team | Niice 《魅力纪录》 20131118 《茶·一片树叶的故事》 第一集 土地和手掌的温度_魅力纪录（CCTV-1综合频道）_视频_央视网 央视精品纪录片专场_纪实台_央视网(cctv.com) 中国纪录片网-国家级纪录片新媒体综合性产业运营平台 BBC纪录片 - 老记录 公开课纪录片下载网 BBC纪录片大全_最新美剧下载 | 纪录片之家 EarthExplorer EOSDIS Worldview (80 条消息)有哪些好的网站，让人第一眼看了就怦然心动，流连忘返？ - 知乎 国外网站大全 - 世界各国网址大全,世界的,你我的! 字幕库(zimuku.la) -- 字幕下载网站 50多个开源PDF阅读编辑工具汇总_PHP_MyDriverC-CSDN博客 padavan - opt.cn2qq.com &gt; padavan 软件下载_更快更安全的软件下载中心_2345软件大全(多特软件下载站) Semantic Scholar konachan.net - Konachan.com Anime Wallpapers /kantoku | yande.re Beautiful Free Images | Unsplash 百度一下，你就知道 Awesome Wallpapers - wallhaven.cc Pictures to Pin on Pinterest - PinsDaddy Most inspiring and awesome desktop wallpapers - Wallls.com 必应每日高清壁纸 - 精彩，从这里开始 百度云搜索，百度网盘资源下载，百度网盘搜索 - 搜百度盘移动版 首页 - 射手网(伪) - assrt.net - 字幕下载，字幕组，中文字幕，美剧字幕，英剧字幕，双语字幕，新番字幕 原始信息搜索 google.com Magi 百度一下，你就知道 微软 Bing 搜索 - 国内版 大数据导航-大数据工具导航-199IT大数据导航-199IT大数据工具导航-Hao.199it.com 世界银行 Wikipedia, the free encyclopedia 维基百科，自由的百科全书 海搜网---hs编码查询|海关编码查询|HS CODE查询|申报要素查询|退税率查询|关税率、消费税率、出口退税率查询的专业网站 中国国家数字图书馆 读者门户 - 中国国家数字图书馆 百度指数 国家数据 中国搜索-国家权威搜索 首页-畅想之星光盘数据库 네이버 포토갤러리 네이버 지식백과 国别报告网 Yandex Airliners.net | Aviation Photography, Discussion Forums &amp; News 科学网—构建全球华人科学社区 我的图书馆 Яндекс Urban Dictionary, March 10: mix in a water Learn Anything 【料理花间】查阅资料参考网站【模拟联合国吧】_百度贴吧 影印古籍资料 Sports Reference | Sports Stats, fast, easy, and up-to-date | Sports-Reference.com 查詢 | -古籍與特藏文獻資源 UNdata 中华人民共和国财政部 Live Flight Tracker - Real-Time Flight Tracker Map | Flightradar24 https://rzjets.net/aircraft/index.php wikiHow - 您可以编辑的指导手册 AIS信息服务平台-船舶信息、船舶动态、AIS动态、船员定位官方网站 船队在线HiFleet 【720P/DVD】勿忘蛛【呆萌腹黑小萝莉】 [市场监管总局]国家标准信息查询_便民服务_服务_中国政府网 国家标准全文公开 维基百科，自由的百科全书 海关统计数据查询平台 国家统计局 Our World in Data 微软 Bing 搜索 - 国内版 民航休闲小站 学校 江苏科技大学-网络服务认证登录 江苏科技大学综合教务管理系统-强智科技 江科大VPN 江科大VPN2 江苏科技大学 江苏科技大学图书馆 读者系统 图书馆v5.6书目检索系统 非vpn-统一身份认证登录 江苏科技大学教务处 江苏科技大学--信息化建设与管理中心 财务处 江苏科技大学邮箱 中国高等教育学生信息网（学信网） 成绩-公寓系统 统一身份认证登录 江苏高校疫情防控培训 奥蓝学生管理信息系统(学生版) 超星尔雅 口袋校园 成绩查询 - 中国教育考试网 江苏科技大学实验教学智能管理系统 江苏科技大学网络课程网站 江苏科技大学网络教学平台 江苏科技大学选课主页 江苏科技大学图书馆 长春理工大学VPN 生物技术学院-JUST 江苏科技大学财务处 长春理工大学图书馆v5.6书目检索系统 共青团江苏科技大学委员会 数字服务大厅-福建省教育考试院 江科大后勤系统 智慧后勤用户登录 江苏科技大学体育学院 江苏科技大学智慧树选课主页 江苏科技大学新校区建设指挥部 大学生就业创业知识竞赛列表 虚拟图书馆 空天 工具 Heavens-Above http://www.stellarium.org/ International Space Station Transit Finder Light Pollution Map - DarkSiteFinder.com Your Guide to the Solar System and the Night Sky | TheSkyLive.com SIMBAD Astronomical Database - CDS (Strasbourg) Open Access Hub 宇宙探索 International Space Station Transit Finder Heavens-Above http://www.stellarium.org/ 航空航天港 - 就爱飞行! 爱航天网 - 致力于航天知识科普，传播航天精神 Precipitation Measurement Missions | An international partnership to understand precipitation and its impact on humankind. Gunter&amp;#39;s Space Page - Information on spaceflight, launch vehicles and satellites 开源天文论坛—技术&amp;星空 乐于分享— astrocn.org - Powered by Discuz! NASA Spaceflight101 – Space News and Beyond China Spaceflight 新视野：超越冥王星 About ESO | ESO NASA Open Source Software SpaceX www.imo.net NASA Image and Video Library ESA 航天爱好者网 Apollo 13 in Real Time 中国航天科技集团有限公司_中国航天科技集团 牧夫天文论坛（中国最早的天文论坛，致力于天文和望远镜的科普交流平台） - Powered by Discuz! IMO | International Meteor Organization 航空航天港 - 就爱飞行! 民航休闲小站 Learning Resources 爱航天网 - 致力于航天知识科普，传播航天精神 Precipitation Measurement Missions | An international partnership to understand precipitation and its impact on humankind. Gunter&#39;s Space Page - Information on spaceflight, launch vehicles and satellites Send Your Name to Mars: Mars 2020 Home The MPC Orbit (MPCORB) Database Encyclopedia Astronautica ESA Earth Observation Data - Earth Online - ESA 卫星百科 - 灰机wiki r00t.cz : Main / Welcome to the r00t.cz : browse Welcome to NASA Headquarters | NASA 中国空间科学技术 官网 全国大学英语四、六级考试报名网 中华人民共和国环境保护部 中国铁路12306 Whitehouse Physical Review Journals - The Work of Stephen Hawking in &lt;i&gt;Physical Review&lt;/i&gt; 世卫组织网站 世界卫生组织 | 中国 中国农业银行 Apple (中国) - 官方网站 国家知识产权局 ZBGB国家标准行业标准信息服务网–免费标准下载网 中华人民共和国教育部政府门户网站 国家市场监督管理总局 深圳市社会保险基金管理局 中华英烈网 中华人民共和国海关总署 福建省教育考试院 中国高等教育学生信息网（学信网） 镇江博物馆 生活 就业 江苏科技大学就业信息网 招聘网_人才网_找工作_求职_上前程无忧 全国大学生创业服务网 职航在线－－专注职业发展教育 猪八戒网镇江站,领先的一站式企业外包服务平台 全国大学生创业服务网 91Job智慧就业平台 - Default 江苏教育人才服务网 江苏招生就业服务网 社会招聘 深圳市生物医药创新产业园 深圳方正微电子有限公司 药明生物/WuXi Biologics 2021金斯瑞生物科技全球校园招聘 罗益（无锡）生物制药有限公司 深圳市新产业生物医学工程股份有限公司 工作 新产业生物协同办公系统 中国政府网_中央人民政府门户网站 国家政务服务平台 广东政务服务网 已搁置标签页 组 1 (43 条消息)首页 - 知乎 Archive 10月 | 雷军的博客 C 命令行参数 | 菜鸟教程 寄存器（cpu工作原理） - u012493828的专栏 - CSDN博客 组 10 万方数据知识服务平台 检索—中国知网 江苏科技大学图书馆 证书错误: 已阻止导航 组 11 Google学术搜索镜像_sci-hub网址_大木虫学术导航 sci-hub.se 科学网—Word转LATEX时Endnote参考文献的格式转换 - 肖瑞春的博文 科学网—外文参考文献引用中人名的问题 - 漆海霞的博文 科学网—怎样查SCI期刊的影响因子与排名 - 吴志峰的博文 组 12 Document Library | NSF - National Science Foundation ESO Event Horizon Telescope eht - 国内版 Bing 未连接到网络 组 13 inonotus - Nucleotide - NCBI 请高手详细介绍一下植物的抗氰呼吸_百度知道 组 14 MEGA4的中文使用说明 – 柳城 Memo/构建系统进化树：从原理到操作.md at master · Ming-Lian/Memo NCBI Blast:Nucleotide Sequence bootstrap consensus tree是什么 - 国际版 Bing 个人中心 - “郑和杯”中德青年创新创业大赛 分子进化笔记（四）: MEGA5构建系统发育树 - 简书 组 15 (80 条消息) 首页 - 知乎 基于ffmpeg+nginx+UscreenCapture的局域网直播系统搭建 - 个人文章 - SegmentFault 思否 局域网直播源 - 国内版 Bing 直播源的制作 - caigan - 博客园 组 16 科学网—大量航天动力学/航天器轨道力学类电子书（英文）pdf 免费下载 - 胡寿村的博文 航天器 PDF - 国内版 Bing 组 17 (81 条消息) 动画制作 - 搜索结果 - 知乎 【分享】 迪斯尼的12条动画规律【g滤镜吧】_百度贴吧 迪斯尼十二条动画规律 - 国内版 Bing 组 2 HHKJ - 腾讯文档 东宁康源生物工程有限公司_工商信息_信用报告_财务报表_电话地址查询-天眼查 哈尔滨墨医生物技术有限公司_工商信息_信用报告_财务报表_电话地址查询-天眼查 广东圣翔耀生物科技有限公司_工商信息_信用报告_财务报表_电话地址查询-天眼查 新疆云端生物科技有限公司_工商信息_信用报告_财务报表_电话地址查询-天眼查 桦褐孔菌 仿生_相关搜索结果-天眼查 桦褐孔菌 市场 - 国内版 Bing 桦褐孔菌白桦茸批发商-桦褐孔菌白桦茸制造商 -阿里巴巴 黑龙江众生生物工程有限公司_工商信息_信用报告_财务报表_电话地址查询-天眼查 组 3 (49 条消息)怎么知道和我关注的相同微信公众号的好友? - 知乎 (49 条消息)首页 - 知乎 微信公众号 朋友关注查找 - 国内版 Bing 组 4 Danbooru2018: A Large-Scale Crowdsourced and Tagged Anime Illustration Dataset - Gwern.net [1812.04948] A Style-Based Generator Architecture for Generative Adversarial Networks 用英伟达GAN生成老婆吧，怎样的妹子都可以 | 有代码 - 知乎 组 5 商业计划书 - 腾讯文档 江苏倍康食品有限公司 江苏倍康食品有限公司 - 国内版 Bing 组 6 (81 条消息)首页 - 知乎 Enterprise Architecture Software for Digital Transformation | MEGA Latex排版全解 - jingwhale - 博客园 探析跟踪成像雷达技术在空间目标监视中的应用_参考网 航天爱好者网 | 最新的航天新闻和发射消息！ 组 7 DNA提取试剂盒步骤--最新 - 百度文库 Omega真菌RNA提取试剂盒R6840说明书（中文翻译版） - 百度文库 inonotus - Nucleotide - NCBI 试剂盒提DNA的原理 - 百度文库 组 8 (81 条消息)如何在公网下载学术文献？ - 知乎 Library Genesis Love Death+Robots_免费高速下载|百度网盘-分享无限制 无法访问此页面 组 9 (80 条消息) 有哪些不错的数学、物理书籍推荐？ - 知乎 物理原理_图书搜索 阅读列表保存 (40 条消息)python - 搜索结果 - 知乎 (81 条消息) 黑洞 - 知乎 (82 条消息) 首页 - 知乎 200多个科研软件下载链接（百度网盘） - Kevin的博客 - CSDN博客 BLAST - 张小双 - 博客园 C++ STL详解 - CnZyy - 博客园 C++ static、const 和 static const 类型成员变量声明以及初始化 | 菜鸟教程 C++中cin的详细用法 - 大旭的博客 - CSDN博客 C++中模板与泛型编程 - wxquare - 博客园 C++之易混淆知识点四---虚函数与虚继承 - yvictoryr - 博客园 C++数据类型对齐、对齐规则 - Josan的博客 - CSDN博客 C++构造函数详解（复制构造函数） - 王小北 - 博客园 CMake入门指南 - sinojelly - 博客园 Danbooru2018: A Large-Scale Crowdsourced and Tagged Anime Illustration Dataset - Gwern.net GAN万字长文综述 - 知乎 How to Contribute to Open Source | Open Source Guides How to Create a Persistent Linux Installation on a Bootable Live USB or SD Card How-To-Ask-Questions-The-Smart-Way/README-zh_CN.md at master · ryanhanwu/How-To-Ask-Questions-The-Smart-Way Latex排版全解 - jingwhale - 博客园 NVlabs/stylegan: StyleGAN - Official TensorFlow Implementation OpenCV-Python 中文教程（搬运）目录 - _Undo - 博客园 Python中下划线---完全解读 - alex.shu - 博客园 Python实例浅谈之三Python与C/C++相互调用 - CalvinChu - 博客园 Python库资源大全 - 中国人醒来了 - 博客园 Python爬虫原理 - Python开发之路 - 博客园 STL教程：C++ STL快速入门（非常详细） UbuntuHelp:Checksum/zh - Ubuntu中文 c++中new的用法 - 故事， - 博客园 c++异常详解 - 程序员修练之路 - 博客园 python小工具--将csv文件转化为图像 - m0_37041325的博客 - CSDN博客 tensorflow-gpu · PyPI 你在 GitHub 上看到过的最有意思的项目是什么？ - GitHub Daily 的回答 - 知乎 别再说找不到Python练手项目了，这80个拿去过冬 - 知乎 十分钟学会写shell脚本 - handsomecui - 博客园 如何编写 C++ 游戏引擎 - 文章 - 伯乐在线 如何轻松爬取网页数据？ - 琉璃块 - 博客园 欢迎使用 Flask — Flask 0.10.1 文档 用Python从头实现一个神经网络 - 知乎 真·干货！这套深度学习教程整理走红，从理论到实践的带你系统学习 | 资源 - 知乎 科学松鼠会 » 化学渗透 details { padding-left: 20px; } /*隐藏默认箭头*/ details ::-webkit-details-marker { display: none; } details ::-moz-list-bullet { font-size: 0; } /*加载自定义箭头*/ details summary::before { font-family:FontAwesome; content: '\\f07b'; position: absolute; width: 1em; height: 1em; margin: 0 0 0 -1.2ch; transition: transform .2s; } /*防止点击过快选中文本*/ details summary { -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } /*隐藏点击后出现的黑框*/ details summary { outline: 0; } details { padding-left: 20px; }","categories":[{"name":"索引","slug":"索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/"},{"name":"资源索引","slug":"索引/资源索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/%E8%B5%84%E6%BA%90%E7%B4%A2%E5%BC%95/"}],"tags":[{"name":"分享","slug":"分享","permalink":"https://yuanz1949.github.io/tags/%E5%88%86%E4%BA%AB/"},{"name":"网站","slug":"网站","permalink":"https://yuanz1949.github.io/tags/%E7%BD%91%E7%AB%99/"}]},{"title":"如何与电脑交流","slug":"如何与电脑交流","date":"2020-11-27T04:30:15.000Z","updated":"2020-11-27T04:30:15.000Z","comments":true,"path":"科技/信息技术/如何与电脑交流/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/%E5%A6%82%E4%BD%95%E4%B8%8E%E7%94%B5%E8%84%91%E4%BA%A4%E6%B5%81/","excerpt":"手把手教会电脑它该这么做","text":"手把手教会电脑它该这么做 为什么要和电脑交流 话不多说动手做 软件使用向的交流 图形界面驱动 命令行驱动 硬件使用向的交流 USB驱动设备 COM驱动设备 Type-C驱动设备 参考资料 信息技术彻底改变了我们的生活的方方面面 为什么要和电脑交流 话不多说动手做 软件使用向的交流 图形界面驱动 命令行驱动 硬件使用向的交流 USB驱动设备 COM驱动设备 Type-C驱动设备 参考资料 命令行界面（CLI） - 知乎 (zhihu.com)","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"信息技术","slug":"科技/信息技术","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"命令行","slug":"命令行","permalink":"https://yuanz1949.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"},{"name":"GUI","slug":"GUI","permalink":"https://yuanz1949.github.io/tags/GUI/"}]},{"title":"文化作品索引","slug":"文化作品索引","date":"2020-11-17T05:01:14.000Z","updated":"2020-11-17T05:01:14.000Z","comments":true,"path":"索引/资源索引/文化作品索引/","link":"","permalink":"https://yuanz1949.github.io/%E7%B4%A2%E5%BC%95/%E8%B5%84%E6%BA%90%E7%B4%A2%E5%BC%95/%E6%96%87%E5%8C%96%E4%BD%9C%E5%93%81%E7%B4%A2%E5%BC%95/","excerpt":"那些年我看过和听过的回忆","text":"那些年我看过和听过的回忆 红色历史经典 著作 乐曲 传统文学 ACG与小说 有些是经典永流传 有些是肥宅快乐番 红色历史经典 著作 资本论 共产党宣言 乐曲 国际歌 义勇军进行曲 传统文学 平凡的世界 ACG与小说","categories":[{"name":"索引","slug":"索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/"},{"name":"资源索引","slug":"索引/资源索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/%E8%B5%84%E6%BA%90%E7%B4%A2%E5%BC%95/"}],"tags":[{"name":"资源","slug":"资源","permalink":"https://yuanz1949.github.io/tags/%E8%B5%84%E6%BA%90/"},{"name":"文化","slug":"文化","permalink":"https://yuanz1949.github.io/tags/%E6%96%87%E5%8C%96/"}]},{"title":"Git手册","slug":"Git手册","date":"2020-10-16T06:56:21.000Z","updated":"2020-10-16T06:56:21.000Z","comments":true,"path":"科技/信息技术/Git手册/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/Git%E6%89%8B%E5%86%8C/","excerpt":"记录改变,团队协作","text":"记录改变,团队协作 什么是Git 开始工作吧 做点准备 记录变动 分支的分分合合 与云端互动 相关资源 什么是Git Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. @Git (git-scm.com) 开始工作吧 做点准备 如果是空文件夹或者是中途加入git来控制项目 init 接管已经有git的项目 记录变动 add commit 分支的分分合合 branch checkout 与云端互动 push 相关资源 Git (git-scm.com) Git (github.com) Git 教程 | 菜鸟教程 - RUNOOB.COM Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com) Git命令大全 - 简书 (jianshu.com)","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"信息技术","slug":"科技/信息技术","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://yuanz1949.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"版本控制","slug":"版本控制","permalink":"https://yuanz1949.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"}]},{"title":"读书笔记-生物信息学算法导论","slug":"读书笔记-生物信息学算法导论","date":"2020-10-11T05:02:57.000Z","updated":"2020-10-11T05:02:57.000Z","comments":true,"path":"科技/生物/读书笔记-生物信息学算法导论/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E7%94%9F%E7%89%A9/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/","excerpt":"会了算法才是真的搞研究","text":"会了算法才是真的搞研究 书籍简介 📚 写在前面 ✋ 让我们解决实际问题吧 算法的魅力在于它是解决具体问题的路线图 只是会编程或者一些计算工具并不能帮助我们直接开始工作 怎么做 就是算法可以告诉我们的 书籍简介 📚 本书和 读书笔记-Python生物信息学数据管理 来源一致, 也是来自 江科大长山校区图书馆 位于 自然科学图书第2阅览室, 索书号: `Q811.4/13 @信息来自江科大图书馆v5.6书目检索系统 题名/责任者: 生物信息学算法导论/(美) N. C. 琼斯 (N. C. Jones) , (美) P. A. 帕夫纳 (P. A. Pevzner) 著 王翼飞等译 出版发行项: 北京:化学工业出版社,2007.07 ISBN及定价: 978-7-122-00169-6/CNY45.00 载体形态项: 345页:图;24cm 并列正题名: Introduction to bioinformatics algorithms 个人责任者: 琼斯 (Jones, Neil C.) 著 个人责任者: 帕夫纳 (Pevzner, Pavel A.) 著 个人次要责任者: 王翼飞, 1948.12- 译 中图法分类号: Q811.4 提要文摘附注: 本书从基本算法入手，展示了生物信息学研究中涉及到的数学技术问题，包括算法与复杂性、分子生物学简介、穷举搜索、贪婪算法、动态规划算法、分而治之算法等。 写在前面 ✋ 让我们解决实际问题吧","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"生物","slug":"科技/生物","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E7%94%9F%E7%89%A9/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://yuanz1949.github.io/tags/Python/"},{"name":"算法","slug":"算法","permalink":"https://yuanz1949.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"读书笔记-Python生物信息学数据管理","slug":"读书笔记-Python生物信息学数据管理","date":"2020-10-04T10:00:05.000Z","updated":"2020-10-04T10:00:05.000Z","comments":true,"path":"科技/生物/读书笔记-Python生物信息学数据管理/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E7%94%9F%E7%89%A9/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Python%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/","excerpt":"当生物与Python交织之时 故事将就此展开","text":"当生物与Python交织之时 故事将就此展开 书籍简介 📚 写在前面 ✍️ 故事就此展开 📖 第一部分 入门 第1章 Python shell 1.2 案例： 计算ATP水解的ΔG 1.3.4 计算 第2章 第一个Python程序 2.2案例： 如何计算胰岛素序列中的氨基酸频率 * 2.5自测题 第二部分 数据管理 第3章 分析数据列 3.2案例： 树突长度 第4章 解析数据记录 4.2 案例： 整合质谱数据， 转化到代谢通路中 第5章 搜索数据 5.2案例： 将RNA序列翻译为相应的蛋白质序列 5.5 自测题 第6章 过滤数据 6.2 案例： 使用RNAseq输出数据 第7章 管理表数据 7.2 案例： 确定蛋白浓度 7.5自测题 第8章 数据排序 8.2案例： 数据表排序 第9章 模式匹配和文本挖掘 9.2 案例： 在蛋白质序列中搜索磷酸化模体 第三部分 模块化编程 第10章 将程序划分为函数 10.2 案例： 处理三维坐标文件 第11章 用类化繁为简 11.2 案例： 孟德尔遗传 第12章 调试 12.2 案例： 程序无法运行时应该怎样处理 第13章 使用外部模块:R语言的Python调用接口 13.2 案例： 从文件中读取数据， 并通过Python使用R计算其平均值 第14章 构建程序流程 14.2 案例： 构建NGS流程 第15章 编写良好的程序 15.2 问题描述： 不确定性 第四部分 数据可视化 第16章 创建科学图表 16.2 案例： 核糖体的核苷酸频率 第17章 使用PyMOL创建分子图像 17.2 示例： 锌指 第18章 处理图像 18.2 案例： 画一个质粒 第五部分 Biopython 第19章 使用序列数据 19.2 案例： 如何将一条DNA编码序列翻译成对应的蛋白质序列并把它写入FASTA文件 第20章 从网络资源中检索数据 20.2 案例： 在PubMed中用关键词搜索文献， 下载并解析对应的记录 第21章 使用三维结构数据 21.2 案例： 从PDB文件中提取原子名及其三维坐标 第六部分 编程秘笈 附录 附录A 命令概览 附录B Python资源 附录C 记录样板 附录D 处理目录和用UNIX编程 接触 计算机技术(IT) 也已经有些年头了 计算机技术表现出来的 高效 的生产力着实让人赞叹, 让人有无穷的动力参与其中 如今入了生物的坑, 自然一直有探索各种生物和信息技术交融的知识领域 但是浅尝辄止的兴趣式的游玩, 终究是不太够用的 倒不如静下心来, 实际地系统地学习一些内容 书籍简介 📚 挑选的书是从 江科大长山校区图书馆 里翻找到的 位于 自然科学图书第2阅览室(5楼), 5号架B面5层, 索书号: Q811.4/51 @信息来自江科大图书馆v5.6书目检索系统 题名/责任者: Python生物信息学数据管理/(意) Allegra Via, (德) Kristian Rother, (意) Anna Tramontano著 卢宏超, 陈一情, 李绍娟译 出版发行项: 北京:电子工业出版社,2017.01 ISBN及定价: 978-7-121-30382-1/CNY69.00 载体形态项: 17, 318页:图;26cm 统一题名: Managing your biological data with Python 中图法分类号:Q811.4-39 版本附注:由Taylor &amp; Francis出版集团旗下，CRC出版公司授权翻译出版 提要文摘附注: 本书由六部分组成：Python语言基本介绍，语言所有成分介绍，高级编程，数据可视化，生物信息通用包Biopython，最后给出20个&quot;编程秘笈”，范围涵盖了从二级结构预测、多序列比对到蛋白质三维结构的广泛话题。此外，附录还包括了大量的生物信息常用资源的信息。 不过找也费了番功夫, 而且发现学校关于生物信息学方面的书还真的不是非常多 可见生物信息学的确还是比较新的一门学科 Library Genesis: Via, Allegra; Rother, Kristian; Tramontano, Anna - Managing Your Biological Data with Python (libgen.rs) 写在前面 ✍️ 此读书笔记会忽略亦或者增加一些内容, 比如 忽略基础的Python语法: 本书还是使用了大量的例子来讲解Python的基础语法的, 但是对于笔者来说已无必要. 需要补充基础语法的小伙伴可以看这里 =&gt; Python3 教程 | 菜鸟教程 (runoob.com) 增加一些涉及到的生物学理论细节: 这主要是补充书中的内容, 使得易于理解相关的例子 当然, 其实主要是什么值得补充就会补充的 :happy: 本笔记按照原书的目录顺序展开, 但是仅保留少部分的标题, 主要以技术流程来整合笔记 本书的代码使用的Python的版本为 Python 2.6.6 笔者使用由 Anaconda 构建的Python版本为 python-2.7.13 的虚拟环境来复现书中的代码 期间可能会尝试使用 Python3.8 的版本来重构里面的代码 没有特别说明, 笔记里的Python版本则为 python-2.7.13 事实上, 掌握充足的生物学知识是非常重要的 计算机技术只是帮助我们自动化地完成了基于生物学认识的工作 本书也只是讲解了如何将Python引入分析以及数据管理的工作流 当你掌握真正的算法和理论实验背景, 你将可以更好地利用Python这个强大的工具 多多做实验, 看看理论书吧 故事就此展开 📖 第一部分 入门 本书的作者描述了他希望这本书带给读者什么 我们希望本书能成为帮助读者每天攀登数据之山的地图, 希望读者能让编程为工作提供便利, 而不必先成为一个专业的软件开发者 作者建议像学习德语一样, 学习Python语法, 把Python标准库 当作字典来查 Python标准库 : Python 标准库 — Python 3.7.8 文档 Python 标准库 — Python 2.7.18 文档 书中的代码和一些总结参考: Managing Your Biological Data with Python - ugo_py_doc (ugoproto.github.io) Managing-Your-Biological-Data-with-Python (github.com) 第1章 Python shell 关于Python的安装可以参考这篇文章 Anaconda之路 主要介绍了如何使用Anaconda来构建Python虚拟环境 Anaconda是一个可以管理Python包和Python环境的软件 所谓Python包指的是别人写(第三方)的有一定功能的Python代码 所谓Python环境其实就是Python代码运行时调用的具体版本的Python解释器 所谓管理指的就是我们可以通过Anaconda的conda指令, 随意地创建包含有我们指定的Python包的指定版本的Python环境, 这样做的目的是解决兼容性问题(相互依赖问题) 比如这本书的代码是Python2时代编写的, 我自然是不可以用Python3的解释器来运行的. 那就可以创建一个Python2的环境来复现书中的代码, 然后再创建一个Python3的环境来重新编写他们(重构) 这样我们就可以复现书中的代码了, 而且还可以轻松的重构老旧的代码 1.2 案例： 计算ATP水解的ΔG 吉布斯自由能: 在热力学里，吉布斯能（英语：Gibbs Free Energy），又称吉布斯自由能、吉布斯函数、自由焓，常用英文字母标记。吉布斯能是国际化学联会建议采用的名称。吉布斯能是描述系统的热力性质的一种热力势，定义为[1]:101[2]:128-129 其中，是系统的内能，是绝对温度，是熵，是压强，是体积，是焓。 $$ \\Delta G=\\Delta G^{0}+R T * \\ln \\left([A D P] *\\left[P_{i}\\right] /[A T P]\\right) $$ $$ [?]: 指 ? 的摩尔浓度 \\\\ ΔG : 吉布斯自由能 \\\\ ΔG^0 : 标准反应吉布斯能 \\\\ R : 摩尔气体常数 \\\\ T : 温度 \\\\ $$ python的 math 模块: 1234567891011&gt;&gt;&gt; import math # 导入数学计算模块&gt;&gt;&gt; dir(math) # dir()函数可以获取传入的模块的内部的函数['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']&gt;&gt;&gt; math.log(...) # 传入参数, 返回它的自然对数&gt;&gt;&gt; help(math.log) # 使用`帮助`这个内建函数查看某个函数的使用说明Help on built-in function log in module math:log(...) log(x[, base]) Return the logarithm of x to the given base. If the base not specified, returns the natural logarithm (base e) of x. 1.3.4 计算 这里引入一篇博文来补充各种符号的意思 python中的各种符号（欢迎补充）_杉木人-CSDN博客 特别之处在Python中, ^ 符号 符号 功能 例子 ^ 按位异或运算符：当两对应的二进位相异时，结果为1 (a ^ b) 输出结果 49 ，二进制解释： 0011 0001 ** 幂 - 返回x的y次幂 a**b 为10的20次方， 输出结果 100000000000000000000 参见 Python2.7.18文档 @9.9.1. 将运算符映射到函数 计算流程: 12345678910&gt;&gt;&gt; ATP = 3.5&gt;&gt;&gt; ADP = 1.8&gt;&gt;&gt; Pi = 5.0&gt;&gt;&gt; R = 0.00831&gt;&gt;&gt; T = 298&gt;&gt;&gt; deltaG0 = -30.5&gt;&gt;&gt;&gt;&gt;&gt; import math&gt;&gt;&gt; deltaG0 + R * T * math.log(ADP * Pi / ATP)-28.161154161098693 通过导入各种参数, 可以直接计算出吉布斯自由能 第2章 第一个Python程序 2.2案例： 如何计算胰岛素序列中的氨基酸频率 * 计算流程: 12345678910111213141516171819202122232425262728# insulin [Homo sapiens] GI:386828# extracted 51 amino acids of A+B chaininsulin = \"GIVEQCCTSICSLYQLENYCNFVNQHLCGSHLVEALYLVCGERGFFYTPKT\"for amino_acid in \"ACDEFGHIKLMNPQRSTVWY\": number = insulin.count(amino_acid) print amino_acid,numberA 1C 6D 0E 4F 3G 4H 2I 2K 1L 6M 0N 3P 1Q 3R 1S 3T 3V 4W 0Y 4 “字符串1”.count(“字符串2”) : 返回字符串1中含有多少字符串2的数量 7.1. string — 常见的字符串操作 — Python 2.7.18 文档 string.``count(s, sub[, start[, end]]) Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices. 注意缩进错误：IndentationError: unindent does not match any outer indentation level 切不可混用 空格缩进和制表符缩进, 否则你会疯的 Python 的反斜杠换行: 123&gt;&gt;&gt; 3 + 5 + \\... 715 内建函数(build-in): 2. 内置函数 — Python 2.7.18 文档 比如 len() 可以直接调用, 并返回结果 对象方法: 某个对象(类的实例)的内部的方法(函数), 通过.符号调用, 如 &quot; &quot;.count(' ') in迭代: 123for ... in ...: ...# `in` 可以迭代字符串等 补充 in , 对 print 输出的影响: 1234print 1,2, # 注意末尾的逗号可以抑制换行符print 31 2 3 转义字符\\: 引号之间的嵌套: random模块: 9.6. random — 生成伪随机数 — Python 2.7.18 文档 2.5自测题 2009年, Elizabeth H. Blackburn, Carol W. Greide 和 Jack W. Szostak 因发现端粒酶功能而获得诺贝尔奖, 端粒酶负责延伸染色体的末端. 通过NCBI的蛋白质数据库检索人类亚型I的端粒的11132个残基序列, 试问其中哪种氨基酸出现的最为频繁? 第二部分 数据管理 第3章 分析数据列 译者推荐标准库模块 collections : 8.3. collections — High-performance container datatypes — Python 2.7.18 文档 3.2案例： 树突长度 作者使用了 ImageJ 来计算树突的长度并把值传入文本文件 软件指路: ImageJ in 迭代: 123# for循环中按行迭代文件的方法for ... in open(...): ... 内建函数(内置函数): 2. 内置函数 — Python 2.7.18 文档 12# 内建函数 sum(); min(); max(); len() % 格式化输出:: 文件的readlines 方法: file.readlines([sizehint]) — Python 2.7.18 文档 此方法可以将文件的内容按行组合成列表返回 硬编码(hard-coding): 不关闭文件的隐患: 当在其他时候读取文件的时候, 之前写入的部分内容因为没有超过缓冲区大小, 还处于内存内. 这将导致有时候你将无法获取想要的内容, 切记及时关闭文件. 缓冲区: 文件的 writelines 方法: 将列表按项无空格连续写入文件, 列表内只支持 字符串 . file.writelines(sequence)¶ Write a sequence of strings to the file. The sequence can be any iterable object producing strings, typically a list of strings. There is no return value. (The name is intended to match readlines(); writelines() does not add line separators.) &quot; &quot;.join()方法: 返回一个由可迭代对象中的字符串串联&quot; &quot;组成的字符串。 str.join(iterable)¶ Return a string which is the concatenation of the strings in iterable. If there is any Unicode object in iterable, return a Unicode instead. A TypeError will be raised if there are any non-string or non Unicode object values in iterable. The separator between elements is the string providing this method. 第4章 解析数据记录 4.2 案例： 整合质谱数据， 转化到代谢通路中 UniProt 形式: UniProt The mission of UniProt is to provide the scientific community with a comprehensive, high-quality and freely accessible resource of protein sequence and functional information. ~ AC: CSV 逗号分隔文件: TSV 制表符分隔文件: MS 质谱: 作者提到的软件与网站: Mascot search engine: Protein identification software for mass spec(质谱) data Welcome to the home of Mascot software, the benchmark for identification, characterisation and quantitation of proteins using mass spectrometry data. Here, you can learn more about the tools developed by Matrix Science to get the best out of your data, whatever your chosen instrument. Reactome Pathway Database: 代谢通路资源获取 Reactome is a free, open-source, curated and peer-reviewed pathway database. Our goal is to provide intuitive bioinformatics tools for the visualization, interpretation and analysis of pathway knowledge to support basic research, genome analysis, modeling, systems biology and education. If you use Reactome in Asia, we suggest using our Chinese mirror site at reactome.ncpsb.org. 1234567891011121314151617# proteins participating in cell cycle 参与细胞通路的蛋白list_a =[]for line in open(\"cell_cycle_proteins.txt\") : list_a.append(line.strip())print list_a# proteins expressed in a given cancer cell 在给定的细胞中表达的蛋白list_b =[]for line in open(\"cancer_cell_proteins.txt\") : list_b.append(line.strip())print list_bfor protein in list_a: #迭代列表a if protein in list_b: #判断是不是在列表b中 print protein, 'detected in the cancer cell' else: print protein, 'not observed' 7.1. The if statement 123456789# if 语句if ...: ...elif ...: ...elif ...: ...else: .... 列表推导式: 5.1.4. 列表推导式 123456bases = ['A','C','T','G']seq = 'GGACXCAGXXGATT'seqlist = [base for base in seq if base in bases]print seqlist['G', 'G', 'A', 'C', 'C', 'A', 'G', 'G', 'A', 'T', 'T'] ESR1蛋白: Protein : Estrogen receptor 雌激素受体 Gene : ESR1 Organism : Homo sapiens (Human) 蛋白详情ESR1 - Estrogen receptor - Homo sapiens (Human) - ESR1 gene &amp; protein (uniprot.org) ESR1蛋白序列: https://www.uniprot.org/uniprot/P03372.fasta &gt;sp|P03372|ESR1_HUMAN Estrogen receptor OS=Homo sapiens OX=9606 GN=ESR1 PE=1 SV=2 MTMTLHTKASGMALLHQIQGNELEPLNRPQLKIPLERPLGEVYLDSSKPAVYNYPEGAAY EFNAAAAANAQVYGQTGLPYGPGSEAAAFGSNGLGGFPPLNSVSPSPLMLLHPPPQLSPF LQPHGQQVPYYLENEPSGYTVREAGPPAFYRPNSDNRRQGGRERLASTNDKGSMAMESAK ETRYCAVCNDYASGYHYGVWSCEGCKAFFKRSIQGHNDYMCPATNQCTIDKNRRKSCQAC RLRKCYEVGMMKGGIRKDRRGGRMLKHKRQRDDGEGRGEVGSAGDMRAANLWPSPLMIKR SKKNSLALSLTADQMVSALLDAEPPILYSEYDPTRPFSEASMMGLLTNLADRELVHMINW AKRVPGFVDLTLHDQVHLLECAWLEILMIGLVWRSMEHPGKLLFAPNLLLDRNQGKCVEG MVEIFDMLLATSSRFRMMNLQGEEFVCLKSIILLNSGVYTFLSSTLKSLEEKDHIHRVLD KITDTLIHLMAKAGLTLQQQHQRLAQLLLILSHIRHMSNKGMEHLYSMKCKNVVPLYDLL LEMLDAHRLHAPTSRGGASVEETDQSHLATAGSTSSHSLQKYYITGEAEGFPATV 1234567891011121314151617181920# 读取整个FASTA记录, 找到里面所属为'Homo sapiens'的序列fasta_file = open('SwissProt.fasta','r') # 读取多序列Fasta文件out_file = open('SwissProtHuman.fasta','w') # 输出文件准备seq = '' # 序列存贮变量for line in fasta_file: #按行迭代 if line[0] == '&gt;' and seq == '': # 判断是不是当前在读记录的第一行 header = line elif line[0] != '&gt;': # 判断不是首行(没有'&gt;'), 直接将此行放入序列 seq = seq + line elif line[0] == '&gt;' and seq != '': # 如果是首行且序列是空的话, 说明上一条的记录读完了 if \"Homo sapiens\" in header: # 这里先判断上一条记录的记录是不是我们要的,是就存起来 out_file.write(header + seq) seq = '' # 清空 header = line # 上一条纪录搞完啦, 把现在在读的这一行保存至haeder if \"Homo sapiens\" in header: # 全部读完了, 但是最后一条记录还没处理, 这里处理掉 out_file.write(header + seq)out_file.close() 第5章 搜索数据 5.2案例： 将RNA序列翻译为相应的蛋白质序列 Synthetic nucleotide sequence of the human GSH transferase pi gene - Nucleotide - NCBI (nih.gov) 12345678910111213141516171819202122232425262728293031323334353637383940codon_table=&#123;'GCU':'A','GCC':'A','GCA':'A','GCG':'A','CGU':'R','CGC':'R','CGA':'R','CCS':'R','AGA':'R','AGG':'R','UCU':'S','UCC':'S','UCA':'S','UCG':'S','AGU':'S','AGC':'S','AUU':'T','AUC':'I','AUA':'T','AUU':'I','AUC':'I','AUA':'I','UUA':'L','UUG':'L','CUU':'L','CUC':'L','CUA':'L','CUG':'L','GGU':'G','GGC':'G','GGA':'G','GSG':'G','GUU':'V','GUC':'V','GUA':'V','GUG':'V','ACU':'T','ACC':'T','ACA':'T','ACG':'T','CCU':'P','CCC':'P','CCA':'P','CCG':'P','AAU':'N','AAC':'N','GAU':'D','GAC':'D','UGU':'C','UGC':'C','CAA':'Q','CAG':'Q','GAA':'E','GAG':'E','CAU':'H','CAC':'H','AAA':'K','AAG':'K','UUU':'F','UUC':'F','UAU':'Y','UAC':'Y','AUG':'M','UGG':'W','UAG':'STOP','UGA':'STOP','UAA':'STOP'&#125;rna = ''for line in open('A06662-RNA.fasta'): if not line.startswith('&gt;'): rna = rna +line.strip()# 一次翻译进行一次阅读框读取for frame in range(3): prot = '' print 'Reading frame ' + str(frame + 1) for i in range(frame, len(rna), 3): codon = rna[i:i+3] if codon in codon_table: if codon_table[codon] == 'STOP': prot= prot + '*' else: prot = prot + codon_table[codon] else: # 如果要识别的短序列不在table里, 则用'-'替代 prot = prot + '-' # 格式化输出成48列的块 i = 0 while i &lt; len(prot): print prot[i:i + 48] i = i + 48 str.startswith(prefix[, start[, end]]) 5. 内置类型 — Python 2.7.18 文档 如果字符串以指定的 prefix 开始则返回 True，否则返回 False。 prefix 也可以为由多个供查找的前缀构成的元组。 如果有可选项 start，将从所指定位置开始检查。 如果有可选项 end，将在所指定位置停止比较。 核酸序列(开放)阅读框(Open Reading Frame): 由于核糖体翻译mRNA时, 三个碱基翻译为一个氨基酸, 那么同一个序列理论上存在三个不同的阅读框 对应于移码突变 对于 序列 ATCGATCG 有 ATC GAT CG, A TCG ATC G, AT CGA TCG 三种方法解读 ORF指的是DNA上的序列，从5’端翻译起始密码子ATG到终止密码子(TAA,TAG,TGA)的蛋白质编码序列。对于任意给定的一段DNA，有两个问题需要考虑， 一是DNA双链中的哪条是编码链 二是编码区究竟从第一个碱基开始进行编码 所以每条链都有潜在的3种ORF，而对于双链DNA来说就有6种可能的ORF。也就是说先从给定的DNA单链为模版，分别从5’-3’方向第123个碱基开始翻译，再以互补链为模版，分别从3’-5’方向的第123个碱基开始翻译，得到另外3种翻译结果。正链上的正向读码框forward，负链的为反向读码框reverse。6个潜在ORF中，一般选择中间没有被终止密码子隔开的最大的读码框为正确的结果。 @4️⃣ 核酸序列特征分析(1):开放阅读框识别 - 简书 (jianshu.com) 文件读取的.next()方法: file.next 2.7文档 file.next() A file object is its own iterator, for example iter(f) returns f (unless f is closed). When a file is used as an iterator, typically in a for loop (for example, for line in f: print line.strip()), the next() method is called repeatedly. This method returns the next input line, or raises StopIteration when EOF is hit when the file is open for reading (behavior is undefined when the file is open for writing). In order to make a for loop the most efficient way of looping over the lines of a file (a very common operation), the next() method uses a hidden read-ahead buffer. As a consequence of using a read-ahead buffer, combining next() with other file methods (like readline()) does not work right. However, using seek() to reposition the file to an absolute position will flush the read-ahead buffer. for循环中的 else : break-and-continue-statements-and-else-clauses-on-loops 1234567891011121314151617&gt;&gt;&gt; for n in range(2, 10):... for x in range(2, n):... if n % x == 0:... print n, 'equals', x, '*', n/x... break... else: # 此else与第二个for对应, 当发生了 break 后, 执行这里... # loop fell through without finding a factor... print n, 'is a prime number'...2 is a prime number3 is a prime number4 equals 2 * 25 is a prime number6 equals 2 * 37 is a prime number8 equals 2 * 49 equals 3 * 3 预测蛋白质序列中的无序(环)区域: 既不是α螺旋也不是β折叠的区域, 就是无序的. 核心思想: 每个氨基酸都有一个特定的二级结构元件倾向, 通过大量已知的蛋白质结构(PDB)的二级结构元件中各类氨基酸类型出现的频率f,来估计倾向. 使用1-f计算: f是以有二级结构元件的部分为基数的(就是有序的), 那么在这样的基数里某种氨基酸出现的越多(频数接近1)则倾向于有序的可能性越大. 对20个氨基酸倾向的值进行标准化和引入负值, 设定一个是否为无序的阈值, 大于阈值为无序(环), 小于为有序(二级结构). 1234567propensities =&#123;'N': 0.2299, 'P': 0.5523, 'Q':-0.18770, 'A':-0.2615,'R':-0.1766, 'S': 0.1429, 'C':-0.01515, 'T': 0.0089,'D': 0.2276, 'E': -0.2047, 'V':-0.38620, 'F':-0.2256,'W':-0.2434, 'G': 0.4332, 'H':-0.00120, 'Y':-0.2075,'I':-0.4222, 'K': -0.1001, 'L': 0.33793, 'M':-0.2259&#125; RCSB PDB: 数据示例概览: RCSB PDB - 6XM5: Structure of SARS-CoV-2 spike at pH 5.5, all RBDs down 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071HEADER VIRAL PROTEIN 29-JUN-20 6XM5 TITLE STRUCTURE OF SARS-COV-2 SPIKE AT PH 5.5, ALL RBDS DOWN COMPND MOL_ID: 1; COMPND 2 MOLECULE: SPIKE GLYCOPROTEIN; ... COMPND 6 MUTATION: YES SOURCE MOL_ID: 1; SOURCE 2 ORGANISM_SCIENTIFIC: SEVERE ACUTE RESPIRATORY SYNDROME CORONAVIRUS ... SOURCE 9 EXPRESSION_SYSTEM_CELL_LINE: FREESTYLE 293F KEYWDS SARS-COV-2 SPIKE, COVID19, VIRAL PROTEIN EXPDTA ELECTRON MICROSCOPY AUTHOR T.ZHOU,Y.TSYBOVSKY,A.OLIA,P.D.KWONG REVDAT 2 12-AUG-20 6XM5 1 JRNL HETSYN REVDAT 1 29-JUL-20 6XM5 0 JRNL AUTH T.ZHOU,Y.TSYBOVSKY,A.S.OLIA,J.GORMAN,M.A.RAPP,G.CERUTTI, ... JRNL TITL CRYO-EM STRUCTURES DELINEATE A PH-DEPENDENT SWITCH THAT ...JRNL PMID 32637958 JRNL DOI 10.1101/2020.07.04.187989 REMARK 2 ... REMARK 3 SOFTWARE PACKAGES : LATITUDE, CTFFIND, UCSF CHIMERA, COOT, REMARK 3 PHENIX, RELION, RELION, RELION, RELION ... REMARK 3 OVERALL ANISOTROPIC B VALUE : NULL ...REMARK 900 STRUCTURE OF SARS-COV-2 SPIKE AT PH 5.5, ALL RBDS DOWN DBREF 6XM5 A 14 1208 UNP P0DTC2 SPIKE_SARS2 14 1208 DBREF 6XM5 B 14 1208 UNP P0DTC2 SPIKE_SARS2 14 1208 DBREF 6XM5 C 14 1208 UNP P0DTC2 SPIKE_SARS2 14 1208 SEQADV 6XM5 GLY A 682 UNP P0DTC2 ARG 682 ENGINEERED MUTATION SEQADV 6XM5 SER A 683 UNP P0DTC2 ARG 683 ENGINEERED MUTATION ...SEQADV 6XM5 LYS C 1288 UNP P0DTC2 EXPRESSION TAG SEQRES 1 A 1275 GLN CYS VAL ASN LEU THR THR ARG THR GLN LEU PRO PRO SEQRES 2 A 1275 ALA TYR THR ASN SER PHE THR ARG GLY VAL TYR TYR PRO ...SEQRES 99 C 1275 LYS HET NAG D 1 14 HET NAG D 2 14 ...HETNAM NAG 2-ACETAMIDO-2-DEOXY-BETA-D-GLUCOPYRANOSE ...FORMUL 4 NAG 58(C8 H15 N O6) HELIX 1 AA1 ASP A 294 LYS A 304 1 11 ... SHEET 3 AA1 8 TYR A 265 TYR A 269 -1 O TYR A 265 N PHE A 65 ...LINK O4 NAG S 1 C1 NAG S 2 1555 1555 1.44 CRYST1 1.000 1.000 1.000 90.00 90.00 90.00 P 1 ORIGX1 1.000000 0.000000 0.000000 0.00000 ...SCALE3 0.000000 0.000000 1.000000 0.00000 ATOM 1 N ALA A 27 188.584 130.357 168.091 1.00 91.79 N ATOM 2 CA ALA A 27 189.571 130.261 169.159 1.00 91.79 C ATOM 3 C ALA A 27 190.053 131.641 169.567 1.00 91.79 C ATOM 8249 OG SER A1147 191.132 184.224 284.141 1.00152.29 O TER 8250 SER A1147 ATOM 8251 N ALA B 27 132.579 208.265 174.154 1.00140.96 N ...TER 24584 SER C1147 HETATM24585 C1 NAG D 1 184.739 152.280 150.742 1.00114.03 C HETATM24586 C2 NAG D 1 183.632 153.136 150.126 1.00114.03 C ...CONECT 29225033 CONECT 70225047 ...CONECT2539625389 MASTER 907 0 58 69 173 0 0 625393 3 936 297 END 5.5 自测题 NCBI下载FASTA格式RNA序列: PubMed文献检索: 二级结构元素预测: 氨基酸二级结构偏好表: Amino Acid Secondary Structure Preferences A.A. Helix Helix Sheet Sheet A.A. Designation P Designation P A H 1.45 I 0.97 C i 0.77 h 1.30 D i 0.98 i 0.80 E H 1.53 B 0.26 F h 1.12 h 1.28 G B 0.53 i 0.81 H h 1.24 b 0.71 I I 1.00 H 1.60 K I 1.07 b 0.74 L H 1.34 h 1.22 M h 1.20 H 1.67 N b 0.73 b 0.65 P B 0.59 b 0.62 Q h 1.17 h 1.23 R i 0.79 i 0.90 S i 0.79 b 0.72 T i 0.82 h 1.20 V h 1.14 H 1.65 W h 1.14 h 1.19 Y b 0.61 h 1.29 Designations: H = Strong Former, h = Former, I = Weak Former, i = Indifferent, B = Strong Breaker, b = Breaker; P : Conformational Parameter 第6章 过滤数据 6.2 案例： 使用RNAseq输出数据 新一代测序(Next-generation sequencing，NGS): 最早广泛应用测序技术为 70 年代的 Sanger 法，这也是完成人类基因组计划的基础，因其测序通量低、费时费力，科学家们一直在寻求通量更高、速度更快、价格更便宜、自动化程度更高的测序技术。自 2005 年以来，以Roche 公司的 454 技术、Illumina 公司的 Solexa 技术以及 ABI 公司的 SOLiD 技术为标志的高通量测序技术相继诞生 [6]。相较于传统方法，该技术主要特点是测序通量高、测序时间和成本显著下降，可以一次对几十万到几百万条 DNA 分子序列测定，这使某物种全基因组和转录组的全貌细致分析成为可能，又称为深度测序，很多文献中称其为新一代测序技术，足见其划时代意义 [7]。 @转录组测序技术的应用及发展综述 - 知乎 (zhihu.com) 推荐阅读 转录组(Transcriptome)测序技术|RNA-Seq(RNA sequencing)技术 : 转录本就是基因通过转录形成的通过剪切生成的一种或多种可供编码蛋白质的成熟的mRNA。剪切的过程中可能会剪切掉外显子，也有可能保留部分内含子，这样就形成了多种mRNA即多个转录本。 @基因研究不知道转录本，做什么引物设计？！ (sohu.com) RNA-Seq利用高通量测序技术对组织或细胞中所有RNA 反转录而成cDNA文库进行测序，通过统计相关读段(reads)数计算出不同RNA的表达量，发现新的转录本；如果有基因组参考序列，可以把转录本映射回基因组，确定转录本位置、剪切情况等更为全面的遗传信息，已广泛应用于生物学研究、医学研究、临床研究和药物研发等。 @转录组测序技术的应用及发展综述 - 知乎 (zhihu.com) 推荐阅读 大致流程: 比对read到基因组，转录本组装，差异表达分析和差异基因注释 转录本组装主要就是将比对到参考基因组的read组装成转录本接着进行下游的新转录本鉴定和转录本定量等分析，常见软件有StringTie和cufflinks。而对于无参转录组分析来说，转录本组装主要是将测序reads从头组装成转录本，常见软件有Trinity,Oases和SOAPdenovo-Trans。 @转录组测序（转录本组装篇）_分析 (sohu.com) @转录组分析流程 - 简书 (jianshu.com) 无参转录组和有参转录组的区别: 如果所研究的物种有组装注释质量较好基因组序列，且和该基因组序列比对效率较高，那么可以采用有参转录组的分析策略，直接进行分析。反之，则需要按照无参转录组的分析策略进行转录本组装，构建unigene(基因簇)库，然后进行后续分析。 @转录组测序：常见基础知识准备一 - 知乎 (zhihu.com) 转录本文件 .gtf : 记录了各个样本装配好的转录本 Cufflinks (cole-trapnell-lab.github.io) Cufflinks assembles transcripts, estimates their abundances, and tests for differential expression and regulation in RNA-Seq samples. It accepts aligned RNA-Seq reads and assembles the alignments into a parsimonious set of transcripts. Cufflinks then estimates the relative abundances of these transcripts based on how many reads support each one, taking into account biases in library preparation protocols. Cufflinks cuffcompare Cufflinks includes a program that you can use to help analyze the transfrags you assemble. The program cuffcompare helps you: Compare your assembled transcripts to a reference annotation Track Cufflinks transcripts across multiple experiments (e.g. across a time course) 转录本比对文件 .tracking : 导入转录本文件(.gtf)到 cuffcompare 生成 元组方法: intersection(*others) : 返回一个新集合，其中包含原集合以及 others 指定的所有集合中共有的元素。 @intersection 5. 内置类型 — Python 2.7.18 文档 difference(*others) : 返回一个新集合，其中包含原集合中在 others 指定的其他集合中不存在的元素。 @difference 5. 内置类型 — Python 2.7.18 文档 更多方法参见文档 列表的.count()方法: 8.6. array — 高效的数值数组 — Python 2.7.18 文档 array.count(x) : 返回 x 在数组中的出现次数。 内置函数相关: 2. 内置函数 — Python 2.7.18 文档 pop(): reduce(): del(): remove(): enumerate(): .readlines() 返回的列表可以索引: 12lines = open('text.txt').readlines()open('new.txt', 'w').writelines(lines[2:4]+lines[6:]) 使用列表推导式筛选: 12data_a = [1, 2, 3, 4, 5, 6]data = [x for x in data_a if x != 3] 去重妙法-元组去重: 12input_file = open('UniprotID.txt')unique = set(input_file) CD-HIT(可容错的高同源性聚类数据库): 可以快速地的基于用户定义的相似性阈值对蛋白质序列进行聚类, 需要输入一组FASTA格式的序列,并返回两个文件: 一个是聚类列表, 一个是所聚各类的代表序列. @CD-HIT Official Website (weizhongli-lab.org) @weizhongli/cdhit: Automatically exported from code.google.com/p/cdhit (github.com) @教程 | 如何用cd-hit去除冗余序列？ (sohu.com) 第7章 管理表数据 7.2 案例： 确定蛋白浓度 苯酚福林试剂测定蛋白质含量的流程: 相关论文: PROTEIN MEASUREMENT WITH THE FOLIN PHENOL REAGENT (jbc.org) 对比于凯氏定氮法的优势,对多个样品可以使用光度计快速地进行测量. @6. ANALYSIS OF PROTEINS (umass.edu) zip()内置函数: zip([iterable, …]) 2. 内置函数 — Python 2.7.18 文档 1234567891011121314151617181920212223242526272829303132333435363738&gt;&gt;&gt; x = [1, 2, 3]&gt;&gt;&gt; y = [4, 5, 6]&gt;&gt;&gt; zipped = zip(x, y)&gt;&gt;&gt; zipped[(1, 4), (2, 5), (3, 6)]&gt;&gt;&gt; x2, y2 = zip(*zipped) # *号的功能是去除zipped元组的外括号(相当于拆解)&gt;&gt;&gt; x == list(x2) and y == list(y2)True# 效果同转置矩阵:zipped = zip(*zipped)# 样例table = [ ['protein', 'ext1', 'ext2', 'ext3'], [0.16, 0.038, 0.044, 0.040], [0.33, 0.089, 0.095, 0.091], [0.66, 0.184, 0.191, 0.191], [1.00, 0.280, 0.292, 0.283], [1.32, 0.365, 0.367, 0.365], [1.66, 0.441, 0.443, 0.444] ]# remove the first rowtable = table[1:]protein, ext1, ext2, ext3 = zip(*table)# create a single column for `ext` or concatenate each `ext`# extend (`* 3`) the `protein` column to match the `ext` column.extinction = ext1 + ext2 + ext3protein = protein * 3# create four tuples for each columntable = zip(protein, extinction)for prot, ext in table: print prot, ext 列表创建注意: 如何创建多维列表？编程常见问题 — Python 2.7.18 文档 [0]*3这样的语法是创建了[0]的三个引用, 改变一个列表的内容将改变所有内容 1234567891011121314151617181920table = [ ['protein', 'ext'], [0.16, 0.038], [0.33, 0.089], [0.66, 0.184], [1.00, 0.280], [1.32, 0.365], [1.66, 0.441]]# convert nested list to nested dictnested_dict = &#123;&#125;n = 0key = table[0]for row in table[1:]: # for row in table[0:] includes the header n += 1 entry = &#123;key[0]: row[0], key[1]: row[1]&#125; nested_dict['row'+str(n)] = entryprint nested_dict 7.5自测题 RNA碱基相似性矩阵: A G C U A 1.0 0.5 0.0 0.0 G 0.5 1.0 0.0 0.0 C 0.0 0.0 1.0 0.5 U 0.0 0.0 0.5 1.0 第8章 数据排序 8.2案例： 数据表排序 sorted(iterable[, cmp[, key[, reverse]]]) 内置函数: sorted 2. 内置函数 — Python 2.7.18 文档 根据 iterable 中的项返回一个新的已排序列表。 参数cmp(x, y): 2. 内置函数 — Python 2.7.18 文档 sorted方法会隐式的调用cmp()函数进行两两比对, 可以通过自定义函数传给cmp参数控制排序 Compare the two objects x and y and return an integer according to the outcome. The return value is negative if x &lt; y, zero if x == y and strictly positive if x &gt; y. 12345678910111213141516&gt;&gt;&gt; def numeric_compare(x, y):... return x - y&gt;&gt;&gt; sorted([5, 2, 4, 1, 3], cmp=numeric_compare) [1, 2, 3, 4, 5]def my_cmp(a,b): # 这个cmp可以在比对a和b的第x项相等时,寻找x+1项进行比对 x = 0 if a[x] &lt; b[x]: return 1 if a[x] == b[x]: if a[x+1] &lt; b[x+1]: return 1 if a[x+1] == b[x+1]: if a[x+2] &lt; b[x+2]: return 1 if a[x+2] == b[x+2]: return 0 if a[x+2] &gt; b[x+2]: return -1 if a[x+1] &gt; b[x+1]: return -1 if a[x] &gt; b[x]: return -1 排序默认按照ASCII顺序进行排序 space 0 : A Q [ a q } ! 1 ; B R \\ b r tick “ 2 &lt; C S ] c s { # 3 = D T ^ d t $ 4 &gt; E U _ e u DEL % 5 ? F V ` f v &amp; 6 @ G W g w ‘ 7 H X h x ( 8 I Y i y ) 9 J Z j z * K k + L l , M m - N n . O o / P p openator模块的itemgetter: 9.9. operator — 标准运算符替代函数 — Python 2.7.18 文档 1234567&gt;&gt;&gt; inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)]&gt;&gt;&gt; getcount = itemgetter(1) # 构建一个获取`索引1的值`的itemgetter函数&gt;&gt;&gt; map(getcount, inventory) # 将inventory按项逐个传入getcount, 获取每项索引号为1的值[3, 2, 5, 1]&gt;&gt;&gt; sorted(inventory, key=getcount) # 也可以将getcount作为key, 使用sorted排序# 这里按照inventory的每一项的索引号为1的值进行排序[('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)] 更多排序参见: 排序指南 — Python 2.7.18 文档 通过shell终端命令排序: Linux sort 命令详解：对文本文件中所有行进行排序。 - Linux 命令搜索引擎 (wangchujiang.com) 123%sort myfile.txt # 按照字母表顺序排序%sort -n myfile.txt # 按照数值排序%sort myfile.txt -k2n -kl # 多列排序 对.tsv制表符分隔符文件的每行,按照七个优先级排序 12345678910111213from operator import itemgetter# read tablein_file = open(\"random_distribution.tsv\")table = []for line in in_file: columns = line.split() columns = [float(x) for x in columns] table.append(columns) # 提取table每项的0~6形成的元组进行逐项比对排序table_sorted = sorted(table, key=itemgetter(0, 1, 2, 3, 4, 5, 6)) print table_sorted 对BLAST的.csv逗号分隔符文件每行的某一项进行排序 123456789101112131415161718192021from operator import itemgetterinput_file = open(\"BlastOut.csv\")output_file = open(\"BlastOutSorted.csv\",\"w\")# read BLAST output tabletable = []for line in input_file: col = line.split(',') col[2] = float(col[2]) table.append(col)table_sorted = sorted(table, key=itemgetter(2), reverse=True)# write sorted table to an output filefor row in table_sorted: row = [str(x) for x in row] output_file.write(\"\\t\".join(row) + '\\n')input_file.close()output_file.close() blastp(蛋白质比对蛋白数据库)工具: blast+本地化中blastp操作(基于PDB库)—linux - wang霏霏 - 博客园 (cnblogs.com) 这或许是我写的最全的BLAST教程 - 简书 (jianshu.com) A链血红蛋白PDB表报告: RCSB PDB: Search 第9章 模式匹配和文本挖掘 9.2 案例： 在蛋白质序列中搜索磷酸化模体 正则表达式(regular expression, regexp): 代表一组字符串的字符串语法 类似的: 生物学家使用N来代替任意碱基(ATCG) [和]被称为元字符,由它和字符来编码一组字符串的表达,为正则表达式 7.2. re — 正则表达式操作 — Python 2.7.18 文档 请仔细阅读 re.compile(pattern, flags=0): Compile a regular expression pattern into a regular expression object, which can be used for matching using its match() and search() methods. 参数见上面的文档 re.compile()返回RegexpObject对象, 使用该对象的.search()方法将返回Match Object对象, 该对象还可以使用.group()/.span()/.start()/.end()方法. 另外RegexpObject对象还有.findall()/.match()/.finditer()等方法可以用, 详见文档 由(和)配合匹配到的字符串可以用group()获取识别到的更小的子组 1234567seq = 'zzabcdzz'pattern = re.compile('(a(b)c)d')match = pattern.search(seq)print match.group(0)print match.group(1)print match.group(2)print match.groups() 检索匹配指定序列: 1234567891011121314151617181920import re # 正则表达式模块# define a string with occurrences of regex:seq = 'VSVLTMFRYAGWLDRLYMLVGTQLAAIIHGVALPLMMLI'# compile a pattern and assign it to a variablepattern = re.compile('[ST]Q') # 转换字符串为正则表达式对象# search for the pattern in the stringmatch = pattern.search(seq)if match: # print the first match along the sequence with the group() method # 4 characters before and after the pattern print '%10s' %(seq[match.start() - 4:match.end() + 4]) print '%6s' % match.group()else: print \"no match\"# 结果: # MLVGTQLAAI# TQ 功能性模体表达: ELM: elm.eu.org This computational biology resource mainly focuses on annotation and detection of eukaryotic linear motifs (ELMs) by providing both a repository of annotated motif data and an exploratory tool for motif prediction. ELMs, or short linear motifs (SLiMs), are compact protein interaction sites composed of short stretches of adjacent amino acids. They are enriched in intrinsically disordered regions of the proteome and provide a wide range of functionality to proteins (Davey,2011,Van Roey,2014) They play crucial roles in cell regulation and are also of clinical importance, as aberrant SLiM function has been associated with several diseases and SLiM mimics are often used by pathogens to manipulate their hosts’ cellular machinery (Davey,2011, Uyar,2014) PROSITE: ExPASy - PROSITE PROSITE consists of documentation entries describing protein domains, families and functional sites as well as associated patterns and profiles to identify them [More… / References / Commercial users ]. PROSITE is complemented by ProRule , a collection of rules based on profiles and patterns, which increases the discriminatory power of profiles and patterns by providing additional information about functionally and/or structurally critical amino acids [More…]. .findall()和.finditer()方法: 123456789101112131415161718import repattern = re.compile('R.[ST][^P]')seq = 'RQSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'# findall returns a list of all matchesmatches = pattern.findall(seq)print matches # 结果: ['RQSA', 'RRSL', 'RPSK']# finditer returns an iterator of match objectsmatch_iter = pattern.finditer(seq) # 返回一个符合条件的迭代器for match in match_iter: print match.group(), match.span(), match.start(), match.end() # 结果: # RQSA (0, 4) 0 4 # RRSL (18, 22) 18 22 # RPSK (40, 44) 40 44 子组group()的使用 123456789101112131415161718192021import reseq = 'QSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'pattern1 = re.compile('R(.)[ST][^P]')match1 = pattern1.search(seq)print match1.group() # 结果: RRSLprint match1.group(1) # 结果: Rpattern2 = re.compile('R(.&#123;0,3&#125;)[ST][^P]')match2 = pattern2.search(seq)print match2.group() # 结果: RRRSLprint match2.group(1) # 结果: RRseq = 'zzabcdzz'pattern = re.compile('(?P&lt;w1&gt;a(?P&lt;w2&gt;b)c)d')match = pattern.search(seq)print match.group(0)print match.group('w1')print match.group('w2') Linux命令-grep: Linux grep 命令详解：强大的文本搜索工具 (wangchujiang.com) 1grep ^'&gt;' 3G5U.fasta # 筛选带有 `&gt;` 的行 PROSITE正则表达式语法: ScanProsite user manual (expasy.org) 可通过字符串的.replace()方法将其转换为Python的re模块的语法 123456789101112# 此正则表达式用于寻找 钙结合的类EGF结构域签名(PROSITE ID: EGF_CA; PROSITE AC: PS01187)pattern = '[DEQN]-x-[DEQN](2)-C-x(3,14)-C-x(3,7)\\ -C-x-[DN]-x(4)-[FY]-x-C'pattern = pattern.replace('&#123;','[^')pattern = pattern.replace('&#125;',']')pattern = pattern.replace('(','&#123;')pattern = pattern.replace(')','&#125;')pattern = pattern.replace('-','')pattern = pattern.replace('x','.')pattern = pattern.replace('&gt;','$')pattern = pattern.replace('&lt;','^')print pattern 在基因组序列中找到转录因子的结合位点: 转录因子结合位点列表(TFBS)作为检索表达式, 检索基因组序列即可 转录因子: 批量预测转录因子(TF)和转录因子结合位点(TFBS) (tencent.com) 123456789101112131415161718192021import regenome_seq = open('genome.txt').read()# read transcription factor binding site patternssites = []for line in open('TFBS.txt'): fields = line.split() tf = fields[0] site = fields[1] sites.append((tf, site))# match all TF's to the genome and print matchesfor tf, site in sites: tfbs_regexp = re.compile(site) all_matches = tfbs_regexp.findall(genome_seq) matches = tfbs_regexp.finditer(genome_seq) if all_matches: print tf, ':' for tfbs in matches: print '\\t', tfbs.group(), tfbs.start(), tfbs.end() 从PubMed的HTML页面提取标题和摘要文本: 通过访问想要的网页然后使用浏览器的开发者模式, 得到想要获取的内容的标签, 这样可以构建正则表达式来检索我们想要的内容. 12345678910111213141516import urllib2 # 网络访问库import repmid = '18235848'url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=%s' % pmidhandler = urllib2.urlopen(url) # 使用 urllib2的urlopen方法打开目标网页html = handler.read()title_regexp = re.compile('&lt;h1&gt;.&#123;5,400&#125;&lt;/h1&gt;') # 匹配格式为一级标题的内容字符5~400的标签title_text = title_regexp.search(html)abstract_regexp = re.compile('&lt;AbstractText&gt;.&#123;20,3000&#125;&lt;/AbstractText&gt;')abstract_text = abstract_regexp.search(html)print 'TITLE:', title_text.group() print 'ABSTRACT:', abstract_text.group() 检测科学摘要中特定的词或词组: 1234567891011121314151617181920212223import urllib2import re# word to be searchedword_regexp = re.compile('schistosoma') # 构建想要检索的词编译出的正则对象# list of PMIDs where we want to search the wordpmids = ['18235848', '22607149', '22405002', '21630672'] # 多篇文章的idfor pmid in pmids: url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid handler = urllib2.urlopen(url) html = handler.read() title_regexp = re.compile('&lt;h1&gt;.&#123;5,400&#125;&lt;/h1&gt;') title = title_regexp.search(html) title = title.group() abstract_regexp = re.compile('&lt;AbstractText&gt;.&#123;20,3000&#125;&lt;/AbstractText&gt;') abstract = abstract_regexp.search(html) abstract = abstract.group() word = word_regexp.search(abstract, re.IGNORECASE) # 匹配想要的字词 if word: # display title and where the keyword was found print title print word.group(), word.start(), word.end() 氨基酸磷酸化位点: 简单的匹配可用正则表达式: 'R.[ST][^P]' 参考: NetPhos 3.1–蛋白磷酸化位点预测 - 简书 (jianshu.com) 第三部分 模块化编程 这一部分作者希望读者可以掌握编写由功能较为独立的完善的模块组成的程序 第10章 将程序划分为函数 10.2 案例： 处理三维坐标文件 .PDB格式解读: Atomic Coordinate Entry Format Version 3.3 (wwpdb.org) 推荐阅读 PDB-101: Learn: Guide to Understanding PDB Data: Primary Sequences and the PDB Format (rcsb.org) PDB文件说明 - 简书 (jianshu.com) 推荐阅读 PDB(Protein Data Bank)数据格式详解 - Raymone1125 - 博客园 (cnblogs.com) 该格式文件获取来源: RCSB PDB: Homepage (此记录为书中例子这里摘录作为一个简单的例子) 记录的第一部分此为标头, 由几个解释行组成, 包括来源生物体/实验技术(X射线/核磁共振)/交叉引用/实验细节/原始分子序列和变异残基(如果有)等. 记录的第二部分介绍了标准组的原子坐标行. 每一个原子坐标行准确地描述了一个原子. 他们以**‘ATOM’**字符串开始: 1~6列为’ATOM’, 7~11列为’原子序号’, 13~16列为’原子名’, 17列’另存位置指示’, 18~20列为’残基名’, 22列为’链标识符’, 23~26列为’残基序号’, 27列为’残基插入码’, 31~38列为x笛卡尔坐标(x轴单位为埃), 39~46列为’y…’, 47~54列为’z…’, 55~60列为’布局’, 61~66列为’温度系数’, 77~78列为’元素符号’, 79~81列为’原子电荷’ (值得说明的是原子名 CA和CB指的都是碳原子, A和B用于远程标识符, 表示离氨基碳原子的远近, A: α,B: β,G: γ等,原子名称的最后一个字符可以代表分支标识符) struct模块: [7.3. struct — Interpret strings as packed binary data — Python 2.7.18 文档](https://docs.python.org/zh-cn/2.7/library/struct.html?highlight=struct pack#module-struct) struct.pack(fmt, v1, v2, …) Return a string containing the values v1, v2, ... packed according to the given format. The arguments must match the values required by the format exactly. struct.unpack(fmt, string) Unpack the string (presumably packed by pack(fmt, ...)) according to the given format. The result is a tuple even if it contains exactly one item. The string must contain exactly the amount of data required by the format (len(string) must equal calcsize(fmt)). 123456789101112131415import struct# pack() method; creates a stringformat = '2s1s1s1s1s'group = struct.pack(format, '10', '2', '3', '4', '5') # 结果: 102345# unpack() method; parses the string to a tupleformat = '1s2s1s1s'line = '12345'col = struct.unpack(format, line) # 结果: ('1', '23', '4', '5')# calcsize() returns the number of characters# in a given format stringformat = '30s30s20s1s'print struct.calcsize(format) # 结果: 81 函数定义与使用: 定义函数 4. 其他流程控制工具 — Python 2.7.18 文档 详细阅读 12345678910&gt;&gt;&gt; def fib(n): # write Fibonacci series up to n... \"\"\"Print a Fibonacci series up to n.\"\"\"... a, b = 0, 1... while a &lt; n:... print a,... a, b = b, a+b...&gt;&gt;&gt; # Now call the function we just defined:... fib(2000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 处理PDB数据里的坐标数据变成氨基酸序列: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879'''Extract a FASTA sequence from a PDB file.-----------------------------------------------------------(c) 2013 Allegra Via and Kristian Rother Licensed under the conditions of the Python License This code appears in section 10.2.2 of the book \"Managing Biological Data with Python\".-----------------------------------------------------------'''import structpdb_format = '6s5s1s4s1s3s1s1s4s1s3s8s8s8s6s6s10s2s3s' # 采用`format`格式 %6samino_acids = &#123; 'ALA':'A', 'CYS':'C', 'ASP':'D', 'GLU':'E', 'PHE':'F', 'GLY':'G', 'HIS':'H', 'LYS':'K', 'ILE':'I', 'LEU':'L', 'MET':'M', 'ASN':'N', 'PRO':'P', 'GLN':'Q', 'ARG':'R', 'SER':'S', 'THR':'T', 'VAL':'V', 'TYR':'Y', 'TRP':'W' &#125;def threeletter2oneletter(residues): # 氨基酸缩写从三个字母 2(to,到) 单个字母 ''' Converts the first element of each residue to a one letter amino acid symbol ''' for i, threeletter in enumerate(residues): residues[i][0] = amino_acids[threeletter[0]]def get_residues(pdb_file): ''' Reads the PDB input file, extracts the residue type and chain from the CA lines and appends both to the residues list ''' residues = [] for line in pdb_file: if line[0:4] == \"ATOM\": tmp = struct.unpack(pdb_format, line) ca = tmp[3].strip() if ca == 'CA': res_type = tmp[5].strip() chain = tmp[7] residues.append([res_type, chain]) return residuesdef write_fasta_records(residues, pdb_id, fasta_file): ''' Write a FASTA record for each PDB chain ''' seq = '' chain = residues[0][1] for aa, new_chain in residues: if new_chain == chain: seq = seq + aa else: # write sequence in FASTA format fasta_file.write(\"&gt;%s_%s\\n%s\\n\" % (pdb_id, chain, seq)) seq = aa chain = new_chain # write the last PDB chain fasta_file.write(\"&gt;%s_%s\\n%s\\n\" % (pdb_id, chain, seq))def extract_sequence(pdb_id): ''' Main function: Opens files, writes files and calls other functions. ''' pdb_file = open(pdb_id + \".pdb\") fasta_file = open(pdb_id + \".fasta\", \"w\") residues = get_residues(pdb_file) threeletter2oneletter(residues) write_fasta_records(residues, pdb_id, fasta_file) pdb_file.close() fasta_file.close() # call the main functionextract_sequence(\"3G5U\") range()迭代利器: range() 2. 内置函数 — Python 2.7.18 文档 可变参数与不可变参数: 不要使用不可变参数作为函数的默认参数 lambda匿名函数: 4. 其他流程控制工具 — Python 2.7.18 文档 第11章 用类化繁为简 11.2 案例： 孟德尔遗传 Class(类)的构建: 9. 类 — Python 2.7.18 文档 仔细阅读 .__repr__() 类方法: 当print命令打印类时, 将按照此类方法返回的格式进行输出 类在多人合作编程的优势 子类与继承 12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Pea: def __init__(self, genotype): # 初始化的构造函数 self.genotype = genotypeclass PeaStrain: def __init__(self, peas): self.peas = peasyellow = Pea('GG') # 类的实例化green = Pea('gg')strain = PeaStrain([yellow, green])print Pea # __main__.Peaprint PeaStrain # __main__.PeaStrainprint Pea.__init__ # &lt;unbound method Pea.__init__&gt;print PeaStrain.__init__ # &lt;unbound method PeaStrain.__init__&gt;print yellow # &lt;__main__.Pea instance at 0x0000000001DC6748&gt;print green # &lt;__main__.Pea instance at 0x000000000216BE08&gt;print strain # &lt;__main__.PeaStrain instance at 0x000000000216BE48&gt;'''Classes can inherit from other classesand extend their functionality.-----------------------------------------------------------(c) 2013 Allegra Via and Kristian Rother Licensed under the conditions of the Python License This code appears in section 11.4.3 of the book \"Managing Biological Data with Python\".-----------------------------------------------------------'''from pea import Peaclass CommentedPea(Pea): def __init__(self, genotype, comment): Pea.__init__(self, genotype) # 载入父类构造函数 self.comment = comment def __repr__(self): return '%s [%s] (%s)' % (self.get_phenotype(), self.genotype, self.comment)yellow1 = CommentedPea('GG', 'homozygote')yellow2 = CommentedPea('Gg', 'heterozygote')print yellow1 类的设计指南: 单一职责原则和不重复自己原则 设计模式 : Design Patterns &amp; Refactoring (sourcemaking.com) 第12章 调试 12.2 案例： 程序无法运行时应该怎样处理 三种错误类型 语法错误(SyntaxError): Python规定语法之外的不合法的写法 逻辑错误: 程序运行不会报错, 但是程序的运行结果不是你想要的结果 运行时错误: 语法检查通过, 但是运行时出现了意想不到的情况的 异常处理: 8. 错误和异常 — Python 2.7.18 文档 try: ... except: 语句: 123456&gt;&gt;&gt; while True:... try:... x = int(raw_input(\"Please enter a number: \"))... break... except ValueError:... print \"Oops! That was no valid number. Try again...\" 我还没有数据. 在掌握数据前建立理论是一个巨大的错误. 不知不觉地, 就开始扭曲事实以适应理论, 而不是让理论符合事实. @ The Adventures of Sherlock Holmes, Arthur Conan Doyle pdb调试工具: 26.2. pdb — Python的调试器 — Python 2.7.18 文档 第13章 使用外部模块:R语言的Python调用接口 13.2 案例： 从文件中读取数据， 并通过Python使用R计算其平均值 R语言 第14章 构建程序流程 14.2 案例： 构建NGS流程 NGS技术应用: 差异表达基因 非编码RNA 突变 Top Hat RNA-seq: 输出包含小cDNA测序片段 (称为读长,reads)的文件, 需回贴至参考基因组并进行拼装, 以获得全部的样本基因序列 某种流程实例: 由Illumina(GAIIx)(或其他NGS)平台生成并存储读长至文本文件(如sample.fastq)中. TopHat可以作为RNA-seq数据的剪切接头回贴工具, 它可以把RNA-seq读长对比至哺乳动物数量级的基因组中, 参考基因组必须保存至本地以便于TopHat访问, 然后分析回贴结果, 找到外显子之间的剪切接头. TopHat读取sample.fastq得到比对读长列表, 储存在.bam文件中. Cufflinks包含有三个程序: 转录本装配(Cufflinks)/转录本比较(Cuffcompare)/检测调控和表达差异(Cuffdiff). Cufflinks进行转录本的拼接, 生成格式为transcripts.gtf的转录文件, 以便之后所用. 对于不同的样本(野生型/癌症细胞, 重复实验)还可以筛选转录组文件, 然后进行相互比较, 按照唯一的参考转录组进行拼接 拼接好后的文件为transcripts.gtf,可以使用Cufflink工具包中的Cuffcompare程序与其他转录组进行比较 os模块: 15.1. os — 操作系统接口模块 — Python 2.7.18 文档 包装器(wrapper): 可以运行其他程序的程序 程序间传递数据: raw_input()直接手动输入数据 使用Python变量 将数据存储在另一个文件里 使用命令行参数, 比如sys.argv列表变量, 参见28.1. sys — 系统相关的参数和函数 — Python 2.7.18 文档 关闭文件的延时问题: 通过增加一个中间步骤(比如打开一个文件然后写入一些字符保存, 来确保这个中间步骤的上下两个步骤互不冲突 os.path 操控文件目录: 10.1. os.path — 常见路径操作 — Python 2.7.18 文档 MSA(multiple sequence alignment, 多序列比对): Pairwise Sequence Alignment is used to identify regions of similarity that may indicate functional, structural and/or evolutionary relationships between two biological sequences (protein or nucleic acid). By contrast, Multiple Sequence Alignment (MSA) is the alignment of three or more biological sequences of similar length. From the output of MSA applications, homology can be inferred and the evolutionary relationship between the sequences studied. MSA工具: Multiple Sequence Alignment - CLUSTALW (genome.jp) T-COFFEE算法: T-Coffee Home Page (tcoffee.org) T-Coffee is a multiple sequence alignment package. You can use T-Coffee to align sequences or to combine the output of your favorite alignment methods (Clustal, Mafft, Probcons, Muscle…) into one unique alignment (M-Coffee). 第15章 编写良好的程序 15.2 问题描述： 不确定性 《编程的准则》(Dogma of Programming): 著: Donald Knuth 软件工程周期: 搜集需求, 形成以用户为视角的用户故事 构建简单有效的模块 构成整个程序, 按照新需求修改 PEP8代码规范: PEP 8: The Style Guide for Python Code (pep8.org) PEP 8 – Style Guide for Python Code | Python.org pylint: Pylint - code analysis for Python | www.pylint.org 【python】pylint在项目中的使用 - 简书 (jianshu.com) 代码管理工具: Git: Git手册 python代码自动打包工具 python打包工具distutils、setuptools分析 - 金色旭光 - 博客园 (cnblogs.com) distutils: 27.1. distutils — 构建和安装 Python 模块 — Python 2.7.18 文档 setuptools:Documentation — setuptools 50.3.1 documentation python代码生成可执行文件 py2exe: FrontPage - py2exe.org pyinstaller: PyInstaller bundles Python applications 敏捷开发: 敏捷软件开发宣言 (agilemanifesto.org) 敏捷软件开发宣言 我们一直在实践中探寻更好的软件开发方法， 身体力行的同时也帮助他人。由此我们建立了如下价值观： 个体和互动 高于 流程和工具 工作的软件 高于 详尽的文档 客户合作 高于 合同谈判 响应变化 高于 遵循计划 也就是说，尽管右项有其价值， 我们更重视左项的价值。 Kent Beck Mike Beedle Arie van Bennekum Alistair Cockburn Ward Cunningham Martin Fowler James Grenning Jim Highsmith Andrew Hunt Ron Jeffries Jon Kern Brian Marick Robert C. Martin Steve Mellor Ken Schwaber Jeff Sutherland Dave Thomas 著作权为上述作者所有，2001年 适于科研界的工业化实例: Helix ALM | ALM Tools | Perforce 对生物信息学研究的各种软件工程技术(如自动化测试/代码评审/用户故事)都有描述的工具箱: A toolbox for developing bioinformatics software | Request PDF (researchgate.net) 第四部分 数据可视化 第16章 创建科学图表 16.2 案例： 核糖体的核苷酸频率 2009年的诺贝尔化学奖授予了Venkatraman RamaKrishnan, Thomas Steitz 和 Ada Yonath, 以表彰他们对核糖体结构和功能的研究. 核糖体是已知的最大的反子机器之一, 由三种RNA组分(原核生物中是23S, 16S 和 5S rRNA) 和许多的蛋白质组成. RNA的构成包括四种基本的核糖核苷酸和一些起微调核糖体功能作用的修是核糖体 matplotlib: 官方教程: Matplotlib: Python plotting — Matplotlib 3.3.2 documentation 官方模板: Gallery — Matplotlib 3.3.2 documentation 12345678910111213141516171819202122232425262728293031323334353637383940from pylab import figure, plot, savefigxdata = [1, 2, 3, 4]ydata = [1.25, 2.5, 5.0, 10.0]figure()plot(xdata, ydata)savefig('figure1.png')# -----figure()xdata = [0.1 * i for i in range(100)]ydata = [math.sin(j) for j in xdata]plot(xdata, ydata, 'kd', linewidth = 1)text(4.8, 0, \"$y = sin(x)$\", horizontalalignment = 'center', fontsize = 20)axis([0, 3 * math.pi, -1.2, 1.2])savefig('sinfunc.png')# ---from pylab import figure, title, xlabel, ylabel, hist, axis, grid, savefigdata = [1, 1, 9, 1, 3, 5, 8, 2, 1, 5, 11, 8, 3, 4, 2, 5]n_bins = 5figure()num, bins, patches = hist(data, n_bins, normed = 1.0, histtype = 'bar', facecolor = 'green', alpha = 0.75)title('Histogram')xlabel('value')ylabel('frequency')axis()grid(True)savefig('histogram.png') 第17章 使用PyMOL创建分子图像 17.2 示例： 锌指 锌指: 锌指(英语: Zinc finger),又称锌手指, 是一种小的蛋白质结构模体, 其特征在于配合一个或多个锌离子(Zn2+)以稳定折叠. 最初用来描述非洲爪蟾卵母细胞转录因子IIIA假说结构的手指状外观 一个锌指包含由两个螺旋, 它们通过一个锌原子形成特殊的构象, 导致一个螺旋与DNA的大沟匹配 锌指名称现在已经包含了各种不同的蛋白质结构 @科学网—什么是锌指蛋白？ - 倪帅的博文 (sciencenet.cn) @锌指 - 维基百科，自由的百科全书 (wikipedia.org) PyMol: PyMOL | pymol.org PyMOL is a user-sponsored molecular visualization system on an open-source foundation, maintained and distributed by Schrödinger. 免费开源版PyMOL安装 - 知乎 (zhihu.com) schrodinger/pymol-open-source: Open-source foundation of the user-sponsored PyMOL molecular visualization system. (github.com) 第18章 处理图像 18.2 案例： 画一个质粒 1977年 Francisco Bolivar 和 Raymond Rodriguez 构建了最早的人工质粒. 它包含了4361个DNA碱基对, 一个复制起点, 一个氨苄青霉素抗性基因和一个四环素抗性基因. 该质粒由许多限制性位点, 从而成为构建遗传载体的基础. PIL(Python Imaging Library)图形库: The Python Imaging Library (PIL) adds image processing capabilities to your Python interpreter. This library supports many file formats, and provides powerful image processing and graphics capabilities. PIL 仅支持Python2 Python Imaging Library (PIL) (pythonware.com) PIL - 廖雪峰的官方网站 (liaoxuefeng.com) Pillow — Pillow (PIL Fork) 8.0.0 documentation Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors. Pillow 支持Python3 python-pillow/Pillow: The friendly PIL fork (Python Imaging Library) (github.com) 蛋白质结构域架构: InterPro数据库: InterPro (ebi.ac.uk) InterPro provides functional analysis of proteins by classifying them into families and predicting domains and important sites. To classify proteins in this way, InterPro uses predictive models, known as signatures, provided by several different databases (referred to as member databases) that make up the InterPro consortium. We combine protein signatures from these member databases into a single searchable resource, capitalising on their individual strengths to produce a powerful integrated database and diagnostic tool. 第五部分 Biopython Biopython 是一个计算分子生物学模块的集合, 用它可以实现许多生物信息学项目中的基本任务 Biopython is a set of freely available tools for biological computation written in Python by an international team of developers. 解析生物数据格式 从资源库下载资源 运行常用的生物信息学算法 运行Biopython实现的算法, 进行聚类, 机器学习, 数据分析和可视化 各种文档索引: Documentation · Biopython 上手指南: Biopython Tutorial and Cookbook 第19章 使用序列数据 19.2 案例： 如何将一条DNA编码序列翻译成对应的蛋白质序列并把它写入FASTA文件 Chapter 3 Sequence objects (biopython.org) 12345678910111213141516171819202122232425262728293031323334353637383940&gt;&gt;&gt; from Bio.Seq import Seq&gt;&gt;&gt; my_seq = Seq(\"AGTACACTGGT\")&gt;&gt;&gt; my_seqSeq('AGTACACTGGT')&gt;&gt;&gt; print(my_seq)AGTACACTGGT&gt;&gt;&gt; my_seqSeq('AGTACACTGGT')&gt;&gt;&gt; my_seq.complement()Seq('TCATGTGACCA')&gt;&gt;&gt; my_seq.reverse_complement()Seq('ACCAGTGTACT')&gt;&gt;&gt; from Bio import SeqIO&gt;&gt;&gt; for seq_record in SeqIO.parse(\"ls_orchid.fasta\", \"fasta\"):... print(seq_record.id)... print(repr(seq_record.seq))... print(len(seq_record))gi|2765658|emb|Z78533.1|CIZ78533Seq('CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGATGAGACCGTGG...CGC')740...gi|2765564|emb|Z78439.1|PBZ78439Seq('CATTGTTGAGATCACATAATAATTGATCGAGTTAATCTGGAGGATCTGTTTACT...GCC')592&gt;&gt;&gt; from Bio.Seq import Seq&gt;&gt;&gt; my_seq = Seq(\"GATCG\")&gt;&gt;&gt; for index, letter in enumerate(my_seq):... print(\"%i %s\" % (index, letter))0 G1 A2 T3 C4 G&gt;&gt;&gt; print(len(my_seq))5... IUPAC字符集: 预编译好的字符集, 覆盖了所有生物序列. 包括 IUPACUnamiguousDNA(基本的ATCG字母), IUPACAmbiguousDNA(包含二义字母), ExtendedIUPACDNA(包含修饰的碱基), IUPACUnamiguousRNA, IUPACAmbiguousRNA, ExtendedIUPACRNA, IUPACProtein(IPUAC标准氨基酸)和ExtendedIUPACProtein(包括硒代半胱氨酸, X等) 迭代器: 一个迭代器是产生一系列的项(如SeqRecord对象)的一种数据结构. 它可以像列表一样使用在循环中, 但技术上它不是一个列表. 一个迭代器没有长度, 也不能被索引或者是切片. 用户只能向它申请下一个元素, 当你这样做时, 迭代器寻找是否存在更多的可用的记录. 这种方式下, 迭代器无需把所有的记录一致放在内存中. NCBI核酸翻译编码标准: The Genetic Codes 第20章 从网络资源中检索数据 20.2 案例： 在PubMed中用关键词搜索文献， 下载并解析对应的记录 Chapter 9 Accessing NCBI’s Entrez databases (biopython.org) 第21章 使用三维结构数据 21.2 案例： 从PDB文件中提取原子名及其三维坐标 Chapter 11 Going 3D: The PDB module (biopython.org) 第六部分 编程秘笈 编程秘笈01: PyCogent库 PyCogent: pycogent/pycogent: PyCogent: Official repository for software and unit tests (github.com) PyCogent includes connectors to remote databases, built-in generalized probabilistic techniques for working with biological sequences, and controllers for 3rd party applications. 项目疑似不再维护 参考文献: PyCogent: a toolkit for making sense from sequence | Genome Biology | Full Text (biomedcentral.com) 编程秘笈02: 反向互补和随机化序列 9.6. random — 生成伪随机数 — Python 2.7.18 文档 为什么要随机化序列: 每个序列模式可能在序列中随机出现, 在蛋白质和核酸中寻找匹配的功能模体不能保证该匹配一定有生物意义. 为了评估一个模体存在的生物学显著性, 需要检查的序列一啊不能要和随机集合进行比较. 在给定的序列集合中相对于随机序列集合有更显著表达的序列模体, 更倾向于编码一个有功能的性质(更有生物学意义). 一个好的随机序列是缺乏生物学意义的, 但是却与生物对象有相同的氨基酸/核苷酸组分, 可以通过对原序列反向,洗牌,随机化等方式创建. 1234567891011121314151617181920212223242526272829seq = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'seq_list = list(seq) seq_list.reverse()rev_seq = ''.join(seq_list)print(rev_seq) # 列表化后反转再拼接回字符串rev_seq = ''for s in reversed(seq): rev_seq = rev_seq + sprint(rev_seq) # 使用reversed()迭代器循环反向拼接字符串rev_seq = seq[::-1] # 字符串切片[start:end:step], 设步长为-1, 得反向import random# 返回由seq内元素组成的长为len(seq)的列表ran_seq = random.sample(seq, len(seq)) # 转字符串ran_seq = ''.join(random.sample(seq, len(seq)))# 控制长度ran_seq = ''.join(random.sample(seq, len(seq)-10))# 使用random.choice方法在seq中每次随机返回一个元素, for循环控制次数ran_seq = ''.join([random.choice(seq) for x in range(len(seq))])data = list(seq)random.shuffle(data) # 序列洗牌shuffled_seq = datashuffled_seq = ''.join(data) 编程秘笈03: 用概率创建随机序列 123456789101112131415161718192021import randomnucleotides = list('ACGT')dna = ''while len(dna) &lt; 100: dna += random.choice(nucleotides) # 随机生成100个碱基组成的DNA序列nucleotides = list('ACGT')probs = &#123;'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3&#125; # 总概率为1assert sum(probs.values()) == 1.0 # 上述assert语句等价于下面的两行if sum(probs.values()) != 1.0: raise Exception('Sum of probabilites is not 1.0!')dna = ''while len(dna) &lt; 100: nuc = random.choice(nucleotides) dice = random.random() if dice &lt; probs[nuc]: dna += nucprint dna assert 语句: assert (python.org) assert 语句是在程序中插入调试性断言的简便方式: 1assert_stmt ::&#x3D; &quot;assert&quot; expression [&quot;,&quot; expression] 简单形式 assert expression 等价于 12if __debug__: if not expression: raise AssertionError 编程秘笈04: 用Biopython解析多序列联配 多序列联配(MSA): Pfam数据库: Pfam: Home page 常用格式为.sth (Stockholm 格式) biostar handbook(六)| 序列联配 - 简书 (jianshu.com) 例子: Pfam: Family: Globin (PF00042) (xfam.org) 通过Biopython的Bio.AlignIO模块解析多联配: Chapter 6 Multiple Sequence Alignment objects (biopython.org) 编程秘笈05: 从多序列联配中计算共有序列 共有序列(Consensus Sequence): 多联配中每列中频率最高的残基(最保守的) 123456789101112131415161718192021seqs = [ 'ATCCAGCT', 'GGGCAACT', 'ATGGATCT', 'AAGCAACC', 'ATGCCATT', 'ATGGCACT']n = len(seqs[0])profile = &#123;'A':[0]*n, 'C':[0]*n, 'G':[0]*n, 'T':[0]*n&#125;for seq in seqs: for i, char in enumerate(seq): profile[char][i] += 1consensus = ''for i in range(n): col = [(profile[nt][i], nt) for nt in 'ATCG'] consensus += max(col)[1] print consensus 编程秘笈06: 计算系统发生树的节点间的距离 Chapter 13 Phylogenetics with Bio.Phylo Newick格式是表示系统发生树的一种统一格式. 它可以被大多数的程序读取, 包括MrBayes, GARLI, PHYLIP, TREE-PUZZLE等. Newick树包括物种和祖先节点的名字, 它们的相互关系, 以及每个节点赋予的值(通常用于父节点的距离) 编程秘笈07: 核苷酸序列的密码子频率 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869# This program calculates the codon frequency in a RNA sequence# (it could also be an entire genome)aa_codon = &#123;'A':['GCU','GCC','GCA','GCG'], 'C':['UGU','UGC'],'D':['GAU','GAC'],'E':['GAA','GAG'],'F':['UUU','UUC'],'G':['GGU','GGC','GGA','GGG'], 'H':['CAU','CAC'],'K':['AAA','AAG'],'I':['AUU','AUC','AUA','AUU','AUC','AUA'],'L':['UUA','UUG','CUU','CUC','CUA','CUG'],'M':['AUG'],'N':['AAU','AAC'],'P':['CCU','CCC','CCA','CCG'],'Q':['CAA','CAG'],'R':['CGU','CGC','CGA','CGG','AGA','AGG'],'S':['UCU','UCC','UCA','UCG','AGU','AGC',],'Y':['UAU','UAC'],'T':['ACU','ACC','ACA','ACG'],'V':['GUU','GUC','GUA','GUG'],'W':['UGG'],'STOP':['UAG','UGA','UAA']&#125;codon_count = &#123;'GCU':0,'GCC':0,'GCA':0,'GCG':0,'CGU':0,'CGC':0,'CGA':0,'CGG':0,'AGA':0,'AGG':0,'UCU':0,'UCC':0,'UCA':0,'UCG':0,'AGU':0,'AGC':0,'AUU':0,'AUC':0,'AUA':0,'AUU':0,'AUC':0,'AUA':0,'UUA':0,'UUG':0,'CUU':0,'CUC':0,'CUA':0,'CUG':0,'GGU':0,'GGC':0,'GGA':0,'GGG':0,'GUU':0,'GUC':0,'GUA':0,'GUG':0,'ACU':0,'ACC':0,'ACA':0,'ACG':0,'CCU':0,'CCC':0,'CCA':0,'CCG':0,'AAU':0,'AAC':0,'GAU':0,'GAC':0,'UGU':0,'UGC':0,'CAA':0,'CAG':0,'GAA':0,'GAG':0,'CAU':0,'CAC':0,'AAA':0,'AAG':0,'UUU':0,'UUC':0,'UAU':0,'UAC':0,'AUG':0,'UGG':0,'UAG':0,'UGA':0,'UAA':0&#125;# Writes the frequency of each codon to a filedef calc_freq(codon_count, out_file): count_tot = &#123;&#125; for aa in aa_codon.keys(): n = 0 for codon in aa_codon[aa]: n = n + codon_count[codon] count_tot[aa] = float(n) for aa in aa_codon.keys(): for codon in aa_codon[aa]: if count_tot[aa] != 0.0: freq = codon_count[codon] / count_tot[aa] else: freq = 0.0 out_file.write('%4s\\t%5s\\t%4d\\t%9.3f\\n'% \\ (aa,codon,codon_count[codon], freq))in_file = open('A06662.1.fasta')out_file = open('CodonFrequency.txt', 'w')# Reads the RNA sequence into a single stringrna = ''for line in in_file: if not line[0] == '&gt;': rna = rna + line.strip() # Scans the sequence frame by frame,# counts the number of occurrences# of each codon, and stores it in codon_count dictionary.# Then calls calc_freq()for j in range(3): out_file.write('!!Codon frequency in frame %d\\n' %(j+1)) out_file.write(' AA\\tcodon\\thits\\tfrequency\\n') prot = '' for i in range(j, len(rna), 3): codon = rna[i:i + 3] if codon in codon_count: codon_count[codon] = codon_count[codon] + 1 calc_freq(codon_count, out_file) out_file.close() 编程秘笈08: 解析Vienna格式的RNA二级结构 RNA序列最重要的性质之一是其折叠和配对的能力. 与DNA不同, RNA的碱基配对不限于双螺旋, 而是能够形成复杂的结构. 预测这些RNA的碱基配对和二级结构是RNA生物信息学的常见任务. Vienna包: ViennaRNA Web Services (univie.ac.at) 一个命令行和网络的工具集, 可以进行如从RNA序列预测碱基配对等基础任务 这些结果通常被保存为Vienna格式 123&gt; two hairpin loopsAAACCCCGUUUCGGGGAACCACCA((((...)))).((((..)).)). 第一行包含了RNA序列名称, 第二行是序列本身 第三行的点-括号结构表达RNA二级结构 对应的括号指示一个碱基对, 而不配对的碱基对用点表示 1234567891011121314151617181920212223242526class RNAStructure: def __init__(self, vienna): lines = vienna.split('\\n') self.name = lines[0].strip() self.sequence = lines[1].strip() self.basepairs = \\ sorted(self.parse_basepairs(lines[2].strip())) def parse_basepairs(self, dotbracket): stack = [] for i, char in enumerate(dotbracket): if char == '(': stack.append(i) elif char == ')': j = stack.pop() yield j, i vienna = '''&gt; two hairpin loopsAAACCCCGUUUCGGGGAACCACCA((((...)))).((((..)).)).'''rna = RNAStructure(vienna)print rna.nameprint rna.sequencefor base1, base2 in rna.basepairs: print '(%i, %i)'%(base1, base2) 编程秘笈09: 解析BLAST的XML输出 Biopython BLAST XML解析器读取XML BLAST输出文件 7.3 Parsing BLAST output (biopython.org) NCBIXML.parse()函数返回一个blast_out实例, 它包含一到多个记录对象(BLAST结果在一个记录里, 而如PSI-BLAST则是对每个查询有一个纪录). 每个查询都包含一到多个匹配(hit)或联配(alignment), 依次包含一到多个局部联配(HSP). 1234567891011121314151617&gt;&gt;&gt; blastp -query P05480.fasta -db nr.00 -out blast_output.xml-outfmt 5xml_file = open(\"blast_output.xml\")blast_out = NCBIXML.parse(xml_file)for record in blast_out: for alignment in record.alignments: print alignment.title for hsp in alignment.hsps: # filter by e-value if hsp.expect &lt; 0.0001: print \"score:\", hsp.score print \"query:\", hsp.query print \"match:\", hsp.match print \"sbjct:\", hsp.sbjct print '#' * 70 print 编程秘笈10: 解析SBML文件 Systems Biology Markup Language (SBML), a free and open interchange format for computer models of biological processes. SBML is useful for models of metabolism, cell signaling, and more. It continues to be evolved and expanded by an international community. Main Page - SBML.caltech.edu SBML格式用来储存通路,反应和调控网络信息的标准格式 XML 教程 | 菜鸟教程 (runoob.com) 19.5. XML处理模块 — Python 2.7.18 文档 12345678910111213141516&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;sbml xmlns=\"http://www.sbml.org/sbml/level2\"&gt; &lt;model name=\"SBML file with three metabolites\"&gt; &lt;listOfSpecies&gt; &lt;species id=\"M_m78\" name=\"Inosine\"&gt; &lt;p&gt;FORMULA: C10H12N4O5&lt;/p&gt; &lt;/species&gt; &lt;species id=\"M_m79\" name=\"Xanthosine\"&gt; &lt;p&gt;FORMULA: C10H12N4O6&lt;/p&gt; &lt;/species&gt; &lt;species id=\"M_m80\" name=\"Xanthosine\"&gt; &lt;p&gt;FORMULA: C10H12N4O6&lt;/p&gt; &lt;/species&gt; &lt;/listOfSpecies&gt; &lt;/model&gt;&lt;/sbml&gt; 12345678910111213141516from xml.dom.minidom import parsedocument = parse('sbml_example.xml')species_list = document.getElementsByTagName(\"species\")for species in species_list: species_id = species.getAttribute('id') name = species.getAttribute('name') p_list = species.getElementsByTagName(\"p\") p = p_list[0] text = p.childNodes[0] formula = text.nodeValue print \"%-20s\\t%5s\\t%s\"%(name, species_id, formula) # Inosine M_m78 FORMULA: C10H12N4O5# Xanthosine M_m79 FORMULA: C10H12N4O6# Xanthosine M_m80 FORMULA: C10H12N4O6 编程秘笈11: 运行BLAST The NCBI provides a suite of command-line tools to run BLAST called BLAST+. This allows users to perform BLAST searches on their own server without size, volume and database restrictions. BLAST+ can be used with a command line so it can be integrated directly into your workflow. Download BLAST Software and Databases Documentation (nih.gov) 7.2 Running BLAST locally (Biopython) 编程秘笈12: 访问、 下载和读取网页 20.5. urllib — Open arbitrary resources by URL — Python 2.7.18 文档 1234from urllib import urlopenurl = urlopen('http://www.uniprot.org/uniprot/P01308.fasta')doc = url.read()print doc 20.6. urllib2 — extensible library for opening URLs — Python 2.7.18 文档 编程秘笈13: 解析HTML文件 19.1. HTMLParser — Simple HTML and XHTML parser — Python 2.7.18 文档 1234567891011121314151617181920212223from HTMLParser import HTMLParserimport urllibclass MyHTMLParser(HTMLParser): def handle_starttag(self, tag, attrs): self.start_tag = tag print \"Start tag:\", self.start_tag def handle_endtag(self, tag): self.end_tag = tag print \"End tag :\", self.end_tag def handle_data(self, data): self.data = data.strip() if self.data: print \"Data :\", self.data parser = MyHTMLParser()url = 'http://www.ncbi.nlm.nih.gov/pubmed/21998472'page = urllib.urlopen(url)data = page.read()parser.feed(data) 编程秘笈14: 将PDB文件分割成PDB链文件 1234567891011121314151617181920212223from struct import unpackimport os.pathfilename = '2H8L.pdb'in_file = open(filename)pdb_id = filename.split('.')[0]pdb_format = '6s5s1s4s1s3s1s1s4s1s3s8s8s8s6s6s6s4s2s3s'chain_old = '@'for line in in_file: if line[0:4] == \"ATOM\": col = unpack(pdb_format, line) chain = col[7].strip() if chain != chain_old: if os.path.exists(pdb_id+chain_old+'.pdb'): chain_file.close() print \"closed:\", pdb_id+chain_old+'.pdb' chain_file = open(pdb_id+chain+'.pdb','w') chain_file.write(line) chain_old = chain else: chain_file.write(line)chain_file.close()print \"closed:\", pdb_id+chain_old+'.pdb' 也可以使用终端的&gt;将结果导出到文件 编程秘笈15: 在PDB结构上找到两个最靠近的Cα原子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566from math import sqrtfrom struct import unpackdef calc_dist(p1, p2): '''returns the distance between two 3D points''' tmp = pow(p1[0] - p2[0], 2) + \\ pow(p1[1] - p2[1], 2) + \\ pow(p1[2] - p2[2], 2) tmp = sqrt(tmp) return tmpdef min_dist(arglist): ''' returns the closest residue pair and their CA_CA distance ''' # initialize variables maxval = 10000 residue_pair = () # read arglist starting from the 1st position for i in range(len(arglist)): # save x,y,z coordinates from the arglist # i-element into the atom1 variable atom1 = arglist[i][1:] # run over all other elements for j in range(i + 1, len(arglist)): atom2 = arglist[j][1:] # calculate the distance tmp = calc_dist(atom1, atom2) # check if the distance is lower than # the previously recorded lowest value if tmp &lt; maxval : # save the new data residue_pair = (arglist[i][0], \\ arglist[j][0]) maxval = tmp return residue_pair, maxvaldef get_list_ca_atoms(pdb_file, chain): ''' returns a list of CA atoms, the residues they belong to, and their x,y,z coordinates from the input PDB file ''' in_file = open(pdb_file) CA_list = [] pdb_format = '6s5s1s4s1s3s1s1s4s1s3s8s8s8s6s6s6s4s2s3s' for line in in_file: tmp = unpack(pdb_format, line) tmp = [i.strip() for i in tmp] # only save CA coords belonging to input chain if tmp[0] ==\"ATOM\" and tmp[7] == chain and \\ tmp[3] == \"CA\": # create a tuple (aa_number, x, y, x) tmp = (tmp[5]+tmp[8], float(tmp[11]), \\ float(tmp[12]), float(tmp[13])) # add the tuple to the list CA_list.append(tmp) in_file.close() return CA_list# obtain the list of CA atoms of Chain ACA_list = get_list_ca_atoms(\"2H8L.pdb\", \"A\")# identify the closest atomsres_pair, dist = min_dist(CA_list)print 'The distance between', res_pair, 'is:', dist 编程秘笈16: 提取两个PDB链间的界面 在一个三维结构中, 两条多肽链之间的界面被定义为满足这两个条件的所有残基对:1.两个残基分别属于不同的链;2.它们之间的距离小于某个阈值 11.2 Structure representation (biopython.org) 123456789101112from Bio import PDBparser = PDB.PDBParser()s = parser.get_structure(\"2H8L\",\"2H8L.pdb\")first_model = s[0]chain_A = first_model[\"A\"]chain_B = first_model[\"B\"]for res1 in chain_A: for res2 in chain_B: d = res1[\"CA\"]-res2[\"CA\"] if d &lt;= 6.0: print res1.resname,res1.get_id()[1], res2.resname,\\ res2.get_id()[1], d 编程秘笈17: 用Modeller建立同源模型 Modeller 是一个为建立蛋白质三维结构的同源模型设计的软件包 About MODELLER (salilab.org) MODELLER is used for homology or comparative modeling of protein three-dimensional structures (1,2). The user provides an alignment of a sequence to be modeled with known related structures and MODELLER automatically calculates a model containing all non-hydrogen atoms. MODELLER implements comparative protein structure modeling by satisfaction of spatial restraints (3,4), and can perform many additional tasks, including de novo modeling of loops in protein structures, optimization of various models of protein structure with respect to a flexibly defined objective function, multiple alignment of protein sequences and/or structures, clustering, searching of sequence databases, comparison of protein structures, etc. 123456789101112from modeller import *from modeller.automodel import *log.verbose()env = environ()env.io.atom_files_directory = ['.', '../atom_files']a = automodel(env, alnfile = 'alignment.ali', knowns = '1eq9A', sequence = 'MyTarget_Seq')a.starting_model = 1a.ending_model = 1a.make() 编程秘笈18: 用ModeRNA分析RNA三维同源模型 ModeRNA 库: moderna · PyPI 服务维护停止 分析/操纵/建模RNA三维结构 1234567891011121314151617181920212223from moderna import *ehz = load_model('1ehz.ent', 'A')clean_structure(ehz)print get_sequence(ehz)print get_secstruc(ehz)m = create_model()copy_some_residues(ehz['1':'15'], m)write_model(m, '1ehz_15r.ent')temp = load_template('1ehz_15r.ent')ali = load_alignment('''&gt; model sequenceACUGUGAYUA[UACCU#PG&gt; template: first 15 bases from 1ehzGCGGA--UUUALCUCAG''')model = create_model(temp, ali)print get_sequence(model)GCGGAUUUALCUCAGDDGGGAGAGCRCCAGABU#AAYAP?UGGAG7UC?UGUGTPCG\"UCC ACAGAAUUCGCACCA(((((((..((((........)))).((((.........))))..... (((((.......))))))))))))....ACUGUGAYUA[UACCU#PG 编程秘笈19: 从三级结构计算RNA碱基配对 RNAView: 计算一个RNA分子PDB结构中的碱基配对 NDB | Tools | Downloads (rutgers.edu) RNA Viewer, a tool for viewing RNA 2-dimensional structure, base pairs and RNA patterns. 2D structure is fully annotated according to Leontis and Westhof (2001) RNA 7:499-512. Yang, H., Jossinet, F., Leontis, N., Chen, L., Westbrook, J., Berman, H.M. and Westhof, E. (2003) Tools for the automatic identification and classification of RNA base pairs. Nucleic Acids Res, 31, 3450-3460. PyCogent库 123456789101112131415161718192021222324&gt;&gt;&gt; rnaview lehz.pdb &gt; basepair.out1_72, A: 1 G-C 72 A: +/+ cis XIX2_71, A: 2 C-G 71 A: +/+ cis XIX3_70, A: 3 G-C 70 A: +/+ cis XIX4_69, A: 4 G-C 69 A: +/+ cis XIX5_68, A: 5 G-C 68 A: +/+ cis XIX6_67, A: 6 A-U 67 A: W/W cis n/a7_66, A: 7 A-U 66 A: -/- cis XXfrom cogent.app.rnaview import RnaViewfrom cogent.parse.rnaview import RnaviewParserrna_prog = RnaView()result = rna_prog('1ehz.pdb')bpairs = result['base_pairs']errors = result['StdErr'].read()stdout = result['StdOut'].read()bp_dict = RnaviewParser(bpairs)print 'INFORMATION:'sys.stderr.write(errors)print stdoutprint 'BASE PAIRS:'for key in bp_dict: print key, bp_dict[key] 编程秘笈20: 结构重叠的真实实例: 丝氨酸蛋白酶催化三分子 结构重叠: 在重叠的过程中, 两个结构之一的(靶标)被放置在一个固定的位置上,另一个(探针)被平移和旋转, 直到连个结构的均方差达到最小. 一个重叠必须要求两个集合的原子数相同才能工作, 所以在重叠两个结构之前, 需要决定每个结构上哪些原子需要重叠, 这甚至可以识整个结构的所有原子. 11.8 Accessing the Protein Data Bank (biopython.org) 11.6.6 Superimposing two structures (biopython.org) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# Superimpose the catalytic triads of two different serine# proteases(on CA and N atoms of res H57, D102, and S195 of chain A)from Bio import PDB# Retrieve PDB files 网络获取三个结构文件pdbl = PDB.PDBList()pdbl.retrieve_pdb_file(\"1EQ9\")pdbl.retrieve_pdb_file(\"1FXY\")# Parse the two structures 到对应目录读取文件结构信息from Bio.PDB import PDBParser, Superimposer, PDBIOparser = PDB.PDBParser()struct_1 = parser.get_structure(\"1EQ9\", \"eq/pdb1eq9.ent\")struct_2 = parser.get_structure(\"1FXY\", \"fx/pdb1fxy.ent\")# get the catalytic triads 提取三个催化位点氨基酸信息res_57_struct_1 = struct_1[0]['A'][57]res_102_struct_1 = struct_1[0]['A'][102]res_195_struct_1 = struct_1[0]['A'][195]res_57_struct_2 = struct_2[0]['A'][57]res_102_struct_2 = struct_2[0]['A'][102]res_195_struct_2 = struct_2[0]['A'][195]# Build 2 lists of atoms for calculating a rot.-trans. matrix# (target and probe). 每个位点氨基酸的α碳以及氮原子放入目标和探针列表target = []backbone_names = ['CA', 'N']for name in backbone_names: target.append(res_57_struct_1[name]) target.append(res_102_struct_1[name]) target.append(res_195_struct_1[name]) probe = []for name in backbone_names: probe.append(res_57_struct_2[name]) probe.append(res_102_struct_2[name]) probe.append(res_195_struct_2[name]) # Check whether target and probe lists are equal in size.# This is needed for calculating a rot.-trans. matrixassert len(target) == len(probe) # 确定原子数量相等# Calculate the rotation-translation matrix.sup = Superimposer() # 旋转平移矩阵计算sup.set_atoms(target, probe)# Apply the matrix. Remember that it can be applied only on# lists of atoms. 应用矩阵, 注意只能按照列表提交struct_2_atoms = [at for at in struct_2.get_atoms()]sup.apply(struct_2_atoms)# Write the rotation-translated structure 保存旋转平移结构out = PDBIO()out.set_structure(struct_2)out.save('1FXY-superimposed.pdb') 附录 附录A 命令概览 Linux命令见: Linux命令搜索引擎 命令，Linux Linux命令搜索引擎 命令详解：最专业的Linux命令大全，内容包含Linux命令手册、详解、学习，值得收藏的Linux命令速查手册。 - Linux 命令搜索引擎 Python命令见: Python3 教程 | 菜鸟教程 (runoob.com) 附录B Python资源 Python官网: Welcome to Python.org Python官方文档集合: 3.9.0 Documentation (python.org) Python标准库: The Python Standard Library Biopython教程: Biopython Tutorial and Cookbook 附录C 记录样板 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124# C.1 A SINGLE PROTEIN SEQUENCE FILE IN FASTA FORMAT&gt;sp |P03372|ESR1_HUMAN Estrogen receptor OS = Homo sapiens GN =ESR1 PE = 1 SV = 2MTM TLHTKASGMALLHQIQGNELEPLNRPQLKIPLERPLGEVYLDSSKPAVYNYPEGAAYEFN AAAAANAQVYGQTGLPYGPGSEAAAFGSNGLGGFPPLNSVSPSPLMLLHPPPQLSPFLQP HGQQVPYYLENEPSGYTVREAGPPAFYRPNSDNRRQGGRERLASTNDKGSMAMESAKETR YCAVCNDYASGYHYGVWSCEGCKAFFKRSIQGHNDYMCPATNQCTIDKNRRKSCQACRLR KCYEVGMMKGGIRKDRRGGRMLKHKRQRDDGEGRGEVGSAGDMRAANLWPSPLMIKRSKK NSLALSLTADQMVSALLDAEPPILYSEYDPTRPFSEASMMGLLTNLADRELVHMINWAKR VPGFVDLTLHDQVHLLECAWLEILMIGLVWRSMEHPGKLLFAPNLLLDRNQGKCVEGMVE IFDMLLATSSRFRMMNLQGEEFVCLKSIILLNSGVYTFLSSTLKSLEEKDHIHRVLDKIT DTLIHLMAKAGLTLQQQHQRLAQLLLILSHIRHMSNKGMEHLYSMKCKNVVPLYDLLLEM LDAHRLHAPTSRGGASVEETDQSHLATAGSTSSHSLQKYYITGEAEGFPATV# C.2 A SINGLE NUCLEOTIDE SEQUENCE FILE IN FASTAFORMAT&gt;ENSG00000188536|hemoglobin alpha 2ATGGTGCTGTCTCCTGCCGACAAGACCAACGTCAAGGCCGCCTGGGGTAAGGTCGGCGCGCACGCTGGCGAGTATGGTGCGGAGGCCCTGGAGAGGATGTTCCTGTCCTTCCCCACCACCAAGACCTACTTCCCGCACTTCGACCTGAGCCACGGCTCTGCCCAGGTTAAGGGCCACGGCAAGAAGGTGGCCGACGCGCTGACCAACGCCGTGGCGCACGTGGACGACATGCCCAACGCGCTGTCCGCCCTGAGCGACCTGCACGCGCACAAGCTTCGGGTGGACCCGGTCAACTTCAAGCTCCTAAGCCACTGCCTGCTGGTGACCCTGGCCGCCCACCTCCCCGCCGAGTTCACCCCTGCGGTGCACGCCTCCCTGGACAAGTTCCTGGCTTCTGTGAGCACCGTGCTGACCTCCAAATACCGTTAA# C.3 AN EXAMPLE OF AN RNA SEQUENCEIN FASTA FORMAT&gt;ENSG00000188536|hemoglobin alpha 2ATGGTGCTGTCTCCTGCCGACAAGACCAACGTCAAGGCCGCCTGGGGTAAGGTCGGCGCGCACGCTGGCGAGTATGGTGCGGAGGCCCTGGAGAGGATGTTCCTGTCCTTCCCCACCACCAAGACCTACTTCCCGCACTTCGACCTGAGCCACGGCTCTGCCCAGGTTAAGGGCCACGGCAAGAAGGTGGCCGACGCGCTGACCAACGCCGTGGCGCACGTGGACGACATGCCCAACGCGCTGTCCGCCCTGAGCGACCTGCACGCGCACAAGCTTCGGGTGGACCCGGTCAACTTCAAGCTCCTAAGCCACTGCCTGCTGGTGACCCTGGCCGCCCACCTCCCCGCCGAGTTCACCCCTGCGGTGCACGCCTCCCTGGACAAGTTCCTGGCTTCTGTGAGCACCGTGCTGACCTCCAAATACCGTTAA# C.4 A MULTIPLE SEQUENCE FILE IN FASTA FORMAT&gt;sp |P03372|ESR1_HUMAN Estrogen receptor OS = Homo sapiens GN =ESR1 PE = 1 SV = 2MTM TLHTKASGMALLHQIQGNELEPLNRPQLKIPLERPLGEVYLDSSKPAVYNYPEGAAYEFN AAAAANAQVYGQTGLPYGPGSEAAAFGSNGLGGFPPLNSVSPSPLMLLHPPPQLSPFLQP HGQQVPYYLENEPSGYTVREAGPPAFYRPNSDNRRQGGRERLASTNDKGSMAMESAKETR YCAVCNDYASGYHYGVWSCEGCKAFFKRSIQGHNDYMCPATNQCTIDKNRRKSCQACRLR KCYEVGMMKGGIRKDRRGGRMLKHKRQRDDGEGRGEVGSAGDMRAANLWPSPLMIKRSKK NSLALSLTADQMVSALLDAEPPILYSEYDPTRPFSEASMMGLLTNLADRELVHMINWAKR VPGFVDLTLHDQVHLLECAWLEILMIGLVWRSMEHPGKLLFAPNLLLDRNQGKCVEGMVE IFDMLLATSSRFRMMNLQGEEFVCLKSIILLNSGVYTFLSSTLKSLEEKDHIHRVLDKIT DTLIHLMAKAGLTLQQQHQRLAQLLLILSHIRHMSNKGMEHLYSMKCKNVVPLYDLLLEM LDAHRLHAPTSRGGASVEETDQSHLATAGSTSSHSLQKYYITGEAEGFPATV&gt;sp |P62333|PRS10_HUMAN 26S protease regulatory subunit10B OS = Homo sapiens GN = PSMC6 PE = 1 SV = 1MAD PRDKALQDYRKKLLEHKEIDGRLKELREQLKELTKQYEKSENDLKALQSVGQIVGEVLKQ LTEEKFIVKATNGPRYVVGCRRQLDKSKLKPGTRVALDMTTLTIMRYLPREVDPLVYNMS HEDPGNVSYSEIGGLSEQIRELREVIELPLTNPELFQRVGIIPPKGCLLYGPPGTGKTLL ARAVASQLDCNFLKVVSSSIVDKYIGESARLIREMFNYARDHQPCIIFMDEIDAIGGRRF SEGTSADREIQRTLMELLNQMDGFDTLHRVKMIMATNRPDTLDPALLRPGRLDRKIHIDL PNEQARLDILKIHAGPITKHGEIDYEAIVKLSDGFNGADLRNVCTEAGMFAIRADHDFVV QEDFMKAVRKVADSKKLESKLDYKPV&gt;sp |P62509|ERR3_MOUSE Estrogen-related receptor gamma OS = Musmusculus GN = Esrrg PE = 1 SV = 1MDS VELCLPESFSLHYEEELLCRMSNKDRHIDSSCSSFIKTEPSSPASLTDSVNHHSPGGSSD ASGSYSSTMNGHQNGLDSPPLYPSAPILGGSGPVRKLYDDCSSTIVEDPQTKCEYMLNSM PKRLCLVCGDIASGYHYGVASCEACKAFFKRTIQGNIEYSCPATNECEITKRRRKSCQACR FMKCLKVGMLKEGVRLDRVRGGRQKYKRRIDAENSPYLNPQLVQPAKKPYNKIVSHLLV AEPEKIYAMPDPTVPDSDIKALTTLCDLADRELVVIIGWAKHIPGFSTLSLADQMSLLQS AWMEILILGVVYRSLSFEDELVYADDYIMDEDQSKLAGLLDLNNAILQLVKKYKSMKLEK EEFVTLKAIALANSDSMHIEDVEAVQKLQDVLHEALQDYEAGQHMEDPRRAGKMLMTLPLLRQTSTKAVQHFYNIKLEGKVPMHKLFLEMLEAKV# C.8 AN EXAMPLE OF THE SEQRES LINES OFA PDB FILE (FROM FILE 1TDL)SEQ RES 1 A 223 ILE VAL GLY GLY TYR THR CYS GLY ALA ASN THR VAL PROSEQ RES 2 A 223 TYR GLN VAL SER LEU ASN SER GLY TYR HIS PHE CYS GLYSEQ RES 3 A 223 GLY SER LEU ILE ASN SER GLN TRP VAL VAL SER ALA ALASEQ RES 4 A 223 HIS CYS TYR LYS SER GLY ILE GLN VAL ARG LEU GLY GLUSEQ RES 5 A 223 ASP ASN ILE ASN VAL VAL GLU GLY ASN GLU GLN PHE ILESEQ RES 6 A 223 SER ALA SER LYS SER ILE VAL HIS PRO SER TYR ASN SERSEQ RES 7 A 223 ASN THR LEU ASN ASN ASP ILE MET LEU ILE LYS LEU LYSSEQ RES 8 A 223 SER ALA ALA SER LEU ASN SER ARG VAL ALA SER ILE SERSEQ RES 9 A 223 LEU PRO THR SER CYS ALA SER ALA GLY THR GLN CYS LEUSEQ RES 10 A 223 ILE SER GLY TRP GLY ASN THR LYS SER SER GLY THR SERSEQ RES 11 A 223 TYR PRO ASP VAL LEU LYS CYS LEU LYS ALA PRO ILE LEUSEQ RES 12 A 223 SER ASP SER SER CYS LYS SER ALA TYR PRO GLY GLN ILESEQ RES 13 A 223 THR SER ASN MET PHE CYS ALA GLY TYR LEU GLU GLY GLYSEQ RES 14 A 223 LYS ASP SER CYS GLN GLY ASP SER GLY GLY PRO VAL VALSEQ RES 15 A 223 CYS SER GLY LYS LEU GLN GLY ILE VAL SER TRP GLY SERSEQ RES 16 A 223 GLY CYS ALA GLN LYS ASN LYS PRO GLY VAL TYR THR LYSSEQ RES 17 A 223 VAL CYS ASN TYR VAL SER TRP ILE LYS GLN THR ILE ALASEQRES 18 A 223 SER ASN# C.9 AN EXAMPLE OF THE CUFFCOMPARE OUTPUT FOR THREE SAMPLES (Q1, Q2, AND Q3)# Because of the length of each line, the first field of each new line is in bold,and different lines are highlighted using indentation.Med ullo-Diff_00000001 XLOC_000001 Lypla1|uc007afh.1 q1:NSC.P419.228|uc007afh.1 |100|35.109496|34.188903 |36.030089|397.404732|2433 q2:NSC. P429.18|uc007afh.1|100 |15.885823|15.240240 |16.531407|171.011325 |2433 q3:NSC. P437.15|uc007afh.1|100 |18.338541|17.704857|18.97222 4|181.643949|2433Med ullo-Diff_00000002 XLOC_000002 Tcea1|uc007afi.2 q1:NSC.P419.228|uc007afi.2| 18|1.653393|1.409591|1.897195 |18.587029|2671 - q3:NSC.P437.108|uc007afi.2|100 |4.624079|4.258801|4 .989356|45.379750|2671Med ullo-Diff_00000003 XLOC_000002 Tcea1|uc011wht.1 q1:NSC.P419.228|uc011wht.1|100 |9.011253|8.560848 |9.461657|101.302266|2668 q2:NSC. P429.116|uc011wht.1|100 |6.889020|6.503460|7.27458 0|73.238938 |2668q3:NSC.P437.108 |uc011wht.1|90 |4.170527 |3.817430|4.523625|40.928694|2668Med ullo-Diff_00000004 XLOC_000003 Tcea1|uc007afi.2 q1:NSC.P419.231|NSC.P419.231.1 |100|31.891396|30.892103 |32.890690|379.023601 |1568q2:NSC.P429.121|NSC.P429.121.1 |100|27.991543 |27.007869|28.975218 |313.481210|1532 -Med ullo-Diff_00000005 XLOC_000002 Tcea1|uc007afi.2 q1:NSC.P419.236 |NSC.P419.236.1 |100|1.164739|0.868895 |1.460583|13.879881|- - - Med ullo-Diff_00000006 XLOC_000004 Atp6v1h|uc007afn.1 q1:NSC.P419.55|uc007afn.1 |100|39.526818 |38.58510 2|40.468533|455.599775|1976 q2:NSC. P429.43|uc007afn.1 |100|25.034945 |24.182398|25.887 493|271.738343|1976 q3:NSC.P437.37|uc007afn.1 |100|20.848047 |20.043989|21.652104|205.866771|1976 附录D 处理目录和用UNIX编程 Shell 教程 | 菜鸟教程 (runoob.com) Linux 教程 | 菜鸟教程 (runoob.com)","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"生物","slug":"科技/生物","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E7%94%9F%E7%89%A9/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://yuanz1949.github.io/tags/Python/"},{"name":"数据处理","slug":"数据处理","permalink":"https://yuanz1949.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"}]},{"title":"JUSTScoreSummary-个人成绩概览","slug":"JUSTScoreSummary-个人成绩概览","date":"2020-09-13T11:06:55.000Z","updated":"2020-09-13T11:06:55.000Z","comments":true,"path":"科技/信息技术/JUSTScoreSummary-个人成绩概览/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/JUSTScoreSummary-%E4%B8%AA%E4%BA%BA%E6%88%90%E7%BB%A9%E6%A6%82%E8%A7%88/","excerpt":"如果你也害怕一个一个手动汇总 就和我一起鼓捣Python吧 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"如果你也害怕一个一个手动汇总 就和我一起鼓捣Python吧 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 正如题图那样👩‍🏫 先探探路👣 打开浏览器开始吧💻 技术路线🔗 RequestsYourScore1.0🙄 JUSTScoreSummary🌟 特性 Features 使用我吧 小工具 样例 时间飞逝, 三年一晃, 这就要大四毕业了🎓 时间过得真快, 忙完了手头事 赶着暑假的小尾巴, 开始着手解决这件事啦 也许开发程序着实让人觉得好很高大上, 触不可及 但其实并不是, 至少说简单的, 普通的程序稍微学学就可搞定 很多东西都是曲折着前进的 活到老, 学到老 我会较为详细的介绍开发的过程以及程序的使用方法, 作为一个记录, 也是一个指引 接触了你会发现很多有意思的细节(点了按钮发生了什么~), 也会愿意享受自动化的魅力 而且通过互联网, 互不认识的人相互学习和分享, 同时自己能作为这样的运动的一份子 科学技术是第一生产力~ 它连接了你我, 也让很多事从容了起来 这里也做如下的声明: 此程序主要用于江苏科技大学2017级生物技术班的成绩统计使用. 可以快速把单个同学的各学期/学年/总学分绩点,公选课总分/选课,未/已通过课程等信息汇总在 {name}-Summary.xlsx 文件里. 在此感谢17生物技术的各位同学们反馈的各种BUG. 在各位的帮助下, 得以让此程序拥有更宽广的眼界和胸怀, 而不再面对未知直接崩溃. 正如题图那样👩‍🏫 总之目前我们需要一款软件,可以实行如下功能: 获取未通过的课程 获取公选课信息 获取每位同学的绩点 以上信息按学生来汇总 明显的, 我熟悉的Python做这件事没有任何问题, 那我们开始搞吧 先探探路👣 我只熟悉这个随意的确定了编程语言后, 我们要确定整个程序的框架. 比如数据的结构/算法/工作流程… 打开浏览器开始吧💻 要确定这些我们肯定要先登录一下教务, 看看正常的登录教务的方式还有成绩获取的方式 链接在这里: 江苏科技大学综合教务管理系统-强智科技 打开映入眼帘的就是登录界面啦(还好没有验证码:happy: ) 二话不说直接F12打开开发工具, 随便输入一个账号和密码, 点击登录 开发工具很明白的显示了当我们按下登录键后浏览器向服务器发送了一个post请求 这个请求带着我们的账号发给了在http://jwgl.just.edu.cn这个服务器的8080端口运行的/jsxsd/xk/目录里的LoginToXk, 不过这里我们不搞更复杂的啦, 反正把账号发给他就行了 同样的, 通过点击按钮后查看开发工具里网络, 得到按了按钮后浏览器发出的数据请求 我们就可以获取其他的获取信息的post请求啦: 成绩查询: 请求 URL: http://jwgl.just.edu.cn:8080/jsxsd/kscj/cjcx_list post表单: kksj=&amp;kcxz=&amp;kcmc=&amp;xsfs=all # kksj指开课时间 kcxz指开课学期 … 学期理论课表: 请求 URL: http://jwgl.just.edu.cn:8080/jsxsd/xskb/xskb_list.do 请求方法: GET #这个get方法不需要传数据 只需要请求这个链接就行可以得到数据了 个人学业清查: 请求 URL: http://jwgl.just.edu.cn:8080/jsxsd/view/pyfa/pyfazd_grxyqc.jsp 请求方法: GET … 有了技术, 剩下的就是体力活了👷 ​ , 要请求什么, 全部搞一遍然后列到文档里备用就行了 然后就是请求网页时我们要用的方式了, 当然是用最好用的 Requests 它就可以构建post请求, 这样可以帮助我们登录教务系统 也可以构建get请求, 直接获取其他的数据, 就像这样: 12345678910jwxt_session = session() # 创建一个名为jwxt_session的可以持续访问网页的session对象# get请求,content会接收服务器返回的数据content = jwxt_session.get(\"http://jwgl.just.edu.cn:8080/jsxsd/\") postUrl = \"http://jwgl.just.edu.cn:8080/jsxsd/xk/LoginToXk\" # 请求地址postData = &#123; 'USERNAME' : account , 'PASSWORD' : password &#125; # 构建表单content = jwxt_session.post(postUrl, data = postData) # post请求,content会接收服务器返回的数据 得到的数据从某种意义上说, 不是人喜欢读的, 那我们还要专门处理这些数据的手段 bs4是一个强大的处理HTML网页数据的第三方软件包, 可以用它来获取页面的数据 比如这样的 1234567main_page = login_jwxt(account, password) # 调用登录网页的函数后得到的数据后传给main_page# 这里直接将main_page的数据解码后传给BeautifulSoup,采用lxml解析html, 得到的结果传给左边变量main_page_content = BeautifulSoup(main_page.content.decode('utf-8'), 'lxml')# 这里就可以调用 .find(class_='???') 方法来查找类名为???的元素,然后获取它的textstu_info = main_page_content.find(class_='block1text').text.split('\\n') 如果是以表格的形式出现的(也就是&lt;\\table&gt;标签包裹的数据), 本来也是可以用bs4直接获取然后存入设计好的变量里等待处理的. 不过天降猛男, Pandas就很在行🚀 , 人家有 read_html() 方法~ __pandas.read_html(*args, **kwargs) __ Read HTML tables into a list of DataFrame objects. Parameters io [str, path object or file-like object] A URL, a file-like object, or a raw string containing HTML. Note that lxml only accepts the http, ftp and file url protocols. If you have a URL that starts with ‘https’ you might try removing the ‘s’. 资料来源: pandas : powerful Python data analysis toolkit Release 1.1.2 如上, 传入html 的原始数据(raw string containing HTML), 它就可以返回数据帧(DataFrame) 这就很妙了, 因为得到数据数据只是第一步, 处理数据也是个麻烦事 而Pandas就是处理数据的能手 这样直接将&lt;table&gt;转换成数据帧(DataFrame)岂不美哉 (数据帧是Pandas的基本数据结构, 这样就可以直接用它处理数据了) 处理数据的问题可以预见基本解决了, Pandas可以满足的 那还剩下汇总导出的问题, 二话不说直接Bing一下(欢迎大家来用Bing) 得知有一个叫openpyxl可以操纵Excel, 而且也想起来之前我的群里有樊同学传过这个库的文档 这里找了个中文的文档. 一通阅读, 基本确定可以满足我的要求 可以创建Excel填充数据, 也可以修改样式 几大基本的问题都解决了,汇总一下成果吧 技术路线🔗 采用 Requests 登录教务系统 并获取个人信息和成绩源数据 使用 bs4 按照获取的网页的特定内容 使用 Pandas 获取成绩页面的&lt;table&gt;标签并转为DataFrame 按照学校的计分规则自编计算绩点和筛选成绩的函数[^ 函数精度] 使用 openpyxl 按照设计的样式和计算的结果生成 Summary 文件 RequestsYourScore1.0🙄 开发自然要有工具, 这里我直接使用Jupyter作为开发这款程序的平台 得益于内嵌的IPython, Jupyter可以运行Python 同时可以按步调试, 返回程序执行之前的状态 内容可以以比较美观的形式显示在浏览器上 JUSTScoreSummary🌟 特性 Features 命令行式界面 输入账号密码自动生成 Summary 文件 可将此项目做库导入使用,包含有如下实用函数: table_xls(table_df, file_name) : 将得到的DF(DataFrame)表按照输入的文件名导出xls文件 public_elective(file_name=’’): 返回公选课DF, 如果导入文件名直接输出xls theory_schedule(file_name = ‘’): 返回学期理论课表,~ now_no_pass(): 返回尚未通过的课程 training_program(file_name = ‘’): 返回培养方案,~ add_academic_credits(table_df, ignore=True):在传入的表的最右侧加一列学分绩点,并返回 修改过的表/表格内的平均绩点/总学分; ignore参数为在计算平均绩点和总学分的时候是否忽略公选课,体育课和补考通过的课程 point_summary(): 返回绩点字典,包含 总平均绩点/各学年学期绩点 … 由于是特定班级使用所以有一定的局限性 公选课的识别可能只覆盖了自己班内部的,不够全面 自动化的Summary文件只统计了需要的几个课程信息不一定是你需要的 使用我吧 你可以直接使用打包好的exe可执行文件 这里下载 下载请点我 , 双击即可运行 Window 系统下直接运行. 你也可以直接下载源代码使用 安装Python 或者是 Anaconda 使用这个源代码 在终端比如 cmd 里,进入该项目文件夹后,使用这个命令: pip install -r requirements.txt 这样就安装了需要的库, 然后运行: python JUSTScoreSummary.py 小工具 在该仓库的 othertool 里有些小工具 classloop.py : 可以将此py文件放在主要代码的同一目录, 然后在同目录自己创建一个 account.txt 文件, 里面按照学号 密码的形式一行放一位同学的账号, 启动程序后, 就可以按顺序生成不同同学的 Summary文件了. 班级汇总宏(使用我合并文档).xlsm : 得到的 Summary 文件使用这个文档里的宏来合并. 样例 最后生成的summary文件为xlsx文件, 一个同学一个同名工作表(sheet) 而且如果有未通过的课程, 工作表的标签颜色将变成红色: 以下是某位同学的成绩, 这里作为最终的summary文件的样例列出:","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"信息技术","slug":"科技/信息技术","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://yuanz1949.github.io/tags/Python/"},{"name":"绩点","slug":"绩点","permalink":"https://yuanz1949.github.io/tags/%E7%BB%A9%E7%82%B9/"}]},{"title":"你也想做傻肥鱼么-网站模板构建指南","slug":"你也想做傻肥鱼么-网站模板构建指南","date":"2020-07-06T08:12:21.000Z","updated":"2020-07-06T08:12:21.000Z","comments":true,"path":"科技/信息技术/你也想做傻肥鱼么-网站模板构建指南/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/%E4%BD%A0%E4%B9%9F%E6%83%B3%E5%81%9A%E5%82%BB%E8%82%A5%E9%B1%BC%E4%B9%88-%E7%BD%91%E7%AB%99%E6%A8%A1%E6%9D%BF%E6%9E%84%E5%BB%BA%E6%8C%87%E5%8D%97/","excerpt":"自己做的菜才香 苑长 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"自己做的菜才香 苑长 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 FoolFatFish 开始烹饪吧 FoolFatFish Fool Fat Fish is not Fish 傻肥鱼参照Hexo官方主题文档构建 采用Hexo.Js作为网站的框架,采用ejsHTML模板语言和stylCSS模板语言编写 主要适用场景为:博客 傻肥鱼网站模板Github仓库 开始烹饪吧 首先构建一个Git仓库方便管理网站的版本,这里建议配合使用Github. 按照官方文档,Hexo网站模板必须包含如下文件夹和文件: 123456.├── _config.yml # 网站模板配置文件(提供网站的各种自定义配置)├── languages # 多语言配置文件(方便不同语言的人浏览网站)├── layout # 用于生成网站的网站模板文件(ejs,styl文件等)├── scripts # 网站模板需要的脚本文件(Jscript)└── source # 网站用的一些资源文件(图片等) *以上各种资料来源参见索引","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"信息技术","slug":"科技/信息技术","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"网站","slug":"网站","permalink":"https://yuanz1949.github.io/tags/%E7%BD%91%E7%AB%99/"},{"name":"设计","slug":"设计","permalink":"https://yuanz1949.github.io/tags/%E8%AE%BE%E8%AE%A1/"}]},{"title":"Anaconda之路","slug":"Anaconda之路","date":"2020-07-06T06:23:59.000Z","updated":"2020-07-06T06:23:59.000Z","comments":true,"path":"科技/信息技术/Anaconda之路/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/Anaconda%E4%B9%8B%E8%B7%AF/","excerpt":"如果你也怕包冲突,就快来吧 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"如果你也怕包冲突,就快来吧 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 什么是Anaconda ☁️ Anaconda的安装 💠 Anaconda的使用 🚀 瞧瞧Anaconda给电脑塞了什么📁 conda 都有些啥 🖐 Link start ! 🔗 小试牛刀 🔪 creat创造你的世界 🌱 env掌控世界 🗺 重要的config 🛠 不止如此 🎓 .condarc 文件详解 📑 更多资源 💽 什么是Anaconda ☁️ @官网: Anaconda | The World’s Most Popular Data Science Platform With over 20 million users worldwide, the open-source Individual Edition (Distribution) is the easiest way to perform Python/R data science and machine learning on a single machine. Developed for solo practitioners, it is the toolkit that equips you to work with thousands of open-source packages and libraries. @官方指南: Getting started with Anaconda — Anaconda documentation Anaconda是一个可以管理Python包和Python环境的软件 所谓Python包指的是别人写(第三方)的有一定功能的Python代码 所谓Python环境其实就是Python代码运行时调用的具体版本的Python解释器 所谓管理指的就是我们可以通过Anaconda的conda指令, 随意地创建包含有我们指定的Python包的指定版本的Python环境, 这样做的目的是解决兼容性问题(相互依赖问题) 比如你获得的某段代码采用了Python2时代才有的语法编写的, 自然是不可以用Python3的解释器来运行的. 那就可以创建一个Python2的环境(相当于划出一部分磁盘空间安装一个Python2版本)来复现代码, 然后再创建一个Python3的环境来重新编写他们(重构)也是没有问题的. Anaconda的安装 💠 官方指引: Installation — Anaconda documentation 这里只翻译Window版本的安装, 大家也可以直接阅读上面官方的文档 点击我 下载Anaconda安装器. 推荐: 使用 SHA-256 验证程序完整性. 如果想获取更多的哈希(hashes), 见 What about cryptographic hash verification? 双击下载好的安装器运行. 注意: 如果安装器被下载到了Window的收藏夹文件夹(IE浏览器的数千收藏夹,在你的用户目录里), 请移到其他文件夹运行.¶ 点击next(下一步) 阅读协议条款, 同意的话点击I Agree(我同意) 选择Just Me (只为我),如果是为所有的用户安装选择另一个(这需要管理员权限, 如果弹窗申请权限请确认), 点击next(下一步) 选择一个安装Anaconda的目标文件夹, 点击next(下一步) 安装目录路径不可以有空格或者是在7位ASCII字符集以外的Unicode字符,见 FAQ. 选择是否要添加Anaconda到环境变量(PATH). 我们推荐不要添加, 因为这可能干扰其他软件. 可以通过使用Anaconda Navigator(Anaconda导航) 或者是 开始菜单里的Anaconda Prompt(Anaconda提示符) 来替代. 悬着是否注册Anaconda作为默认的Python, 除非你打算安装多个版本的Anaconda或Python, 可以接受默认设置, 保持勾选. 点击install(安装)按钮, 如果你想要看Anaconda安装, 可以点击Show Details(显示细节) 点击next(下一步) 可选: 为Anaconda安装PyCharm, 点击链接跳转 https://www.anaconda.com/pycharm. 也可以不安装PyCharm, 直接点击next(下一步) 在成功安装之后, 你应该可以看到&quot;Thanks for installing Anaconda(感谢安装Anaconda&quot;的对话框 如果你想要了解更多关于Anaconda Cloud (Anaconda云服务)以及开始入门Anaconda, 可以勾上复选框 “Learn more about Anaconda Cloud (了解更多Anaconda云服务)” 和 “Learn how to get started with Anaconda (了解如何入门Anaconda)”. 点击Finish(完成) 验证你的安装是否可用 (这里的验证可以按照下文的使用操作) 注意: 如果你使用的是公司的代理, 你还需要一些额外的设置. 参加如何设置你的代理(proxy) 出了问题可以参见 troubleshooting (anaconda.com) 入门参见: Getting started with Anaconda Anaconda的使用 🚀 瞧瞧Anaconda给电脑塞了什么📁 我们点击菜单键调出菜单 可以看到Anaconda默认给出了五个快捷方式 Anaconda Navigator (Anaconda3) F:\\Anaconda3\\pythonw.exe F:\\Anaconda3\\cwp.py F:\\Anaconda3 F:\\Anaconda3\\pythonw.exe F:\\Anaconda3\\Scripts\\anaconda-navigator-script.py Anaconda Navigator F:\\Anaconda3\\pythonw.exe F:\\Anaconda3\\cwp.py F:\\Anaconda3 F:\\Anaconda3\\pythonw.exe F:\\Anaconda3\\Scripts\\anaconda-navigator-script.py Anaconda Powershell Prompt (Anaconda3) %windir%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -ExecutionPolicy ByPass -NoExit -Command &quot;&amp; ‘F:\\Anaconda3\\shell\\condabin\\conda-hook.ps1’ ; conda activate ‘F:\\Anaconda3’ &quot; Anaconda Prompt (Anaconda3) %windir%\\System32\\cmd.exe “/K” F:\\Anaconda3\\Scripts\\activate.bat F:\\Anaconda3 Jupyter Notebook (Anaconda3) F:\\Anaconda3\\python.exe F:\\Anaconda3\\cwp.py F:\\Anaconda3 F:\\Anaconda3\\python.exe F:\\Anaconda3\\Scripts\\jupyter-notebook-script.py “%DESKTOP%” Spyder (Anaconda3) F:\\Anaconda3\\pythonw.exe F:\\Anaconda3\\cwp.py F:\\Anaconda3 F:\\Anaconda3\\pythonw.exe F:\\Anaconda3\\Scripts\\spyder-script.py conda 都有些啥 🖐 官方指引: Getting started with conda — conda 4.8.4. documentation Conda cheat sheet *部分翻译自官方文档 Link start ! 🔗 如果你的是Windows系统 Win+S调出搜索框 或者 按下Win菜单键调出菜单 直接输入Anaconda Prompt, 回车即可 如果Anaconda已经加入了你的环境变量, 直接Win+R调出运行 输入cmd回车, 调出命令提示符 如果你的是Mac系统 如果你的是Linux系统 小试牛刀 🔪 conda --version 在前面我们打开的终端界面, 输入上面的一串字符, 即可调用上面的命令 该命令将输出我们安装的conda版本 conda update conda 升级现在的conda到最新版本 当conda输出的字符出现下面这一行时 Proceed ([y]/n)? 你可以通过输入y或者n然后回车来表示同意或者拒绝 creat创造你的世界 🌱 conda最棒的的一个功能就是创造各种你想要的同时又会互相冲突的Python环境 试想一下, 如果你在电脑里装了好几个版本的Python解释器并都导入到了电脑的环境变量的这种情况 python 当你在终端里输入上面的命令, 终端将不知道调用哪个版本的Python解释器 而当你使用conda时, 这件事情就变的优雅了许多 conda create --name snowflakes biopython 当你在黑漆漆(当然如果你会美化的话将可能是五彩斑斓的:happy:)的终端输入上面的这串代码并回车后 conda将帮你创造一个独立的像下面描述的虚拟环境 名为snowflakes的 (--name属性后面跟着哪个字符串, 名字就是什么) 包含有一个和你安装的Anaconda自带的同版本的Python解释器 自动安装有biopython包 那么如何进入我们创建的世界呢 conda activate snowflakes 输入完回车后, 如果看到终端的命令提示符(比如cmd的是&gt;)的前面 变成了(snowflakes) &gt;这样的状态时 欢迎你进入snowflakes 当然activate后面还可以跟具体的某个环境的目录 这在你从某个地方复制了一份虚拟环境时可以直接激活它时使用 事实上, 不创建新环境, Anaconda也自带了一个名叫base的环境 conda activate 不带名字直接输入激活指令, 默认进入base环境 这个基础环境的本质就是Anaconda的主目录里的那个python.exe 我们创建的新的环境则都在主目录下面的envs里 里面也有python.exe, 但是是我们指定的安装的版本 conda info --envs 这个命令可以获得所有的目前你拥有的环境的名字和位置 带有*号的环境就是当前激活的环境 要切换可以直接输入带有环境名字的激活指令即可 这样就可以优雅的在多个不同的环境里来回穿梭了 conda create --name snakes python=3.5 这里略微的不同是在名字的后面, 指定了要安装的Python的版本 这样就可以创建不同的Python版本的环境啦 conda create --clone ENVNAME --name NEWENV 这样的命令可以按照--clone指定的环境名字, 原样创建一个新的环境 我们自己的环境自己用的顺心, 但是如果你想分享给其他人呢 好像拿U盘复制或者上传略微有些古怪或者不方便 conda env export --name ENVNAME &gt; envname.yml 运行上面的命令吧, 然后就会生成envname.yml文件 把这个文件发给你的朋友吧 如果他的终端的工作目录在envname.yml所在的地方 conda env create 便可以直接安装同样的环境了 conda env create --file envname.yml 也可以直接指定要安装的环境镜像的名字 另一种方式是生成.txt文件 conda list --explicit &gt; pkgs.txt 这里使用conda list --explicit列出所有包和版本 然后通过终端的&gt;的方法, 将所有输出导入到pkgs.txt文件 conda create --name NEWENV --file pkgs.txt 然后生成环境时指定这个文件就好啦 conda deactivate 退出环境可以直接使用这个命令 如果没啥可干的, 也可以直接关掉整个终端窗口 conda create --help 这将直接列出所有creat支持的参数 env掌控世界 🗺 重要的config 🛠 官方指引: Configuration — conda 4.8.5.post110+a7bb8d53 documentation 清华镜像: Anaconda-清华镜像使用帮助 conda config --show-sources 帮直接帮你列出你的conda设置文件的位置以及内容 到==&gt;指定的位置, 用记事本打开.condarc即可修改config设置 实际上, 我们通过conda config ...指令做的修改都会记录在这里 conda config --show 显示所有conda设置 conda config --show channels 只显示channels变量 conda config --set show_channel_urls yes 设定(--set)设置选项show_channel_urls的值为yes conda config --add channels CHANNELNAME 为设置选项channels增添(--add)值: CHANNELNAME conda config --remove channels https:XXX 删除( --remove)设置选项channels的某个值: https:XXX conda clean -i 清除索引缓存 不止如此 🎓 conda search beautifulsoup4 我们还可以使用search来检索包, 这主要用于我们有时候记不清楚包的名字时可以使用 如果在后面加上参数--info可以获得详细的描述 结果会直接输出在窗口上, 找到想要的包的名字后 conda install beautifulsoup4 就可以安装啦 安装好后 conda list 就可以看到当前环境安装的所有包了 conda list --revisions 将会输出当前环境所有包的变动, 可以用--name指定特定的环境 conda install --name ENVNAME --revision REV_NUMBER 上面命令可以将特定环境还原到特定rev版本 conda install --yes PKG1 PKG2 无需用户确认, 直接安装PKG1和PKG2 编写脚本来操作conda时好用, 这样conda不会停下来等待用户确认了 conda install conda-forge::PKGNAME 从频道conda-forge里安装包PKGNAME到环境 conda install PKGNAME==3.1.4 安装指定版本的包到环境 conda install “PKGNAME[version=‘3.1.2|3.1.4’]” 安装3.1.2或3.1.4版本的包到环境 conda install “PKGNAME&gt;2.5,❤️.2” 安装版本号大于2.5并小于3.2的某个版本到环境 conda update --all --name ENVNAME 升级ENVNAME环境里的所有包 conda update -n base conda 升级conda到最新版本 conda update anaconda 升级所有包到最新的Anaconda支持的版本 但是同时会兼顾兼容性和稳定性, 不一定真的是最新的 conda uninstall PKGNAME --name ENVNAME 从ENVNAME环境里删掉PKGNAME包 conda clean --all 删除所有未被使用的缓存文件(包括没有使用的包) conda remove --name ENVNAME --all 整个删除某个环境 .condarc 文件详解 📑 官方指引 : Using the .condarc conda configuration file — conda 4.8.5.post110+a7bb8d53 documentation 更多资源 💽 Free Community Support Online Documentation Paid Support Options Anaconda On-Site Training Courses Anaconda Consulting Services","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"信息技术","slug":"科技/信息技术","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"分享","slug":"分享","permalink":"https://yuanz1949.github.io/tags/%E5%88%86%E4%BA%AB/"},{"name":"Python","slug":"Python","permalink":"https://yuanz1949.github.io/tags/Python/"}]},{"title":"酸菜鱼毕业指南","slug":"酸菜鱼毕业指南","date":"2020-07-06T06:23:59.000Z","updated":"2020-07-06T06:23:59.000Z","comments":true,"path":"生活/搞事情吖/酸菜鱼毕业指南/","link":"","permalink":"https://yuanz1949.github.io/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/%E9%85%B8%E8%8F%9C%E9%B1%BC%E6%AF%95%E4%B8%9A%E6%8C%87%E5%8D%97/","excerpt":"我这就要毕业了啊 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"我这就要毕业了啊 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 说在前面 说在前面","categories":[{"name":"生活","slug":"生活","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"搞事情吖","slug":"生活/搞事情吖","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/"}],"tags":[{"name":"计划","slug":"计划","permalink":"https://yuanz1949.github.io/tags/%E8%AE%A1%E5%88%92/"},{"name":"毕业","slug":"毕业","permalink":"https://yuanz1949.github.io/tags/%E6%AF%95%E4%B8%9A/"}]},{"title":"江科大VPN2探索","slug":"江科大VPN2探索","date":"2020-07-03T16:00:00.000Z","updated":"2020-07-03T16:00:00.000Z","comments":true,"path":"科技/信息技术/江科大VPN2探索/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/%E6%B1%9F%E7%A7%91%E5%A4%A7VPN2%E6%8E%A2%E7%B4%A2/","excerpt":"学校这操作是要断了白嫖的后路啊 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"学校这操作是要断了白嫖的后路啊 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 请求 URL: http://jwgl.just.edu.cn:8080/jsxsd/pyfa/pyfazd_query?jxp01kctxid=4B753B6821A61F03E05314FAA8C0B91F&amp;jx02kcmkid= 4B753B6821A61F03E05314FAA8C0B91F 0f881f7be21ba9de97386110991cd3ca https://my.v.just.edu.cn:4443/_s2/students_sy/main.psp https://lib.v.just.edu.cn:4443/?p=YXM9MiZ0PTImZD0xMDEmcD0xJmY9MzAmbT1OJg_&amp;_l=&amp;_t= https://f7eaab402704643846a1c78f2d7175fflib.v.just.edu.cn:4443/ https://vpn.just.edu.cn/,DanaInfo=lib.just.edu.cn,SSO=U+ 1234567891011121314&lt;script language=\"javascript\" id=\"dsshim\" src=\"/dana-cached/js/shimdata.cgi\"&gt;&lt;/script&gt;&lt;script language=\"javascript\" id=\"dsfunc\" src=\"/dana-cached/js/oth.js?be8c55af7410902a7e80cf873f5aa084\"&gt;&lt;/script&gt;&lt;script language=\"javascript\" id=\"dstimeout\" src=\"/dana-cached/js/sessiontimeout.js?be8c55af7410902a7e80cf873f5aa084\"&gt;&lt;/script&gt;&lt;script language=\"javascript\" id=\"dsvar\"&gt;//&lt;![CDATA[var dsnodocwrites = 0 ; var DanaCookie=\"JSESSIONID=509585B7B99A070045741FA5808E2504; PHPSESSID=b39pv84ufsjrbmo2m6u2pf16t0\"; var DSHost=\"vpn.just.edu.cn\"; var DSDanaInfoStr=\"\"; var DSObfuscateHostname=0;var DSTBSettings=20497;var DSTBLU='/dana/home/starter.cgi?startpageonly=1';;danaSetDSHost();//]]&gt;&lt;/script&gt; https://lib.v.just.edu.cn:4443/node/465.jspx https://vpn.just.edu.cn/node/,DanaInfo=lib.just.edu.cn+465.jspx 123456789101112131415&lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=qikan.chaoxing.com+\"&gt;&lt;span&gt;1、&lt;/span&gt;超星期刊&lt;/a&gt;&lt;span class=\"time\"&gt;2020-05-13&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=202.195.197.90+\"&gt;&lt;span&gt;2、&lt;/span&gt;江苏科技大学校硕士学位论文全文数据库(自建)&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=www.cnki.net+\"&gt;&lt;span&gt;3、&lt;/span&gt;中国知识资源总库—CNKI系列数据库&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=www.duxiu.com+\"&gt;&lt;span&gt;4、&lt;/span&gt;读秀学术搜索&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=ss.zhizhen.com+\"&gt;&lt;span&gt;5、&lt;/span&gt;超星发现系统&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=g.wanfangdata.com.cn+index.html\"&gt;&lt;span&gt;6、&lt;/span&gt;万方科技报告数据库&lt;/a&gt;&lt;span class=\"time\"&gt;2019-12-12&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=www.airitilibrary.cn+\"&gt;&lt;span&gt;7、&lt;/span&gt;华艺·台湾学术文献数据库（科学版）&lt;/a&gt;&lt;span class=\"time\"&gt;2019-04-28&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=g.wanfangdata.com.cn+\"&gt;&lt;span&gt;8、&lt;/span&gt;万方数据资源系统&lt;/a&gt;&lt;span class=\"time\"&gt;2019-01-15&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/ProjectV3/Index/,DanaInfo=www.hiresearch.cn+?Search\"&gt;&lt;span&gt;9、&lt;/span&gt;海研项目数据库&lt;/a&gt;&lt;span class=\"time\"&gt;2019-01-14&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=www.sslibrary.com+\"&gt;&lt;span&gt;10、&lt;/span&gt;汇雅数字图书馆&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-08&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=www.zjgxt.net+\"&gt;&lt;span&gt;11、&lt;/span&gt;镇江地区文献资源共享联合体&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=www.cnki.net+\"&gt;&lt;span&gt;12、&lt;/span&gt;中国重要报纸全文数据库&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=cssci.nju.edu.cn+\"&gt;&lt;span&gt;13、&lt;/span&gt;中文社会科学引文索引&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/du/,DanaInfo=202.195.197.90+\"&gt;&lt;span&gt;14、&lt;/span&gt;江苏科技大学教学参考书推荐书目(自建)&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://vpn.just.edu.cn/,DanaInfo=ssvideo.superlib.com,SSL+\"&gt;&lt;span&gt;15、&lt;/span&gt;超星学术视频&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt; 123456789101112131415&lt;li&gt;&lt;a href=\"https://f7eaab402704643846a1c78f2d7175fflib.v.just.edu.cn:4443\"&gt;&lt;span&gt;1、&lt;/span&gt;超星期刊&lt;/a&gt;&lt;span class=\"time\"&gt;2020-05-13&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://c5f5fdb9f7d1e91498054c63bc401ca7lib.v.just.edu.cn:4443/\"&gt;&lt;span&gt;2、&lt;/span&gt;江苏科技大学校硕士学位论文全文数据库(自建)&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://0d53ff2b217dbf7bcdae2fa7a747bda5lib.v.just.edu.cn:4443/\"&gt;&lt;span&gt;3、&lt;/span&gt;中国知识资源总库—CNKI系列数据库&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://0f881f7be21ba9de97386110991cd3calib.v.just.edu.cn:4443/\"&gt;&lt;span&gt;4、&lt;/span&gt;读秀学术搜索&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://6ac5b0bb39d192b0858cfa77a8a47a00lib.v.just.edu.cn:4443/\"&gt;&lt;span&gt;5、&lt;/span&gt;超星发现系统&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://9d3aaaa9ca1208d8df2d1eda91e8d27clib.v.just.edu.cn:4443/index.html\"&gt;&lt;span&gt;6、&lt;/span&gt;万方科技报告数据库&lt;/a&gt;&lt;span class=\"time\"&gt;2019-12-12&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://b61016b4ab60d91a0456e5ade62e98aalib.v.just.edu.cn:4443/\"&gt;&lt;span&gt;7、&lt;/span&gt;华艺·台湾学术文献数据库（科学版）&lt;/a&gt;&lt;span class=\"time\"&gt;2019-04-28&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\" https://9d3aaaa9ca1208d8df2d1eda91e8d27clib.v.just.edu.cn:4443\"&gt;&lt;span&gt;8、&lt;/span&gt;万方数据资源系统&lt;/a&gt;&lt;span class=\"time\"&gt;2019-01-15&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://1d0dc937ebd9801e5a6982cfdd86ce88lib.v.just.edu.cn:4443/ProjectV3/Index/?Search\"&gt;&lt;span&gt;9、&lt;/span&gt;海研项目数据库&lt;/a&gt;&lt;span class=\"time\"&gt;2019-01-14&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://3e1b475a3625bbc2d1f3394bdcdc0fdelib.v.just.edu.cn:4443/\"&gt;&lt;span&gt;10、&lt;/span&gt;汇雅数字图书馆&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-08&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://dfa7c5e863ae2b8c5d218bed83dd7f70lib.v.just.edu.cn:4443/\"&gt;&lt;span&gt;11、&lt;/span&gt;镇江地区文献资源共享联合体&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://0d53ff2b217dbf7bcdae2fa7a747bda5lib.v.just.edu.cn:4443/\"&gt;&lt;span&gt;12、&lt;/span&gt;中国重要报纸全文数据库&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://c84eece581933b1e271859d0005724f0lib.v.just.edu.cn:4443/\"&gt;&lt;span&gt;13、&lt;/span&gt;中文社会科学引文索引&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://c5f5fdb9f7d1e91498054c63bc401ca7lib.v.just.edu.cn:4443/du/\"&gt;&lt;span&gt;14、&lt;/span&gt;江苏科技大学教学参考书推荐书目(自建)&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://elkssl6b416af884691f1d39771b9bd0c5ebbelib.v.just.edu.cn:4443/\"&gt;&lt;span&gt;15、&lt;/span&gt;超星学术视频&lt;/a&gt;&lt;span class=\"time\"&gt;2018-06-07&lt;/span&gt;&lt;/li&gt;","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"信息技术","slug":"科技/信息技术","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"江科大","slug":"江科大","permalink":"https://yuanz1949.github.io/tags/%E6%B1%9F%E7%A7%91%E5%A4%A7/"},{"name":"VPN","slug":"VPN","permalink":"https://yuanz1949.github.io/tags/VPN/"}]},{"title":"我眼中的世界","slug":"我眼中的世界","date":"2020-06-10T04:54:03.000Z","updated":"2020-06-10T04:54:03.000Z","comments":true,"path":"生活/认知/我眼中的世界/","link":"","permalink":"https://yuanz1949.github.io/%E7%94%9F%E6%B4%BB/%E8%AE%A4%E7%9F%A5/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E4%B8%96%E7%95%8C/","excerpt":"世界的真实样子是什么呢? 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"世界的真实样子是什么呢? 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 现有的科学方法 我们认知微观世界的工具 现有的科学方法 我们认知微观世界的工具","categories":[{"name":"生活","slug":"生活","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"认知","slug":"生活/认知","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/%E8%AE%A4%E7%9F%A5/"}],"tags":[{"name":"探索","slug":"探索","permalink":"https://yuanz1949.github.io/tags/%E6%8E%A2%E7%B4%A2/"}]},{"title":"江科大VPN使用指南","slug":"江科大VPN使用指南","date":"2020-06-06T16:00:00.000Z","updated":"2020-06-06T16:00:00.000Z","comments":true,"path":"生活/搞事情吖/江科大VPN使用指南/","link":"","permalink":"https://yuanz1949.github.io/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/%E6%B1%9F%E7%A7%91%E5%A4%A7VPN%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/","excerpt":"你可是交过学费的，别浪费了它 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"你可是交过学费的，别浪费了它 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 什么是江科大VPN❓ 什么是VPN🔗 为什么要用江科大VPNℹ️ 打开江科大VPN世界的大门🔑 手机江科大📳 电脑江科大💻 资源汇总 后记🤠 什么是江科大VPN❓ 什么是VPN🔗 为什么要用江科大VPNℹ️ 打开江科大VPN世界的大门🔑 手机江科大📳 电脑江科大💻 资源汇总 VPN **官网：**https://vpn.just.edu.cn/ **图书馆：**https://vpn.just.edu.cn/library/,DanaInfo=lib.just.edu.cn,Port=81+ **书目检索系统：**https://vpn.just.edu.cn/opac/,DanaInfo=lib.just.edu.cn,Port=8080+ **学校主页：**https://vpn.just.edu.cn/,DanaInfo=www.just.edu.cn+ **信息门户：**https://vpn.just.edu.cn/,DanaInfo=my.just.edu.cn+ **奥蓝系统：**https://vpn.just.edu.cn/,DanaInfo=202.195.195.238,Port=866+LOGIN.ASPX **教务系统：**https://vpn.just.edu.cn/jsxsd/xk/,DanaInfo=jwgl.just.edu.cn,Port=8080+ **实验选课系统：**https://vpn.just.edu.cn/sy/,DanaInfo=202.195.195.198+ **百度：**https://vpn.just.edu.cn/,DanaInfo=www.baidu.com,SSL+ Unipus**：**https://58.241.125.54/,DanaInfo=202.195.195.101+index.php?Horizon=f71f298c3edd53b01d7d58d6224bf019 通过 VPN 打开百度，可以轻松的使用学校服务器访问外网。（第一次使用百度搜索会出现排版故障，在搜索结果页刷新几次就好） **中国知网：**https://vpn.just.edu.cn/,DanaInfo=www.cnki.net+ 后记🤠","categories":[{"name":"生活","slug":"生活","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"搞事情吖","slug":"生活/搞事情吖","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/"}],"tags":[{"name":"江科大","slug":"江科大","permalink":"https://yuanz1949.github.io/tags/%E6%B1%9F%E7%A7%91%E5%A4%A7/"},{"name":"VPN","slug":"VPN","permalink":"https://yuanz1949.github.io/tags/VPN/"}]},{"title":"自动电位滴定指南","slug":"自动电位滴定指南","date":"2020-06-06T16:00:00.000Z","updated":"2020-06-06T16:00:00.000Z","comments":true,"path":"科技/生物/自动电位滴定指南/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E7%94%9F%E7%89%A9/%E8%87%AA%E5%8A%A8%E7%94%B5%E4%BD%8D%E6%BB%B4%E5%AE%9A%E6%8C%87%E5%8D%97/","excerpt":"用自动化滴定多舒服嘛","text":"用自动化滴定多舒服嘛 自动电位滴定 电位滴定测食醋中乙酸的含量 准备工作 试剂 器材 实验步骤 实验分析 补充 自动电位滴定 根据滴定过程中被滴定溶液电导的变化来确定滴定终点的一种容量分析方法。电解质溶液的电导取决于溶液中离子的种类和离子的浓度。在电导滴定中，由于溶液中离子的种类和浓度发生了变化，因而电导也发生了变化，据此可确定滴定的终点。 电位滴定测食醋中乙酸的含量 准备工作 试剂 $0.1\\ mol·L^{-1}$ 氢氧化钠标准溶液 配制：将 $100\\ g$ 氢氧化钠$(NaOH)$，加入 $100\\ mL$ 蒸馏水，注入密封性能良好的聚乙烯瓶中，密闭放置至溶液清亮。用移液管移取 $5\\ mL$上层清液，移入$1000\\ mL$容量瓶中，再用新鲜无二氧化碳蒸馏水稀释至刻度，充分摇匀后保存在密封性能良好的塑料瓶中备用。 标定：用减量法准确称取 $0.3 \\sim 0.4 g\\ KHC_8H_4O_4$ 三份，加 $25 mL$ 蒸馏水溶解。然后加 $1$ 滴酚酞指示剂，用 $NaOH$ 溶液滴定至终点。记录每次消耗 $NaOH$ 溶液的体积。 $$ K\\mathbf{H}C_8H_4O_4 + Na\\mathbf{OH} = KNaC_8H_4O_4 + H_2O \\ 1\\quad\\quad\\quad:\\quad\\quad\\quad1\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\ ---------------------\\ m = m(KHC_8H_4O_4)\\ M = M(KHC_8H_4O_4) \\ m/M = C_{NaOH} ×V_{NaOH} （L） \\ \\mathbf{C_{NaOH}} = m\\ /(M × {\\color{blue}{V_{NaOH}}})（L） $$ 注意：1.除去碱液中的$CO_2$。为什么要去除二氧化碳 $pH\\ 4.00$缓冲液 $pH\\ 9.18$缓冲液 食醋试液 取 $10\\ mL$ 食醋样品，定容于 $250\\ mL$ 容量瓶中。 去离子水 器材 $ZDJ-B$型自动电位滴定仪 其他 电导电极，电磁搅拌器，搅拌子。25 mL碱式滴定管，200 mL烧杯，2 mL吸量管 实验步骤 **概览：**用移液管移取稀释好的食醋试液 $25 mL$ 放入锥形瓶中，加 $1\\sim 2滴$ 酚酞指示剂，用 $NaOH$ 标准溶液滴定至终点。记录$NaOH$消耗的体积，重复做 $2～3$ 次。 反应产物为 $NaAc$ 是强碱弱酸盐，则终点时溶液的 $pH&gt;7$ ，因此，以酚酞为指示剂。 准备工作 开机，按F4(清洗)键，按“▲”或“▼”键选择清洗次数后，再按“F1”（确认）键，用$0.1\\ mol/L$氢氧化钠溶液反复冲洗滴定管，使溶液充满整个滴定管道。 选用电极 E-201-C-9型pH复合电极及T-818-B-6型温度电极。 滴定管选用：$10 mL$, 同时设定滴定仪的滴定管系数。 分析步骤 按“设置”键设置好滴定管及滴定管系数。 电极标定 按标定键，仪器进入“标定”状态，将复合电极及温度电极放入 $pH 4.00$ 缓冲液中，待 $pH$ 值显示稳定后，按“ $F1$ ”（确认）键，仪器显示“二点标定吗？”，按（确认）键，仪器进行二点标定，将复合电极及温度电极放入 $pH 9.18$ 缓冲液中，待 $pH$ 值显示稳定后，按“ $F1$ ”（确认）键，仪器显示标定结束及斜率 $E0$ 值，再按“ $F2$ ”（确认）键，结束标定。 样品准备 用移液管吸取 $10\\ mL$ 的食醋溶液于反应杯中，加入$40 mL$去离子水，如入搅拌子，放在搅拌器上将电极及滴液管插入溶液。 滴定分析 按“搅拌”键，再按“▲”或“▼”键设置好合适的搅拌速度（或用 $F3$ 设定键直接输入数字设定搅拌速度），再按“ $F1$ ”（确认）键退出搅拌速度设定。按“ $F5$ ”（滴定），仪器显示“滴定模式”状态，按“▲”或“▼”键选择“预定终点滴定”，再按“ $F1$ ”（确认）键，再按“▲”或“▼”键设置模式，再按“ $F1$ ”（滴定）键，仪器自动进行滴定，找到终点时仪器自动长声提示，结束滴定。仪器自动进行补液，结束后显示终点结果，按 $F1$ 键结束本次分析。重复进行 $3$ 次。滴定完成后，用去离子水反复清洗滴定管。注意：在上一次做过中和滴定后，下次在“滴定模式”状态下，按“▲”或“▼”键选择“重复上次滴定”，可直接进行中和滴定。 实验分析 醋酸含量计算原理 $$ Na\\mathbf{OH} + \\mathbf{H}Ac = NaAc + H_2O \\ 1\\ \\ \\ :\\ \\ \\ 1\\qquad\\qquad\\qquad \\ ---------------\\ C_{NaOH} × V_{NaOH} = C_{HAc} × V_{HAc} \\ \\mathbf{C_{HAc}} = C_{NaOH} × {\\color{red}{V_{NaOH}}} / V_{HAc} $$ 补充","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"生物","slug":"科技/生物","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E7%94%9F%E7%89%A9/"}],"tags":[{"name":"化学","slug":"化学","permalink":"https://yuanz1949.github.io/tags/%E5%8C%96%E5%AD%A6/"},{"name":"仪器","slug":"仪器","permalink":"https://yuanz1949.github.io/tags/%E4%BB%AA%E5%99%A8/"}]},{"title":"网站收藏夹文件嵌入网页","slug":"网站收藏夹文件嵌入网页","date":"2020-06-03T16:00:00.000Z","updated":"2020-06-03T16:00:00.000Z","comments":true,"path":"科技/信息技术/网站收藏夹文件嵌入网页/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F%E5%A4%B9%E6%96%87%E4%BB%B6%E5%B5%8C%E5%85%A5%E7%BD%91%E9%A1%B5/","excerpt":"自动化！ 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"自动化！ 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 我碰到的问题 技术路线 Summary标签和Detail标签 Vue框架 我碰到的问题 最近在构建网站的时候涉及到了分享我的书签的情况,按照最初的想法是在页面内嵌入可以收缩的列表的,但是直接嵌入书签的HTML文件时,整个书签所有的内容就都露了出来.这当然不是我想看到的,就要靠CSS来控制列表样式,这里尝试几个不同的路线. 同时仔细查看由Edge for Chrome导出的收藏夹的内部文本: 可以看到里面其实并不符合HTML的语法,也不是XML的语法. 技术路线 Summary标签和Detail标签 Vue框架 当前项目正在咕,尽情等待,所有在咕列表见: Blog咕咕咕","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"信息技术","slug":"科技/信息技术","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"python","slug":"python","permalink":"https://yuanz1949.github.io/tags/python/"},{"name":"书签","slug":"书签","permalink":"https://yuanz1949.github.io/tags/%E4%B9%A6%E7%AD%BE/"},{"name":"自动化","slug":"自动化","permalink":"https://yuanz1949.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"}]},{"title":"我的摄影之路","slug":"我的摄影之路","date":"2020-05-27T08:43:38.000Z","updated":"2020-05-27T08:43:38.000Z","comments":true,"path":"科技/多媒体/我的摄影之路/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E5%A4%9A%E5%AA%92%E4%BD%93/%E6%88%91%E7%9A%84%E6%91%84%E5%BD%B1%E4%B9%8B%E8%B7%AF/","excerpt":"摄影，记录光影的艺术。 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"摄影，记录光影的艺术。 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 我眼中的摄影📸 嘛都不懂怎么摄影❓ 一起拍照吧🌈 夜观天象🌠 植物生长🌱 纪录·生活🥘 我眼中的摄影📸 我就胡诌 摄影, 一般人都知道要用相机之类的才行 但其实 什么是相机呢 捕捉并发现光与影之美的一整套技术流程 我认为这就是摄影 @苑长 嘛都不懂怎么摄影❓ 学到啦活到老啦 一起拍照吧🌈 二话不说，赶快行动呀 这些是我的个人的拍摄的一些较为有意识地系列的集合。 夜观天象系列主要涉及夜景和长曝光方面的学习应用。 植物生长主要是涉及延时摄影和微距方面的学习应用。 纪录·生活主要是随便的记录啦，包含我觉得有意思或者值得记录的东西。 当然还有非常多的其他的系列，我个人的QQ相册是目前的各系列的主要汇聚地。 夜观天象🌠 植物生长🌱 纪录·生活🥘","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"多媒体","slug":"科技/多媒体","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E5%A4%9A%E5%AA%92%E4%BD%93/"}],"tags":[{"name":"摄影","slug":"摄影","permalink":"https://yuanz1949.github.io/tags/%E6%91%84%E5%BD%B1/"},{"name":"单反","slug":"单反","permalink":"https://yuanz1949.github.io/tags/%E5%8D%95%E5%8F%8D/"}]},{"title":"我的视频下载工作流","slug":"我的视频下载工作流","date":"2020-05-09T16:00:00.000Z","updated":"2020-05-09T16:00:00.000Z","comments":true,"path":"科技/多媒体/我的视频下载工作流/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E5%A4%9A%E5%AA%92%E4%BD%93/%E6%88%91%E7%9A%84%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B7%A5%E4%BD%9C%E6%B5%81/","excerpt":"这些方法都存在于网络之上 ——苑长","text":"这些方法都存在于网络之上 ——苑长 视频下载大观 视频下载之路 1. 发现视频（略） 2. 获得视频链接 3. 使用下载器下载 小建议 视频下载大观 下载视频主要分为 寻找视频 获得视频链接 使用下载器下载 以下按照上述的三个步骤分别推荐下载工具： 视频下载之路 1. 发现视频（略） a) 搜索引擎( 必应 , 百度 )直接按照关键字索引视频 b) 去特定的网站诸如 B站，YouTube，腾讯视频 , 爱奇艺 搜索 c) 某些特定页面的媒体资源（ 中国大学MOOC(慕课) 之类的，随意看到的网站上的视频） 通过这几种过程，一般可以得到视频资源所在的网址（URL） 2. 获得视频链接 *蓝色的字和链接可以直接跳转(背景不是灰色的) a) 对于某些下载器，视频的网址就是视频下载链接（见下you-get） b) IDM浏览器插件（可以自动捕捉页面的多媒体资源并提示，和IDM下载器配套使用） 注意：浏览器扩展依托于浏览器本身的插件市场，需要到对应的市场（网页）下载 谷歌内核浏览器 谷歌浏览器 Edge for Chrome 建议使用 可以在这里下载各种谷歌内核插件：https://www.crx4chrome.com/ IDM插件：ngpampappnmepgilojfohadhhmbhlaek.crx Edge内核浏览器 不建议使用 即可下载插件（注意看插件类别——Edge插件） 此类插件安装后无需更多设置。 c）Tampermonkey油猴脚本插件（默写脚本程序可以直接获取下载链接）、 油猴脚本是一个脚本程序的管理工具，脚本要单独下载。 插件下载：Tampermonkey (谷歌插件) 文件名：dhdgffkkebhmkfjojejmpbldmpobfkfo-4.10-Crx4Chrome.com.crx 将文件拖到扩展安装页面，插件安装完后到Greasyfork下载脚本使用 Greasyfork脚本下载：https://greasyfork.org/zh-CN/scripts 我的脚本推荐：我的脚本备份 d ) 部分视频可以直接在视频画面右键保存（可能需要浏览器支持）。 可以尝试一下，在视频播放的时候在视频画面上右键，可能支持直接保存。 3. 使用下载器下载 a) Internet Download Manager下载器 特色：多线程下载较大提高下载速度,配合浏览器插件可以捕获网页视频。 （需要在设置里设置，单个线程速度往往只有几十 kb/s ，多线程叠加）。 1.首先安装IDM Internet Download Manager 官网 2.进行设置 打开IDM的界面之后，点击菜单栏里的选项按钮。 点击添加浏览器将自己常用的浏览器添加进去，要找到浏览器的安装目录里的exe 启动程序喔。 其他可以自行设置 3.插件配置（谷歌内核浏览器） IDM插件下载（参考 2.获得视频链接） b) you-get 自动识别+下载（ Python第三方库） 特点：适合直接下载国内主流视频网站的视频。 可以先参考此文You-get中文说明（建议阅读） 首先是安装Python3 Python 3 点击进入官网下载 点击Download Python 下载下来之后直接双击安装即可 安装FFmpeg FFmpeg 点击进入官网下载 将下载的FFmpeg的压缩文件解压到自己放程序的目录里。 设置环境变量使得计算机的cmd程序可以直接调用此程序 环境变量添加方法： https://blog.csdn.net/yy3097/article/details/51063950 安装you-get 按下Win+X，再按C，调出命令提示符cmd 直接输入 pip install you-get 使用 直接输入you-get www.XXX.XXX即可下载 www.XXX.XXX为观看视频的URL 当然you-get还支持非常多的其他参数，这里就不详说了 c ) 使用特别的程序直接下载 中国大学MOOC（Window应用商店） 已失效 可直接下载各科视频 哔哩哔哩动画（Window应用商店） 可直接缓存视频和弹幕 优酷，爱奇艺等客户端 …… 小建议 视频下载的方法非常多，各种方法适用于不同的场景 但是最重要的其实是检索能力，这些工具大都可以直接通过各种搜索引擎直接检索到 可以简单地以XX视频 下载等关键词在Bing &amp; 百度 上直接搜索 当然这可能会花费相当多的时间，但是全部搞明白之后就会对下载有更多的门路和理解","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"多媒体","slug":"科技/多媒体","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E5%A4%9A%E5%AA%92%E4%BD%93/"}],"tags":[{"name":"分享","slug":"分享","permalink":"https://yuanz1949.github.io/tags/%E5%88%86%E4%BA%AB/"},{"name":"工作流","slug":"工作流","permalink":"https://yuanz1949.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81/"},{"name":"视频","slug":"视频","permalink":"https://yuanz1949.github.io/tags/%E8%A7%86%E9%A2%91/"}]},{"title":"PDA培养基","slug":"PDA培养基","date":"2020-05-09T03:17:18.000Z","updated":"2020-05-09T03:17:18.000Z","comments":true,"path":"科技/生物/PDA培养基/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E7%94%9F%E7%89%A9/PDA%E5%9F%B9%E5%85%BB%E5%9F%BA/","excerpt":"自己动手做，熟能生巧 ——苑长","text":"自己动手做，熟能生巧 ——苑长 PDA培养基 简介📘 制备✋ 1.准备材料（此为1LPDA培养基的量，请按需要照此比例增减） 2.配置PDA培养基溶液 3.分装与灭菌 4.倒平板 一点提醒👨‍🔬 一点图片 PDA培养基 简介📘 Potato Dextrose Agar 马铃薯 葡萄糖 琼脂 一种半合成培养基，既有一些天然的有机物质，又有一些成分简单或明确的化合物。 琼脂又称琼胶或洋菜，是由海藻加工而成。 其化学性质稳定一般微生物均不能分解利用。 它在95℃热水中溶化成溶胶，冷却到45℃以下时又重新凝固，常用它作为凝固剂。 如果是要制备液体PDA培养基，只要将如下教程中和琼脂和倒平板相关的略去即可。 制备✋ 1.准备材料（此为1LPDA培养基的量，请按需要照此比例增减） 1L PDA溶液大概可以倒 40个 1/3深的中型平板 200g 马铃薯(削成薄片) 20g 葡萄糖 15~20g 琼脂 1.2L 蒸馏水 电子天平 3个小烧杯 1个大烧杯 4个250ml三角瓶 若干橡皮筋 4张封口膜(报纸/纱布也行) 超净台 玻璃棒 高压灭菌锅 大纱布 平板若干 称量纸若干 加热用的锅 药匙 2.配置PDA培养基溶液 向锅中加入1L的水和200g的马铃薯薄片，加热煮沸，注意安全。 煮到马铃薯薄片容易被玻璃棒戳破为止，然后停止加热。 （不建议盖上锅盖，注意匀速搅拌，防止淀粉形成太多泡沫！） 将纱布折叠出8层(或更多层)，贴附在锅口处，也可以悬在烧杯上。 将锅内的悬浊液慢慢过滤进烧杯里，此时注意用烧杯刻度估计出滤液的大致体积T。 锅剩下的滤渣加蒸馏水清洗过滤（此时注意加入的水的体积与T之和不能大于1L，自己把握）。 剩下的土豆泥顺势用纱布包住，挤压出剩液，此时把烧杯里的溶液补到1L。 每个250ml 的三角瓶放入 5g 琼脂和5g 葡萄糖。 液体培养基无需加入琼脂 3.分装与灭菌 将上述溶液每个 250ml 分装到三角瓶内，用玻璃棒搅匀，初步溶解后用封口膜和橡皮筋封好。 用报纸把平板包起来。 将四个三角瓶和用布或报纸包好的平板放入高压灭菌锅中灭菌。 参数为 121度 ，20 min ，液体灭菌。 在快要完成灭菌前 20min ，开无菌操作台的紫外灯灭菌。 高压灭菌锅工作完后，取出所有物件放在超净台上，打开紫外灯和通风装置，放置5min。 （在台上将平板拿出，垒好。注意：不可在紫外灯开启时操作） 液体培养基到此就OK了 4.倒平板 关闭紫外灯，开始欢乐地倒平板吧。 倒之前请在水平平面上摇匀培养基。倒的量自己把握，一般占培养基高度的1/3。 倒完一个盖上一个（也可以盖一半来防止蒸汽凝结），三角瓶用完一瓶开一瓶。 全部倒完后，开紫外灯冷却培养基20min。最后将所有平板打包冷藏。 没倒完的三角瓶内的溶液千万不要直接倒洗手池里，找袋子包起来扔垃圾桶。 一点提醒👨‍🔬 琼脂加入的量取决于琼脂的品质，品质好的15g就够了，品质差的应适当增加。 另外，在夏天气温较高时，适当增加用量。 高压灭菌锅在使用前要注意使用前要加蒸馏水到中央小孔相平的水位。 外面的集液装置也要注意不要超过“高”那条线；大筐放下，小筐放上。 PDA培养基溶液勿倒在下水道里，琼脂凝固后会堵住下水道！ 紫外灯开启时不要在附近！ 有任何疑问请询问老师或者学长学姐，切勿擅自操作喔！ 一点图片 本文里的所有图片都是原图喔 收藏直接保存就可","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"生物","slug":"科技/生物","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E7%94%9F%E7%89%A9/"}],"tags":[{"name":"实验","slug":"实验","permalink":"https://yuanz1949.github.io/tags/%E5%AE%9E%E9%AA%8C/"}]},{"title":"Blender-Facebuilder插件介绍与插件导入bug处理","slug":"Blender-Facebuilder插件介绍与插件导入bug处理","date":"2020-05-09T03:17:18.000Z","updated":"2020-05-09T03:17:18.000Z","comments":true,"path":"科技/多媒体/Blender-Facebuilder插件介绍与插件导入bug处理/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E5%A4%9A%E5%AA%92%E4%BD%93/Blender-Facebuilder%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%8F%92%E4%BB%B6%E5%AF%BC%E5%85%A5bug%E5%A4%84%E7%90%86/","excerpt":"Blender 牛~","text":"Blender 牛~ Facebuilder是啥😵 让我们开始吧🏃 安装插件（解决我碰到的小BUG）🏗 导入 报错与解决⚠️ 解决 小试牛刀🔪 Facebuilder是啥😵 FaceBuilder add-on for Blender, just as its sibling for Nuke, can help with building 3D models of human faces and heads using a couple of photographs. With FaceBuilder you don’t need to be an experienced 3D modeller to create a quality 3D model with clean topology. You start with getting a few photos with neutral face expression taken from different angles and then place a model on each of them to build a head or a face model. You can modify the model without leaving Blender with the procedural approach, so whenever you want to tweak something, the changes you’ve applied to the model will be applied again. The resulting model can be used for sculpting, animation or anything else inside Blender. You can also export the model from Nuke and Blender for further modifications in any other 3D software, for example for rigid-geometry tracking with GeoTracker or for tracking of facial gestures with FaceTracker in Nuke. @Facebuilder官网，https://keentools.io/facebuilder 如上所述 Facebuilder是一个可以用几张照片快速构建人头的3D建模软件(如Blender)的插件(add-on)。 听起来就很不错不是么。 让我们开始吧🏃 如果要开启下面的内容需要安装Blender，同时这个插件笔者在安装的时候出现了一个BUG(如果你下的是新版的话应该就不会有这个问题啦)。 安装插件（解决我碰到的小BUG）🏗 此BUG出现在Facebuilder1.5.7（Beta）里，构建后显示为Version 2.0.2这个版本。 可在官网下载插件的安装文件。 导入 首先调出导入插件的文件对话框，如下图操作即可。 选中下载好的压缩包，确定导入插件。我们可以看到插件的信息面板多了几个按钮，其实是因为这次导入其实只导入了插件的外壳，还有一个包要额外安装。先下载离线包，然后点install from disk导入即可。 报错与解决⚠️ 启用插件(就是插件前面的复选框勾上就好啦)，我们会发现插件启动后，但是插件的信息面板报了错，提示我们去查看系统控制台，这个时候我们调出系统控制台。 可以看到如下图的报错： No module named ‘pykeentools’ 如果读者们熟悉Python，就可以知道这个其实是Python的语法和报错，说的也很直白，就是没有模块叫做‘pykeentools’。那我们明明安装了插件，为啥没有没找到这个包呢。 首先我们理一下什么时候会出现这个报错： 你的确没去装这个包（明显我们尝试了，不是这个问题） 装了没装上或者装错了（这个有可能，我们一般比较菜，可能会操作错误） 点错了按钮，或者漏装了文件 程序猿代码写错了（也就是默认你没出错，是程序猿的锅） 包没有放到程序猿想要放到位置，代码写错了 我们可以看到上面的报错里有一些文件的地址，就像下面的图片一样： 那些地址指向的文件，实际上就是导入插件时工作的Python文件，而且是和报错相关的文件，我们去这个地址瞅瞅。插件结构如下： 我们会发现报错的文件位于我们后面才安装的包里，也就是blender_independert_packages里面的文件，其实这里就说明包的确导入了，但是没有被识别到。 好像有了些眉目，首先文件的确是在的，但是没被找到。回过头看报错，可以知道首次触发报错的是一个叫做loader.py的文件。这就有意思了，刚好我们就是导入(装载器，loader)的错误。 打开loader.py文件，检索一下就找到了import pykeentools 语句，这正是报错的那条导入模块的语句。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import sysimport osfrom .config import *from .install import is_installed__all__ = ['loaded', 'module']def _do_pkt_shadow_copy(): # 这里是创建着色器的缓存目录 import tempfile # 创建完后会返回这个缓存目录的地址 import shutil # 我们的插件也会被复制到这个目录里 shutil.rmtree(SHADOW_COPIES_DIRECTORY, ignore_errors=True) os.makedirs(SHADOW_COPIES_DIRECTORY, exist_ok=True) shadow_copy_base_dir = tempfile.mkdtemp(dir=SHADOW_COPIES_DIRECTORY) shadow_copy_dir = os.path.join(shadow_copy_base_dir, 'pykeentools') shutil.copytree(pkt_installation_dir(), shadow_copy_dir) return shadow_copy_dirdef _add_pykeentools_to_sys_path(): # 添加插件到环境变量中 if os_name() == 'windows': pkt_directory = _do_pkt_shadow_copy() else: pkt_directory = pkt_installation_dir() pkt_lib_directory = os.path.join(pkt_directory, RELATIVE_LIB_DIRECTORY) # 获取包的安装目录 if pkt_lib_directory not in sys.path: sys.path.append(pkt_lib_directory) # 添加包的目录到系统的环境变量里def loaded(): # 判断插件是否在系统的模块里 return 'pykeentools' in sys.modules# TODO add custom exceptions with helpful error message# TODO check loaded pykeentools version &gt; MIN_VERSIONdef module(): # 这里是整个文件的核心，会调用上面三个函数来完成缓存目录的创建和插件导入 \"\"\" A function to load pykeentools library :raises ImportError :return: pykeentools module \"\"\" if not loaded() and is_installed(): _add_pykeentools_to_sys_path() import pykeentools # 导入pykeentool包 return pykeentools 代码不是非常的复杂，大概看一下变量的英文就可知道是如何运转的了。 代码获取插件的安装目录pkt_directory，然后调用系统包os把插件的目录添加到环境变量sys.path.append(pkt_lib_directory)，然后再导入pykeentools包import pykeentools 那问题来了，包的确安装到位置了（在目录里看到了pykeentools的文件夹其实就是包的本质），代码的确也写了导入这个包的指令了，那问题出在哪呢？自然应该是环境变量出问题了。 环境变量是什么呢，其实就是一个地址目录。如果一个程序文件调用另一个程序文件，只给了文件名来调用，如果被调用的程序文件不在这个文件的同一个文件夹，也不在环境变量里，系统就会报错，找不到该文件。 有点像你在一个房间里叫：张三~张三~，那其他人肯定先看看这个房间里(同一个文件夹)张三在不在，如果不在就会去某些被允许去的地方(环境变量)再去找，找不到自然就报错了。 那我们先看看导入插件后的环境变量怎么样了吧。由于是Python，实现其实很简单，进入Blender的scripting工作区，就可以看到左下角的一个终端界面。 输入如下图箭头的两个指令： import sys #导入sys系统包，里面有可以调用系统命令的代码 sys.path #调用sys包里的path方法，就可以直接显示出系统变量啦 仔细一看最后一排的地址（环境变量按照，来分割不同的地址），和我们的插件的位置有些相似，却有些许不同。 去瞅瞅！ 可以看到，基本上插件的内容都被复制到这里，和之前的loader.py的代码时相符的。但是仔细一看内部文件夹的地址，咦，好像有些不对劲。 1234567#程序导入系统的环境变量如下：C:\\\\Users\\\\WOODYUAN\\\\AppData\\\\Local\\\\Temp\\\\pykeentools_shadow_copies\\\\tmpu0jh0wpb\\\\pykeentools\\\\pykeentools\\\\pykeentools#但是实际的文件夹的构造如下：C:\\\\Users\\\\WOODYUAN\\\\AppData\\\\Local\\\\Temp\\\\pykeentools_shadow_copies\\\\tmpu0jh0wpb\\\\pykeentools\\\\pykeentools==_installation==\\\\pykeentools 显而易见，你既可以认为是环境变量导入是漏了_installation，也可以认为是文件夹多了_installation。 这个差异导致系统找不到这个文件夹，自然找不到pykeentools这个包。 给loader.py的代码添加了print语句来输入变量，也进一步证实了推测，的确少了_installation。 解决 由于Temp里的文件是从插件目录里复制过来的，我们修改插件目录里的文件夹就好啦。 1C:\\Users\\WOODYUAN\\AppData\\Roaming\\Blender Foundation\\Blender\\2.82\\scripts\\addons\\keentools_facebuilder\\blender_independent_packages\\pykeentools_loader\\pykeentools 进入上述目录里，把里面的pykeentools_installation文件夹改名成pykeentools，然后重启插件。 可以快捷键Win+R，然后输入%appdata%，就可以跳转到自己的C:\\Users\\WOODYUAN\\AppData\\Roaming\\文件夹，然后再按照上面的路径找到插件修改即可） 修改代码，由于可能是_installation的下划线被Python处理掉了导致整个字符都没了，而且该处理不在loader.py里，笔者就没有尝试修改代码了，提个给程序员提一个issue让他们自己解决吧。 如果你先禁用插件再启用，看到了类似这样的版本信息Version 2.0.2, built Apr 30 2020, 17:57:14。 恭喜你，BUG修复啦。 小试牛刀🔪 安装成功后，在建模的窗口的右侧，就有一个叫做FaceBuilder的选项，点一下，插件就可以用啦。 点一下Create a new head就会出现一个默认的人头啦。","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"多媒体","slug":"科技/多媒体","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E5%A4%9A%E5%AA%92%E4%BD%93/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://yuanz1949.github.io/tags/Python/"},{"name":"Blender","slug":"Blender","permalink":"https://yuanz1949.github.io/tags/Blender/"},{"name":"3D","slug":"3D","permalink":"https://yuanz1949.github.io/tags/3D/"}]},{"title":"Blog咕咕咕","slug":"Blog咕咕咕","date":"2020-05-04T14:59:56.014Z","updated":"2020-05-04T14:59:56.014Z","comments":true,"path":"生活/搞事情吖/Blog咕咕咕/","link":"","permalink":"https://yuanz1949.github.io/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/Blog%E5%92%95%E5%92%95%E5%92%95/","excerpt":"咕咕~咕咕咕~咕咕 ​ —— 一只鸽子苑长","text":"咕咕~咕咕咕~咕咕 ​ —— 一只鸽子苑长 目前在写新建了文件夹的项目 🐦 已经施工完毕啦(还会修修补补的)🌾 小笔记📓 目前在写新建了文件夹的项目 🐦 持续更新@Manim源码解读 方头人手册 羚苑学者指南 我的摄影之路 我眼中的世界 江科大VPN使用指南 网站收藏夹文件嵌入网页 Anaconda之路 你也想做傻肥鱼么-网站模板构建指南 酸菜鱼毕业指南 自动电位滴定指南 江科大VPN2探索 JUSTScoreSummary-个人成绩概览 Git手册 读书笔记-生物信息学算法导论 读书笔记-Python生物信息学数据管理 如何与电脑交流 Git手册 Git手册 已经施工完毕啦(还会修修补补的)🌾 Blog咕咕咕 长期更新~~咕咕咕的~~(LTS) 我的视频下载工作流 (LTS) Blender-Facebuilder插件介绍与插件导入bug处理 PDA培养基 我使用Hexo+Github搭建Blog的经验 拿太阳做壁纸-用Python的astropy和matplotlib库处理FITS文件 这是一篇TestBlog 书签索引 (LTS) 实时信息 (LTS) 工作流索引 (LTS) 常用资源索引 (LTS) 文化作品索引 (LTS) 拿太阳做壁纸-用Python的astropy和matplotlib库处理FITS文件 小笔记📓 先把 🎏高高立起~ 微信公众号 汉化 开发科学软件、编译 小竞赛的概念 *进化树 溶液配制（占比 方法等） 备份网上数据 AI 搭服务器 日历app 爬虫 天气 通知 RSS BlogGUI","categories":[{"name":"生活","slug":"生活","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"搞事情吖","slug":"生活/搞事情吖","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/"}],"tags":[{"name":"计划","slug":"计划","permalink":"https://yuanz1949.github.io/tags/%E8%AE%A1%E5%88%92/"}]},{"title":"工作流索引","slug":"工作流索引","date":"2020-04-29T15:45:25.000Z","updated":"2020-04-29T15:45:25.000Z","comments":true,"path":"索引/工作流索引/工作流索引/","link":"","permalink":"https://yuanz1949.github.io/%E7%B4%A2%E5%BC%95/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%B4%A2%E5%BC%95/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%B4%A2%E5%BC%95/","excerpt":"一通操作猛如虎 ——佚名","text":"一通操作猛如虎 ——佚名 简介 工作流 本Blog网站工作流 资源获取工作流 网上乱逛工作流 简介 这里介绍的都是苑长自己使用的工具和网站。 涉及方方面面，可以靠着工作流来完成各种任务。 请注意一下的工作流是依托于性能非常一般的笔记本电脑(普通轻薄本)和性能还可以的手机构建的。 工作流 本Blog网站工作流 我使用Hexo+Github搭建Blog的经验 资源获取工作流 我的视频下载工作流 网上乱逛工作流 拿太阳做壁纸-用Python的astropy和matplotlib库处理FITS文件","categories":[{"name":"索引","slug":"索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/"},{"name":"工作流索引","slug":"索引/工作流索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%B4%A2%E5%BC%95/"}],"tags":[{"name":"分享","slug":"分享","permalink":"https://yuanz1949.github.io/tags/%E5%88%86%E4%BA%AB/"}]},{"title":"持续更新@Manim源码解读","slug":"持续更新-Manim源码解读","date":"2020-04-29T12:23:34.000Z","updated":"2020-04-29T12:23:34.000Z","comments":true,"path":"科技/信息技术/持续更新-Manim源码解读/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0-Manim%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/","excerpt":"数学之美，编程实现之 ——苑长 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"数学之美，编程实现之 ——苑长 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 什么是Manim Manim的安装 解决安装的问题👨‍🏭 Manim代码解读 Manim 其实蛮早就接触了3Blue1Brown的视频的. 感叹于视频传达的让人赞叹的数学之美的同时, 视频制作的方式也是一个亮点. 什么是Manim Manim is an animation engine for explanatory math videos. It’s used to create precise animations programmatically, as seen in the videos at 3Blue1Brown. 3b1b/manim: Animation engine for explanatory math videos (github.com) Manim的安装 解决安装的问题👨‍🏭 [事后补丁]此问题可能和Anaconda相关, 不建议修改源代码, 详情参见下面的连接 by YuanZ1949 · Pull Request #1240 · 3b1b/manim @myenv 我的环境 Window 10 ×64(19041.508) Python 3.7.9 [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32 MiKTeX-XeTeX 4.0 (MiKTeX 20.7) dvisvgm 2.8.1 pycairo 1.19.1 在运行需要 Tex 处理的场景时,便出了错, 通过查看 Traceback 给出的出错的语句, 加入如下的调试代码: 12345678# manimlib/utils/tex_file_writing.py -&gt; def tex_to_dvi(tex_file)import os... print(f'[&#123;commands[0]&#125;]: '+\" \".join(commands)) # my code exit_code = os.system(\" \".join(commands)) print('[exit_code]: ', exit_code) # my code... 运行一下 1234567891011121314151617181920212223❯ python -m manim example_scenes.py WriteStuff -plMedia will be written to ./media\\. You can change this behavior with the --media_dir flag.Writing \"\\centering This is a some text 这是一段话\" to ./media\\Tex\\127450809ce5bec4.tex[xelatex]: xelatex -no-pdf -interaction=batchmode -halt-on-error -output-directory=\"media/Tex\" \"media/Tex/127450809ce5bec4.tex\" &gt; nulxelatex: major issue: So far, no MiKTeX administrator has checked for updates.[exit_code]: 1Traceback (most recent call last): File \"D:\\manim\\manimlib\\extract_scene.py\", line 155, in main scene = SceneClass(**scene_kwargs) File \"D:\\manim\\manimlib\\scene\\scene.py\", line 75, in __init__ self.construct() File \"example_scenes.py\", line 102, in construct tex_to_color_map=&#123;\"text\": YELLOW&#125; File \"D:\\manim\\manimlib\\mobject\\svg\\tex_mobject.py\", line 148, in __init__ self, self.arg_separator.join(tex_strings), **kwargs File \"D:\\manim\\manimlib\\mobject\\svg\\tex_mobject.py\", line 44, in __init__ self.template_tex_file_body File \"D:\\manim\\manimlib\\utils\\tex_file_writing.py\", line 22, in tex_to_svg_file dvi_file = tex_to_dvi(tex_file) File \"D:\\manim\\manimlib\\utils\\tex_file_writing.py\", line 76, in tex_to_dvi \"See log output above or the log file: %s\" % log_file)Exception: Xelatex error converting to xdv. See log output above or the log file: media/Tex/127450809ce5bec4.log 在 .\\media\\Tex\\ 文件夹中仅有 *.tex 文件, exit_code 为 1 也说明 xelatex 命令没有运行成功 将 xelatex 命令单独在 cmd 终端运行一下, 测试单独的xelatex 程序的工作情况 12345678910111213❯ xelatex -no-pdf -interaction=batchmode -halt-on-error -output-directory=\"media/Tex\" \"media/Tex/127450809ce5bec4.tex\"This is XeTeX, Version 3.14159265-2.6-0.999992 (MiKTeX 20.7)entering extended modexelatex: major issue: So far, no MiKTeX administrator has checked for updates.❯ dir .\\media\\Tex\\ Directory: D:\\manim\\media\\TexMode LastWriteTime Length Name---- ------------- ------ -----a--- 2020/9/29 14:14 66 127450809ce5bec4.aux-a--- 2020/9/29 14:14 22662 127450809ce5bec4.log-a--- 2020/9/29 14:14 554 127450809ce5bec4.tex-a--- 2020/9/29 14:14 696 127450809ce5bec4.xdv 可以看到 *.xdv 成功生成 ==说明 os.system() 在某些情况下不能正常工作== 同样的, 在通过 cmd 生成了 *.xdv 文件后, 在源代码里直接跳过上面那个步骤 在生成 *.svg 时又出了错误 1234567891011121314151617181920❯ python -m manim example_scenes.py WriteStuff -pl...ERROR: can't open file 'media/Tex/127450809ce5bec4.xdv' for readingTraceback (most recent call last): File \"D:\\manim\\manimlib\\extract_scene.py\", line 155, in main scene = SceneClass(**scene_kwargs) File \"D:\\manim\\manimlib\\scene\\scene.py\", line 75, in __init__ self.construct() File \"example_scenes.py\", line 102, in construct tex_to_color_map=&#123;\"text\": YELLOW&#125; File \"D:\\manim\\manimlib\\mobject\\svg\\tex_mobject.py\", line 148, in __init__ self, self.arg_separator.join(tex_strings), **kwargs File \"D:\\manim\\manimlib\\mobject\\svg\\tex_mobject.py\", line 46, in __init__ SVGMobject.__init__(self, file_name=file_name, **kwargs) File \"D:\\manim\\manimlib\\mobject\\svg\\svg_mobject.py\", line 45, in __init__ self.ensure_valid_file() File \"D:\\manim\\manimlib\\mobject\\svg\\svg_mobject.py\", line 63, in ensure_valid_file self.file_name)OSError: No file matching media/Tex/127450809ce5bec4.svg in image directory 通过查看同文件的 dvi_to_svg 函数猜测问题一致 12345678910111213141516# manimlib/utils/tex_file_writing.py -&gt; def dvi_to_svg(...) ... commands = [ \"dvisvgm\", \"\\\"&#123;&#125;\\\"\".format(dvi_file), \"-n\", \"-v\", \"0\", \"-o\", \"\\\"&#123;&#125;\\\"\".format(result), \"&gt;\", os.devnull ] print(\"[dvisvgm]: \"+\" \".join(commands)) # my code os,system(\" \".join(commands)) ... 使用 cmd 单独调用下面的语句 1dvisvgm \"media/Tex/127450809ce5bec4.xdv\" -n -v 0 -o \"media/Tex/127450809ce5bec4.svg\" 得到 *.svg 文件, 再次确认 通过查询一些替代方案, 得知 subprocess 可以替代 os 来执行语句 replacing-os-system@Python3/library @manimlib/utils/tex_file_writing.py import subprocess … exit_code = subprocess.call(&quot; &quot;.join(commands)) # replace os.system() 12345678910111213141516171819202122232425❯ python -m manim example_scenes.py WriteStuff -plMedia will be written to ./media\\. You can change this behavior with the --media_dir flag.Writing \"\\centering This is a some text 这是一段话\" to ./media\\Tex\\bc14f296989ffd14.tex[xelatex]: xelatex -no-pdf -interaction=batchmode -halt-on-error -output-directory=\"media/Tex\" \"media/Tex/bc14f296989ffd14.tex\" &gt; nulThis is XeTeX, Version 3.14159265-2.6-0.999992 (MiKTeX 20.7)entering extended modexelatex: major issue: So far, no MiKTeX administrator has checked for updates.[exit_code]: 0[dvisvgm]: dvisvgm \"media/Tex/bc14f296989ffd14.xdv\" -n -v 0 -o \"media/Tex/bc14f296989ffd14.svg\" &gt; nulWriting \"This is a some\" to ./media\\Tex\\624b4b31bda75e7f.tex......File ready at D:\\manim\\media\\videos\\example_scenes\\480p15\\WriteStuff.mp4Played 3 animations❯ dir .\\media\\Tex\\ Directory: D:\\manim\\media\\TexMode LastWriteTime Length Name---- ------------- ------ -----a--- 2020/9/29 14:36 66 0e2ea6f9317688de.aux-a--- 2020/9/29 14:36 24285 0e2ea6f9317688de.log-a--- 2020/9/29 14:36 11001 0e2ea6f9317688de.svg-a--- 2020/9/29 14:35 587 0e2ea6f9317688de.tex-a--- 2020/9/29 14:36 624 0e2ea6f9317688de.xdv... All done~ 我的修改如下: 123456789101112131415161718192021222324252627diff --git a/manimlib/utils/tex_file_writing.py b/manimlib/utils/tex_file_writing.pyindex d8bbdad1..a46c3087 100644--- a/manimlib/utils/tex_file_writing.py+++ b/manimlib/utils/tex_file_writing.py@@ -1,5 +1,6 @@ import os import hashlib+import subprocess from pathlib import Path@@ -63,7 +64,10 @@ def tex_to_dvi(tex_file): \"&gt;\", os.devnull ]- exit_code = os.system(\" \".join(commands))+ exit_code = subprocess.call(\" \".join(commands)) if exit_code != 0: log_file = tex_file.replace(\".tex\", \".log\") raise Exception(@@ -95,5 +99,6 @@ def dvi_to_svg(dvi_file, regen_if_exists=False): \"&gt;\", os.devnull ]- os.system(\" \".join(commands))+ subprocess.call(\" \".join(commands)) return result Manim代码解读 Manim","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"信息技术","slug":"科技/信息技术","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"视频","slug":"视频","permalink":"https://yuanz1949.github.io/tags/%E8%A7%86%E9%A2%91/"},{"name":"Python","slug":"Python","permalink":"https://yuanz1949.github.io/tags/Python/"},{"name":"manim","slug":"manim","permalink":"https://yuanz1949.github.io/tags/manim/"}]},{"title":"拿太阳做壁纸-用Python的astropy和matplotlib库处理FITS文件","slug":"拿太阳做壁纸-用Python的astropy和matplotlib库处理FITS文件","date":"2020-04-28T01:51:46.000Z","updated":"2020-04-28T01:51:46.000Z","comments":true,"path":"科技/空天/拿太阳做壁纸-用Python的astropy和matplotlib库处理FITS文件/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E7%A9%BA%E5%A4%A9/%E6%8B%BF%E5%A4%AA%E9%98%B3%E5%81%9A%E5%A3%81%E7%BA%B8-%E7%94%A8Python%E7%9A%84astropy%E5%92%8Cmatplotlib%E5%BA%93%E5%A4%84%E7%90%86FITS%E6%96%87%E4%BB%B6/","excerpt":"如果你想要 请DIY吧 ——苑长","text":"如果你想要 请DIY吧 ——苑长 机缘巧合🍀 数据的获取📑 让我们先Bing一下⌨️ 拿下数据🗄 开始处理吧 再Bing一下🔔 Astropy库🔭 你好~太阳☀️ 修改色阶🌈 GIMP处理 后记 机缘巧合🍀 之前网上闲逛的时候，突然想起 Edge for Chrome 浏览器的 网页App功能 ，又捣鼓了一番。而我之前就装了微博（主要是看航天的微博），便打开测试一下。 于是就看到了一篇微博：新科学家杂志上刊登的高清太阳日冕图，一下子就被这篇文章的封面的照片吸引住了。 配色醒目，细节突出，层次感非常好，而且还是太阳（也许是一种对太阳的特殊感觉,赞美太阳!）。我便想着搞到高清的图片做壁纸，但是一番搜索，并没有找到（原论文也没有）高清的大图。 由于有这方面的视界，顺其自然地便想着自己着手做了。因为大部分的天文数据都是开放的，一些处理数据的图像软件也是有的。于是和Bing一起&lt;(￣︶￣)↗[GO!] 数据的获取📑 有了微博的那张图(就是文章开头的那张图啦)作参考，直接搜索引擎就好啦，基本就是先找到新闻源，然后找到这个项目的相关信息，最后下到数据，作图即可。 让我们先Bing一下⌨️ 可以得知是新科学家杂志发表的一篇新闻，那么直接检索新科学家杂志 太阳来看看有没有有用的消息。发现好像并没有太多相关的内容,那毕竟是外网的内容,我们直接英文走起。 检索新科学家杂志就可以从百度百科里找到它的英文名New Scientist(这里建议还是要搜一下的, 毕竟专有名词可能会比较特殊), 直接检索New Scientist sun我们就可以看到结果啦。 点开后直接就可以看到这篇文章的封面图了，我这就只放个链接吧。 Weird magnetic threads in sun’s corona seen for the first time Read more 文章带的图片清晰度不够，所以还是要尝试自己做。另外可惜的是要订阅才能看到全文 收费的不要 看来得另辟蹊径。不过仔细看了一下图片的来源写着NASA High Resolution Coronal Imager，有了些眉目，这应该就是来源了。直接一个Bing检索这个词，结果非常amazing. 基本可以得知这个是缩写为Hi-C项目的成果了,点开右排第一个链接一探究竟. 一通阅读，可以得知这是一个探空火箭项目🚀 ，通过探空火箭Black Brant IX发射Hi-C太空望远镜，把Hi-C送入亚轨道，进行短暂的弹道飞行(考虑了空气阻力的抛物线轨迹)并在滑行段(只受引力阶段)对太阳成像。相当于用火箭大力地把望远镜从地球表面抛起，望远镜可以依靠惯性冲到百公里高度。 这个高度已经脱离 浓密大气层了(事实上绝大部分气象和主要影响可见光观测的大气成分都集中在地表以上几公里范围内的对流层；100km高度为国际公认的太空界面——卡门线) The experiment reached a maximum velocity of Mach 7 and max altitude of 264 km. The experiment collected 345 seconds of EUV science images. 实验达到的最大速度为七马赫(七倍音速)，最大高度264千米，收集了345s的极紫外科学图像 资料来源：Media Resources: NASA Telescope’s Sharpest-Ever Images of Corona Catch Glimpse of Energy Source in the Solar Atmosphere 下图来自：Hi-C 项目NASA页面的探空火箭介绍子菜单 我做了简单的注释，原链接里还有更多的项目实施相关的图片。 望远镜的全称叫The High-Resolution Coronal Imager，也是该项目的名字，通过检索这个名字找到了一篇期刊文章：The High-Resolution Coronal Imager, Flight 2.1 里面介绍了望远镜的情况。下图来自这篇文章，图解了望远镜的结构和实验组件： Hi-C火箭发射视频: 既然项目找到了，还有了大致的了解了，我们继续吧。 拿下数据🗄 简单地浏览主页的菜单，第二个一级菜单就是Hi-C DATA PRODUCTS——Hi-C 数据产品看这名字就知道是我们想要的了。 二级菜单介绍： DATA POLICY &amp; PRODUCTS： Hi-C项目的简要介绍,引用数据规范，数据库链接 Hi-C 1 ：数据库 Hi-C 2.1：数据库 DATA ANALYSIS RESOURCES 官方的数据使用介绍，图像处理手册 获取图像只要点击数据库链接就好啦(通过数据库的介绍图片，可知是Hi-C 2.1是我们找的照片的数据源)。 有用户手册，也有各种不同的打包文件。倒数第二个是AIA和IRIS的观测数据，应该是用于和Hi-C拍摄的图像做对比分析的。这里可以随便选择包进行下载，也无所谓哪个观测设备拍的，毕竟只是做壁纸的话，对数据的要求并不高。这里我直接下了AIA的数据了(介绍了半天居然没用Hi-C的数据，哈哈哈哈) 相关项目的介绍： 1.AIA:太阳大气成像仪（Atmospheric Imaging Assembly）,为SDO卫星的一个成像部件。 2.IRIS:表面区域成像光谱仪（the Interface Region Imaging Spectrograph），SMEX卫星。 开始处理吧 下载到的格式为FITS,是个没见过的格式，这个时候又到了Bing的时候啦。 不过英文好的话，也可以直接阅读数据库里的英文用户手册，按照上面的做应该也是可以处理的。但是考虑到涉及一些专业的软件，这里我们还是通过搜索引擎来帮助我们，看看有没有更适合小白的方法 :happy: 。 再Bing一下🔔 检索词就FITS、处理、格式、Python之类的，相信可以得到比较好的结果。 这是搜到的较详细的FITS格式的介绍：在Python中FITS格式文件数据的读取 这篇文章详细的介绍了FITS格式的结构内容，以及一个叫做Astropy的处理天文数据的Python库。 一个崭新的大门出现了，一个新的世界出现了。 Astropy库🔭 由于是Python的第三方库，需要安装Python, 可以参考这篇文章 Anaconda之路 如果是直接安装的Python并且加入了环境变量的话, 按Win+R, 在弹出的框框里输入cmd，回车,在弹出的cmd界面输入： pip install astropy 安装搞定！ 你好~太阳☀️ 通过查阅Astropy的文档，有专门的 FITS 格式的读取模块 Win+R,在弹出的框框里输入cmd后,在弹出的命令提示符界面输入ipython调出交互式python (下面的代码框里的 #后面的字符为注释, CTRL+C时无需复制) 参照着文档的描述，开始读取FITS文件。以下内容来自我写的Astropy处理FITS.py，源文件可直接在左边蓝色的字符上右键另存为即可。主要是我个人的理解和对官方文档的翻译，所以为了方便大家对比，这里推荐一位大佬编写的Astropy的中文文档 ，右键另存为即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233# astropy库fits模块读取FITS文件# 参考翻译自：https://docs.astropy.org/en/stable/io/fits/index.html# 用 # 标注的主要是我对代码的注释# 用 ''' ''' 包围的主要是官方的说明和代码对应的输出结果# 这两种标记都是用来说明的#-------------导入库---------------# 将astropy.io这个库导入并用‘fits’指代，‘fits’换成其他名字也是莫得问题的from astropy.io import fits #-------------打开文件---------------# 这个方法可以直接在线调用官方的示例图片,这里用不上，注释掉# fits_image_filename = fits.util.get_testdata_filepath('test0.fits') # 我的本地FITS文件的文件名字符串赋给一个变量，方便后面调用fits_image_filename = 'aia.lev1.2018-05-29T185610Z.172929830.image_lev1.fits' # 调用astropy.io.open()打开文件，这里终端打开的文件夹就是图片所在位置，所以直接调用文件名就可以打开# 也可以使用如下的open()参数，mode='update'，实时更新'''代码示例with fits.open('original.fits', mode='update') as hdul: # Change something in hdul. # 对hdul做些修改 hdul.flush() # 把修改保存到原文件 changes are written back to original.fits# 关闭文件将会保存修改，并阻止后面的写入# closing the file will also flush any changes and prevent further writing'''# 默认是'只读'模式读取文件hdul = fits.open(fits_image_filename) # 这里提供了另一种方式来读取文件# with层级下的代码执行完后，会自动回收，也就可以直接关闭文件了'''代码示例with fits.open(fits_image_filename) as hdul: hdul.info() ···'''print(type(hdul))'''输出结果&lt;class 'astropy.io.fits.hdu.hdulist.HDUList'&gt;'''#-------------读取文件--------------''' [HDUList的说明]hdul是一个HDUList对象，即一个看起来像列表的 HDU 对象的集合. an HDUList which is a list-like collection of HDU objects.HDU (Header Data Unit，头部数据集合) 是FITS文件构造中最高层级部分,is the highest level component of the FITS file structure, 由头部数据和数据矩阵或者是数据表组成。consisting of a header and (typically) a data array or table.'''# 调用HDUList.info()方法来查看文件概况hdul.info()'''输出结果Filename: aia.lev1.2018-05-29T185610Z.172929830.image_lev1.fitsNo. Name Ver Type Cards Dimensions Format 0 PRIMARY 1 PrimaryHDU 6 () 1 1 CompImageHDU 190 (4096, 4096) int16'''# 可见这个文件包含有两个HDU数据集，索引号为0的那个HDU，有六个说明用的Cards# 维度为空，所以初步推断是文件的说明部分。# 索引号为1的那个HDU，有190个Cards,说明含有很多参数# 维度为(4096,4096),数据类型为int16，这应该就是我们想要的太阳的图片数据了# 而且Type属性也说了第二个HDU是CompImageHDU，石锤。# astropy.io.open()还可以注入其他参数实现一些其他的功能# 比如lazy_load_hdus参数，若设为'True'，文件被close()后还可以读取，数据的头部数据'''代码示例hdul = fits.open(fits_image_filename,lazy_load_hdus=False) '''# 导入大文件时，memmap参数，可以通过内存映射的方式而不一次性把文件载入内存# 默认为'True'，不过有一个问题就是文件close()后，可能还有残留的读取句柄在读取文件# 参考：https://docs.astropy.org/en/stable/io/fits/index.html#working-with-large-files'''代码示例hdul = fits.open(fits_image_filename,memmap=True) '''# FITS采用的是Fortran的风格的类型系统，不支持无符号的整数数据# astropy导入FITS文件会自动转换有符号的整数数据为无符号的整数数据，uint=False参数来控制# 参考：https://docs.astropy.org/en/stable/io/fits/index.html#unsigned-integers''' 代码示例hdul = fits.open(fits_image_filename,uint=False) '''# astropy的open()可以无障碍地打开gzip，bzip2，pkzip等压缩的FITS文件# 不过不同格式，有一些不同的限制。对于zip，open方法只会打开压缩包里的第一个FITS文件# 对于bzip2则不支持使用append和update模式来open。# 调用第一个头部数据集(HDU)的头部数据中的'COMMENT'这个Card的数据# 也可以使用索引号，hdul[0].header[4] ，不建议使用，不同文件的特定关键字位置不一样hdul[0].header['COMMENT']'''输出结果FITS (Flexible Image Transport System) format is defined in 'Astronomyand Astrophysics', volume 376, page 359; bibcode: 2001A&amp;A...376..359H'''hdul[0].header[4]'''输出结果FITS (Flexible Image Transport System) format is defined in 'Astronomy'''# 修改FITS文件，内置了一个评论和历史记录系统，也有些意思# 参考：https://docs.astropy.org/en/stable/io/fits/index.html#working-with-fits-headers# 将header传给hdr，方便后面修改属性，添加了一条历史记录和一条评论hdr = hdul[0].header'''代码示例，这里注释掉，我已经添加过了，就不再添加了hdr['history'] = 'YuanZ1949 changed this file on 2020.6.12'hdr['comment'] = 'Thanks STEM, I am very happy to know the power of sun.''''hdr # print(repr(hdr)) # 这个也可以'''输出结果SIMPLE = T / file does conform to FITS standardBITPIX = 16 / number of bits per data pixelNAXIS = 0 / number of data axesEXTEND = T / FITS dataset may contain extensionsCOMMENT FITS (Flexible Image Transport System) format is defined in 'AstronomyCOMMENT and Astrophysics', volume 376, page 359; bibcode: 2001A&amp;A...376..359HCOMMENT Thanks STEM, I am very happy to know the power of sun.HISTORY YuanZ1949 changed this file on 2020.6.12''''''代码示例，修改其他属性hdr = hdul[0].headerhdr.set('observer', 'Edwin Hubble')hdr['targname'] = ('NGC121-a', 'the observation target')hdr.comments['targname']'''hdr[:2]'''输出结果SIMPLE = T / file does conform to FITS standard BITPIX = 16 / number of bits per data pixel '''list(hdr.keys()) '''输出结果['SIMPLE', 'BITPIX', 'NAXIS', 'EXTEND', 'COMMENT', 'COMMENT', 'COMMENT', 'HISTORY']'''# 如果读取的FIST文件不是非常标准的FIST文件(这是常有的事)# 那可以使用fix工具尝试修复(仅限比较无关的差异)'''读取报错时的输出VerifyError: Unparsable card (OSCNMEAN), fix it first with .verify('fix').'''# 修复代码hdul[1].verify('fix')'''输出结果WARNING: VerifyWarning: Verification reported errors: [astropy.io.fits.verify]WARNING: VerifyWarning: Card 68: [astropy.io.fits.verify]WARNING: VerifyWarning: Card 'OSCNMEAN' is not FITS standard (invalid value string: '-nan'). Fixed 'OSCNMEAN' card to meet the FITS standard. [astropy.io.fits.verify]WARNING: VerifyWarning: Card 69: [astropy.io.fits.verify]WARNING: VerifyWarning: Card 'OSCNRMS' is not FITS standard (invalid value string: '-nan'). Fixed 'OSCNRMS' card to meet the FITS standard. [astropy.io.fits.verify]WARNING: VerifyWarning: Note: astropy.io.fits uses zero-based indexing. [astropy.io.fits.verify]'''# 读取带有图片数据的第二个HDU(hdul[1])的数据部分(.data)data = hdul[1].data# 还可以使用name来索引hdu，但是我们的文件里第二个HDU没有这个属性，就不用了'''代码示例data = hdul['某个name值'].datadata = hdul['某个name值',2].data # 同名name的第二个HDU'''# 获取数据矩阵大小data.shape'''输出结果(4096, 4096)'''# 数据的类型data.dtype.name'''输出结果'int16''''# 可以看出是numpy类型，那么就可以随意分割，查看，数学运算type(data)'''输出结果numpy.ndarray'''# 取值,取指定行列的数据的值print(data[1, 4])'''输出结果0'''# 切片,截取数据的一部分输出出来data[30:40, 10:20]'''输出结果array([[ 0, 3, 0, 0, -2, 0, 1, 0, 0, -1], [ 0, 0, -1, -1, 1, -1, 0, 1, -1, 1], [ 0, -1, -1, -1, 0, 0, -1, 1, -1, -1], [-1, 0, 0, 0, -2, 2, 0, 0, -2, 0], [ 1, 0, -2, 1, 0, 0, 0, 1, -1, -1], [-2, -1, 0, -1, -1, -2, -1, 0, -1, -1], [ 0, -1, -2, 0, 0, -1, 0, 1, -1, 1], [-3, 1, 0, 1, 1, 1, -1, -1, -2, 1], [ 0, -2, -2, -1, 0, -2, 1, 1, 1, 1], [ 0, -1, -1, -2, 0, 1, 1, 0, 2, 0]], dtype=int16)'''# The next example of array manipulation is to convert the image data from counts to flux:'''不太懂的一个操作，可能是特殊图片的处理photflam = hdul[1].header['photflam']exptime = hdr['exptime']data = data * photflam / exptimehdul.close()'''# Table数据处理(那种每个数据点是个元组的FITS文件)# 参考：https://docs.astropy.org/en/stable/io/fits/index.html#working-with-table-data# 暂且略过# 保存文件更改，调用HDUList.writeto() 方法保存'''代码示例:#这里注释掉,我下载的hdul不规范,无法保存hdul.writeto('newtable.fits')'''# 读完数据自然要关掉文件，调用close()即可hdul.close() 上面把图像数据赋值给了data这个变量，并演示了一些处理矩阵的函数。 下面就开始处理data, 图像处理参考：参考文章1;参考文章2(前面文章的汇总和翻译) 1234# 导入matplotlib绘图库from matplotlib import image # 调用图片保存函数直接将数组储存为图片image.imsave('FITS-image-out.png', data) 效果：(分辨率为原图片,想要可自行保存) 其实这里的上色采用的是默认的色阶上色的,而且这样直接保存，自定义的空间就太少了。 不过这个保存图片的imsave函数还是可以导入几个参数的，也算是弥补了一些不足。 123def imsave(fname, arr, vmin=None, vmax=None, cmap=None, format=None, origin=None, dpi=100): #Save an array as an image file. 比如里面的camp就可以调节上色的色阶。 123456# 导入pyplot库,取plt做别名from matplotlib import pyplot as plt#plt绘制dataplt.imshow(data)#plt显示绘制结果plt.show() 可以看到下方的函数说明里，imshow明显比imsave要多好多的参数，这就提供了相当多的自定义空间，不过这里还是用的初始化的设置，所以两者的导出效果是一样的。 imshow的使用可以参考这篇文章：Matplotlib imshow()函数 123456def imshow( X, cmap=None, norm=None, aspect=None, interpolation=None, alpha=None, vmin=None, vmax=None, origin=None, extent=None, shape=cbook.deprecation._deprecated_parameter, filternorm=1, filterrad=4.0, imlim=cbook.deprecation._deprecated_parameter, resample=None, url=None, *, data=None, **kwargs): 效果： 1234# 导入opencv库import cv2# 保存datacv2.imwrite(\"FITS-cv2-out.png\", data) 效果：(此为原图，可直接右键保存) 修改色阶🌈 cmap其实是colormap的缩写，指代的意思是色彩映射图。 有关于不同的cmap可以参考：matplotlib.pyplot——cmap直观理解 通过不同的色阶设置，可以得到各种各样的配色的图片。 GIMP处理 GIMP:the GNU Image Manipulation Program GNU不是Unix(GNU’s Not Unix) 图像 处理 程序 a cross-platform image editor available for GNU/Linux, OS X, Windows and more operating systems. 一个跨平台的可用于 GNU/Linux, OS X, Window和其他操作系统的图像编辑器 Whether you are a graphic designer, photographer, illustrator, or scientist, GIMP provides you with sophisticated tools to get your job done. You can further enhance your productivity with GIMP thanks to many customization options and 3rd party plugins. 无论您是平面设计师，摄影师，插图画家还是科学家，GIMP都能为您提供完善的工具来完成您的工作。 借助许多自定义选项和第三方插件，您可以使用GIMP进一步提高生产力。 总的来说就是GIMP是一个专业的开源免费的图像处理软件。 我们取上文的黑白着色和默认着色的两张导出图片，来尝试自己做壁纸。 黑白着色可见保留了相当多的中间亮度的细节。 默认着色则保留了暗部和亮部的一些细节。 通过将黑白着色叠在默认着色的上面，然后黑白着色采用叠加作为图层的模式，就可以较好的保留两者的细节。之后再调节明度曲线、色相、曝光，优化得到的最后结果啦。 后记 最后的效果就是这样啦！ 前前后后拖了蛮久，时值暑假之际，静下心来把这篇补的差不多了。 还有一些日后再补，主要是自定义camp，这样可以尝试复原文章的封面图，也可以尝试修改色阶来改善图像的动态范围，把暗部和高光的细节都体现出来。 林林总总的，我把我整个瞎捣鼓的过程都记录了下来，希望给诸君一些工作流上的启发吧。 希望疫情☣️早点结束。 同时也祝愿所有人一帆风顺吧~⛵️","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"空天","slug":"科技/空天","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E7%A9%BA%E5%A4%A9/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://yuanz1949.github.io/tags/Python/"},{"name":"天文","slug":"天文","permalink":"https://yuanz1949.github.io/tags/%E5%A4%A9%E6%96%87/"},{"name":"图像处理","slug":"图像处理","permalink":"https://yuanz1949.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}]},{"title":"羚苑学者指南","slug":"羚苑学者指南","date":"2020-04-23T08:54:32.000Z","updated":"2020-04-23T08:54:32.000Z","comments":true,"path":"生活/搞事情吖/羚苑学者指南/","link":"","permalink":"https://yuanz1949.github.io/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/%E7%BE%9A%E8%8B%91%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97/","excerpt":"新新人类 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"新新人类 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 什么是羚苑学者？ 羚苑学者宣言 学习 生活 工作 羚苑学者之路 什么是羚苑学者？ 羚苑学者是一个我个人的要求的总结。不过之所以采用这样的形式，还是受到了社会上有些包装的形式或者是社会运动的影响。羚苑，这个词来源于我个人的生活中的偶然。笔者的个人标志中(网站左上角的图标中的抽象符号)是一只羚羊，缘起于对个人姓名中汉语拼音缩写的涂鸦。将YJH通过一笔画的形式，变化为了一只羚羊。苑，这自然就是我的姓啦。学者，给人一种非常严肃，理性比较多的概念。 羚苑学者宣言 学习 生活 工作 羚苑学者之路","categories":[{"name":"生活","slug":"生活","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"搞事情吖","slug":"生活/搞事情吖","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/"}],"tags":[{"name":"计划","slug":"计划","permalink":"https://yuanz1949.github.io/tags/%E8%AE%A1%E5%88%92/"}]},{"title":"方头人手册","slug":"方头人手册","date":"2020-04-23T08:52:03.000Z","updated":"2020-04-23T08:52:03.000Z","comments":true,"path":"生活/搞事情吖/方头人手册/","link":"","permalink":"https://yuanz1949.github.io/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/%E6%96%B9%E5%A4%B4%E4%BA%BA%E6%89%8B%E5%86%8C/","excerpt":"方方正正 圆圆滑滑 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕","text":"方方正正 圆圆滑滑 当前项目正在咕,敬请期待,所有在咕列表见: Blog咕咕咕 方头人是什么？ 方头人设定 设计稿 3D模型 实物模型 表情设计 方头人出没 方头人是什么？ 方头人设定 设计稿 3D模型 实物模型 表情设计 方头人出没","categories":[{"name":"生活","slug":"生活","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"搞事情吖","slug":"生活/搞事情吖","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/"}],"tags":[{"name":"设计","slug":"设计","permalink":"https://yuanz1949.github.io/tags/%E8%AE%BE%E8%AE%A1/"},{"name":"方头人","slug":"方头人","permalink":"https://yuanz1949.github.io/tags/%E6%96%B9%E5%A4%B4%E4%BA%BA/"}]},{"title":"常用资源索引","slug":"常用资源索引","date":"2020-03-22T14:30:20.000Z","updated":"2020-03-22T14:30:20.000Z","comments":true,"path":"索引/资源索引/常用资源索引/","link":"","permalink":"https://yuanz1949.github.io/%E7%B4%A2%E5%BC%95/%E8%B5%84%E6%BA%90%E7%B4%A2%E5%BC%95/%E5%B8%B8%E7%94%A8%E8%B5%84%E6%BA%90%E7%B4%A2%E5%BC%95/","excerpt":"不在多，而在精。 ——苑长 如你所见，这是里是苑长的Index，也可以是大家的Index。","text":"不在多，而在精。 ——苑长 如你所见，这是里是苑长的Index，也可以是大家的Index。 网址索引 软件推荐 浏览器 谷歌内核浏览器插件 文件处理 &amp; IDE 效率工具 其他 下载器 安全软件 多媒体 视频 图像 3D 音频 科学技术 *请点击蓝色超链接跳转 网址索引 本网页-常用资源索引的短链接 苑长的书签 ：书签下载(右键另存为) 实时信息 工作流索引 文化作品索引 江科大VPN 江科大VPN通用访问 : https://vpn.just.edu.cn/,DanaInfo= 其后直接加网址（URL） ，复制使用 =之后切勿带上http:\\\\、https:\\\\ 如: 江科大VPN-SciHub 江科大VPN 2 江苏科技大学微软正版软件中心 激活工具下载(右键另存为) 必应搜索 软件推荐 浏览器 Edge for Chrome 同步多平台Edge浏览器信息 支持谷歌插件 谷歌内核浏览器插件 油猴脚本 我的脚本备份 外置自动化脚本管理器 第三方脚本下载 Adblock Plus 广告拦截 特定网页元素拦截 沙拉查词 划词 同步扇贝单词本 OneTab 标签页统一保存归档 IDM 配合IDM软件嗅探网页资源 Printfriendly 保存网页为PDF 自定义保存页面内容 文件处理 &amp; IDE sumatrapdf 小巧的PDF阅读器 sublime 文本编辑 代码高亮 编译 扩展与快捷健 Notepad3 文本编辑 代码高亮 快捷键 VScode 编程集成开发环境 扩展多 编译 效率工具 Snipaste 贴图 图片标注 Wox 快速调出文件 执行cmd 等等等等 Listary 急速检索 文档管理器增强 快捷调出 AutoHotkey 基于自定义快捷键运行的脚本语言 Windows Terminal 终端 开发 自定义 其他 SpaceSniffer 磁盘文件占用可视化 irreader RSS订阅 基于选择器的网页内容订阅 下载器 Internet Download Manager 多线程 http ftp qBittorrent BT种子 磁力链接 安全软件 火绒 权限控制 联网控制 弹窗拦截 多媒体 视频 Potplayer 视频播放 各种视频小功能 自定义播放 模块推荐(参考文章1,参考文章2) LAVFilters分离器 madVR渲染器 Zune皮肤 handbrake 视频压制 小丸工具箱 视频压制 视频滤镜 音轨视频轨分离 …… Aegisub 字幕 字幕特效 字幕图片 olive 视频剪辑 图像 GIMP 专业图像处理 Inkscape 专业矢量图绘制 Krita 动画绘制 Startrails 星轨绘制 3D Blender 建模 特效 动画(2D/3D) 插件推荐 radeon-prorender 渲染器 AMD开发的渲染器 音频 LMMS 电子合成音 Audacity 音频剪辑 音频滤镜 科学技术 Stellarium 虚拟天文台 天文观测模拟 天体图像 Python 容易入门 第三方库极多 相关软件: Anaconda:Python的虚拟环境创建和包管理器软件,适用于研究 Jupyter:网页为前端的IPython,方便教学和研究并附带多种扩展 ImageJ 科研图像处理 使用文章推荐 MEGA 生物信息相关 基因分析 Jmol 化学分子3D","categories":[{"name":"索引","slug":"索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/"},{"name":"资源索引","slug":"索引/资源索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/%E8%B5%84%E6%BA%90%E7%B4%A2%E5%BC%95/"}],"tags":[{"name":"分享","slug":"分享","permalink":"https://yuanz1949.github.io/tags/%E5%88%86%E4%BA%AB/"}]},{"title":"实时信息","slug":"实时信息","date":"2020-03-22T14:29:51.000Z","updated":"2020-03-22T14:29:51.000Z","comments":true,"path":"索引/实时信息/实时信息/","link":"","permalink":"https://yuanz1949.github.io/%E7%B4%A2%E5%BC%95/%E5%AE%9E%E6%97%B6%E4%BF%A1%E6%81%AF/%E5%AE%9E%E6%97%B6%E4%BF%A1%E6%81%AF/","excerpt":"时 间 就 是 金 钱 效 率 就 是 生 命 Time is money, efficiency is life. 袁庚蛇口工业区标语","text":"时 间 就 是 金 钱 效 率 就 是 生 命 Time is money, efficiency is life. 袁庚蛇口工业区标语 实时信息 实时信息 全球股市: http://q.10jqka.com.cn/global/ 新冠疫情: WHO Coronavirus Disease (COVID-19) Dashboard","categories":[{"name":"索引","slug":"索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/"},{"name":"实时信息","slug":"索引/实时信息","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/%E5%AE%9E%E6%97%B6%E4%BF%A1%E6%81%AF/"}],"tags":[{"name":"热点","slug":"热点","permalink":"https://yuanz1949.github.io/tags/%E7%83%AD%E7%82%B9/"}]},{"title":"我使用Hexo+Github搭建Blog的经验","slug":"我使用Hexo+Github搭建Blog的经验","date":"2020-03-22T04:40:17.000Z","updated":"2020-03-22T04:40:17.000Z","comments":true,"path":"科技/信息技术/我使用Hexo+Github搭建Blog的经验/","link":"","permalink":"https://yuanz1949.github.io/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/%E6%88%91%E4%BD%BF%E7%94%A8Hexo+Github%E6%90%AD%E5%BB%BABlog%E7%9A%84%E7%BB%8F%E9%AA%8C/","excerpt":"尝试在你准备提问论坛的历史文档中搜索答案 尝试搜索互联网以找到答案 尝试阅读手册以找到答案 尝试阅读常见问题文档(FAQ)以找到答案 尝试自己检查或试验以找到答案 尝试请教懂行的朋友以找到答案 如果你是程序员，尝试阅读源代码以找到答案 艾瑞克.史蒂文.雷蒙德&瑞克.莫恩《提问的艺术》","text":"尝试在你准备提问论坛的历史文档中搜索答案 尝试搜索互联网以找到答案 尝试阅读手册以找到答案 尝试阅读常见问题文档(FAQ)以找到答案 尝试自己检查或试验以找到答案 尝试请教懂行的朋友以找到答案 如果你是程序员，尝试阅读源代码以找到答案 艾瑞克.史蒂文.雷蒙德&瑞克.莫恩《提问的艺术》 说在前面的话 这是第一篇正式的Blog，记录这个小小网站的搭建的“血泪史”。我觉得分享出来应该可以为中文互联网贡献一点点经验，这是早就要做的，也是终于做起来的。鉴于是第一篇，我相信不管是效率还是美观等方面都是不足的，希望寥寥的客人们，不要过于介意（介意我也就这水平 😄 )。 本站介绍 本站采用如下工作流： Typora：编写.md格式的Blog文章或者是页面 文本编辑器 支持markdown和html语法 可实时预览 Hexo：渲染.md格式文件为HTML网站并测试发布Blog 网站维护工具（渲染/测试/发布网站） 网站插件（功能插件/美化插件/维护插件）很多 网站模板（各种主题或者是不同类型的网站）很多 Github：Hexo将把渲染好的.html文件上传到Github的仓库（repository），大家就可以通过一个特定的域名 ?.github.io 访问 世界上最大的 同性 程序员交流网站 功能很多，有利于学习更多计算机知识 另外还有支持这一套工作流的软件： Node.Js：hexo是Javascript语言编写的，要电脑运行Javascript的桌面端Node.js（对应的hexo的插件也都是都是Javascript编写的） 另外是npm是Node.js的包管理器，Node.js只提供软件运行的环境，如果你需要下载别人的软件就需要npm帮助你下载和管理各个软件之间的依赖。不光可以用npm下载Hexo，还可以下载Hexo的插件等等。 Git：渲染好的.html文件将由集成在hexo内的deploye插件调用Git软件来上传到GitHub。Git被称为“分布式版本控制系统”，可以上传（commit）也可以下载（clone）一个代码仓库（repository）。这只是基础功能，还有可以回滚版本，查看合作者修改的代码等，是一个多人协作和代码版本管理的利器。 *点击软件的名字可以跳转到对应的官网喔 一些细节 本站的本地缓存见下： 本站由Hexo使用ejs引擎渲染。 其实是因为本站是从hexo模板——hueman改造的。该模板采用ejs模板语言编写，主要定义了网站的HTML框架，并调用了各种内置的和我自己下载的的插件（插件要嵌入到html文件里才能被调用；工具你自己不找着用，它是不会自己动起来的）。ejs模板的组织方式如下图： 另外光有ejs模板只能生成没有灵魂的html框架，页面非常的“古老”，没有美感。所以这个模板通过使用hexo引擎渲染.styl文件生成css文件来修饰html。本模板的styl的文件布局如下： 所以主要的插件功能添加删除等修改网站的结构和功能的是修改ejs文件，而美化工作都是修改styl文件。 本站的文章采用markdown标记语言和Hexo Tag标签编写，少部分涉及\\(Tex\\)公式和HTML语言，另外引入了 : emoji : toc 以及一些其他的语法。 这些格式和内容，都是使用各种插件按照一定的约定的记号来渲染。 编写的文章实际长这样。 但是得益于Typora的实时渲染这个只有特定的情况需要进入这样的状态。 小小的提醒 🔴 npm 作为一种包管理器，如果你装的插件过多，不可避免的有包依赖之间冲突的问题。所以如果你没有编程能力（解决软件依赖冲突的能力），请尽量少的安装插件。采用成熟的模板，这样作者是适配好了很多好的插件的。 比如hexo-renderer-markdown-it-plus的功能就非常多支持的语法： katex, sub, sup, ins, emoji, toc&amp;anchor, deflist, abbr, footnote, mark 这样不用装单个的了（如果你不想大而全，也可以一个一个单装）。 有个别包（插件）运行需要其他的包，npm却不会自动帮你安装，但是会给你提醒，这个时候要手动安装，否则无法工作。 还有就是旧版本的npm包可能有漏洞，如果没有升级到高版本可能有危险，但是升到高版本可能导致其他包和这个包的依赖（合作）被破坏。请慎重，因为本Blog大部分为静态页面，哪怕是响应式的部分也是被限制了权限的，因此没有特别关心安全问题，请结合情况自己考量。 Hexo 请适时备份由Hexo生成的整个博客文件夹！ 请适时备份由Hexo生成的整个博客文件夹！ 请适时备份由Hexo生成的整个博客文件夹！ 这是为了保证你的安装的每个包，你做的每个修改还有复原的余地，这样就不用重新来过了（尤其是你同时修改很多文件的时候 😭 ）。 每次还是尽量只对一个具体的功能或者是样式进行修改（除非你很清楚你一起修改的东西内部是一样的工作机制）。 注意_config.yml这个文件，它是整个网站的主配置文件。修改它一定要仔细阅读官方的设置说明以及插件的说明，否则Hexo将无法正常工作！比如 hexo无法识别hexo clean，hexo deploy,hexo generate等 调用hexo generate时出现黄色或白色的报错 生成的网站没有成功添加想要的功能 如果出现上述情况，设置文件就要注意（一开始也要注意）： 一定要仔细阅读官方的设置说明以及插件的说明 注意缩进保持一致 不要在句尾带有多余的空格 如果插件放在主设置里无用，可以放到主题的设置里 插件没有工作或者是Hexo都罢工了，不要慌，检查一些设置的字符是不是插件要求的字符，或者是字符的位置或者是缩进搞错了。实在不行，撤回操作或者回退版本吧。 Github Github的最大的问题是作为一个海外的网站，访问速度可能不尽如人意。尤其是受到一些不可抗力的因素影响，可能会访问缓慢。Blog的图片和视频往往是不会放到Github上的，访问较慢，而且GitHub的仓库有事实上的大小的限制，所以尽量将大的图和视频上传到专门的图床(这是一类专门放置图片的云盘网站)和视频网站，然后放置图片链接在页面里，这样打开网站的时候，浏览器解析代码会自动把图片链接放置在页面里，这样就加速了访问。 就像这样的链接会自动转换为链接上的图片： 另一个要说的是，本网站使用Gitalk作为评论系统。实际是将评论储存在Github的issue里的，Github的每个仓库（repository）都有一个用来处理疑问的issue。网站每篇文章由Gitalk通过远程操作在Github开一个issue来实现评论，所以如果要评论请务必创建一个Github账号（等该网站迁移到自己的服务器就不需要了，可是那就是猴年马月了,先立个​​ 🏳️‍🌈：我毕业后就买个云服务器！)。 HTML+CSS 如果要修改模板的HTML和CSS请作好ejs文件和styl文件的备份，方便回滚。如果你从来没有学过html和css，那么在Notepad++，Hexo-server（hexo插件）和浏览器的开发者工具（网站页面右键检查或者是开发者模式）会是你的好帮手。 使用Hexo渲染模板后，启动Hexo-server，浏览器打开访问网站。通过开发者工具定位要修改的HTML元素的位置，直接通过开发者工具修改HTML或者是CSS，可实时预览效果。使用文本编辑器Notepad++在本地文件里定位前面你认为不错的改动。然后Hexo再渲染，启动Hexo-server来检查。 此次发现了一个Edge for Chrome的一个背景图片的Bug，所以如果页面出了问题，可以尝试使用不同的浏览器测试同样的网页，排除浏览器的锅（但是如果出了问题一般还是要怀疑自己哈 😸)。 所以 和计算机相关的事往往需要巨大的耐心。 ————苑长 如果你没有编程经验，而且不想学习复杂的计算机知识的话，还是使用更加成熟的 CSDN/博客园/知乎/简书 的平台更好。如果你喜欢技术，喜欢搞事情，喜欢自己掌控，那就折腾吧。 生命不息~折腾不止~ 大尾巴 其实很多的坑并不是坑，Hexo+Github的Blog流还是更适合想对网站有更大掌控力的程序员。如果你只喜欢分享，而不太关心界面之类的，自然是推荐CSDN/博客园/知乎/简书。而要有更大的掌控，就要有一定的技术力，这样无疑要付出巨大的努力。但是一旦成功就会有很大的收获。鉴于目前的工作流，这个网站可以到处迁移（不光可以在Github也可以在码云，还可以自己搭服务器给大家访问。同时，界面完全在自己的掌控之中。 算是就这样吧，我会尝试在之后的时间里丰富它的内容的。毕竟学到老，活到老，可以不停地改进，螺旋上升。 时值疫情，愿世界平安度过吧。🌈","categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"信息技术","slug":"科技/信息技术","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"分享","slug":"分享","permalink":"https://yuanz1949.github.io/tags/%E5%88%86%E4%BA%AB/"},{"name":"Hexo","slug":"Hexo","permalink":"https://yuanz1949.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://yuanz1949.github.io/tags/Github/"},{"name":"Blog","slug":"Blog","permalink":"https://yuanz1949.github.io/tags/Blog/"}]},{"title":"关于","slug":"about","date":"2020-03-15T14:29:41.000Z","updated":"2020-03-15T14:29:41.000Z","comments":true,"path":"生活/about/","link":"","permalink":"https://yuanz1949.github.io/%E7%94%9F%E6%B4%BB/about/","excerpt":"关于 如你所见，这是一篇“关于”。","text":"关于 如你所见，这是一篇“关于”。 这里是 ❓ 我是谁 ^_^ 联系我 : ) 还有其他的嘛 😜 这里是 ❓ 这里是苑长的博客（Blog） 苑长的 —— 信息汇聚地（苑长的Index） 好玩的分享站 嘿嘿 还没想好…… 我是谁 ^_^ 显然我是苑长 科技爱好者 喜欢搞好玩的 联系我 : ) E-mail : 504567327@qq.com 还有其他的嘛 😜 Nothing. 苑长","categories":[{"name":"生活","slug":"生活","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"关于","slug":"关于","permalink":"https://yuanz1949.github.io/tags/%E5%85%B3%E4%BA%8E/"},{"name":"生活","slug":"生活","permalink":"https://yuanz1949.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"这是一篇TestBlog","slug":"这是一篇TestBlog","date":"2020-03-15T06:53:03.000Z","updated":"2020-03-15T06:53:03.000Z","comments":true,"path":"生活/搞事情吖/这是一篇TestBlog/","link":"","permalink":"https://yuanz1949.github.io/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87TestBlog/","excerpt":"任何理论都要不断接受实践的检验。 胡福明《实践是检验真理的唯一标准》 前言 测试 MD语法 公式 Hexo标签插件 前言 此Blog网站由Hexo提供模板（hueman）和引擎，考虑到笔者的水平且网站模板经过了修改，在这里放置一篇TestBlog来测试功能是否正常。","text":"任何理论都要不断接受实践的检验。 胡福明《实践是检验真理的唯一标准》 前言 测试 MD语法 公式 Hexo标签插件 前言 此Blog网站由Hexo提供模板（hueman）和引擎，考虑到笔者的水平且网站模板经过了修改，在这里放置一篇TestBlog来测试功能是否正常。 测试 MD语法 这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本。 这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本，这里插入大量的文字来模拟真实的文本。 “” ‘’ …… 【】 ； ， 。 ？ 、 This is test.This is test This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test. This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test.This is test. , . · ; : ‘’ “” [] | &amp;ensp; 单空格 &amp;emsp; 双空格 我们要走出去 1print(\"Hello World\") 123plugins: lightgallery: true # options: true, false justifiedgallery: true # options: true, false 1234567891011121314151617181920212223242526272829303132333435import numpy as npimport matplotlib.pyplot as pltiter_func = lambda z,c:(z**2 + c) # iteration function def calc_steps(c, max_iter_num=128) : z = complex(0,0) # initial value of Z num = 0 while abs(z) &lt; 2 and num &lt; max_iter_num: z = iter_func(z,c) num += 1 return numdef display_mandelbrot(x_num=1000,y_num=1000): X, Y = np.meshgrid(np.linspace(xa,xb,x_num + 1), np.linspace(yb,ya,y_num+1)) C = X + Y*1j result = np.zeros((y_num+1, x_num+1)) for i in range(y_num+1): print(i) for j in range(x_num+1) : #print(j) result[i,j] = calc_steps(C[i,j]) plt.imshow(result,interpolation=\"bilinear\",cmap = plt.cm.hot, vmax = abs(result).max(),vmin=abs(result).min(), extent=[xa,xb,ya,yb]) plt.show()if __name__ == \"__main__\" : xa = -0.75 xb = -0.5 ya = 0.25 yb = 0.5 display_mandelbrot(1000,1000) printf(&quot;test&quot;); `printf(“test”);` test test test test 1234- test - test - test - test [x] test - [x] test dfdf dfdf df dd eee *** First Header Second Header Content Cell Content Cell Content Cell Content Cell You can create footnotes like this[1]. You can create footnotes like this[^footnote]. [^footnote]: Here is the text of the footnote. test[^test] test[^test] 这是尝试引用test 这是尝试引用[test ](test) [test][] [test][] [text]:https://yuanz1949.github.io 苑长的Index [苑长的Index](https://yuanz1949.github.io/ “这是注释”) https://yuanz1949.github.io &lt;https://yuanz1949.github.io&gt; text &lt;span style=“color:red”&gt;text&lt;/span&gt; ​ test ==text== test test test test test ==text== **test** `test` *test* ***test*** ​ test test test test ~~test~~ ~test~ &lt;u&gt;test&lt;/u&gt; test &lt;test&gt; ​ 😄 ​ ​ ​ ◀️ \\:smile\\: \\:arrow_backward\\: （其实没有“\\”） ​ H2O Xlong text X2 H~2~O X~long text~ X^2^ The HTML specification is maintained by the W3C. &lt;p&gt;The &lt;abbr title=“Hyper Text Markup Language”&gt;HTML specification is maintained by the &lt;abbr title=“World Wide Web Consortium”&gt;W3C.&lt;/p&gt; 尝试搜索互联网以找到答案 艾瑞克.史蒂文.雷蒙德(Eric Steven Raymond)&amp;瑞克.莫恩(Rick Moen)@《提问的艺术》 ![zhihu](https://pic4.zhimg.com/v2-b757330367850e9db5078be3b6c395d8_xl.jpg “这是注释”) 1&lt;iframe height&#x3D;&#39;265&#39; scrolling&#x3D;&#39;no&#39; title&#x3D;&#39;Fancy Animated SVG Menu&#39; src&#x3D;&#39;http:&#x2F;&#x2F;codepen.io&#x2F;jeangontijo&#x2F;embed&#x2F;OxVywj&#x2F;?height&#x3D;265&amp;theme-id&#x3D;0&amp;default-tab&#x3D;css,result&amp;embed-version&#x3D;2&#39; frameborder&#x3D;&#39;no&#39; allowtransparency&#x3D;&#39;true&#39; allowfullscreen&#x3D;&#39;true&#39; style&#x3D;&#39;width: 100%;&#39;&gt;&lt;&#x2F;iframe&gt; &lt;video src=’ ’ type=‘video/mp4’ controls=‘controls’ width=‘100%’ height=‘100%’&gt; &lt;/video&gt; 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! ``` Alice-&gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob–&gt;Alice: I am good thanks! ``` 1234567st&#x3D;&gt;start: Startop&#x3D;&gt;operation: Your Operationcond&#x3D;&gt;condition: Yes or No?e&#x3D;&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op ``` st=&gt;start: Start op=&gt;operation: Your Operation cond=&gt;condition: Yes or No? e=&gt;end st-&gt;op-&gt;cond cond(yes)-&gt;e cond(no)-&gt;op ``` 公式 $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\ \\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\ \\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\ \\end{vmatrix} $$ 1234567$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 &#x3D; \\begin&#123;vmatrix&#125;\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$$ $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\ \\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\ \\end{vmatrix} $$ 1234567$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 &#x3D; \\begin&#123;vmatrix&#125;\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\\\\\end&#123;vmatrix&#125;$$ $\\lim_{x \\to \\infty} \\exp(-x) = 0)$ $\\lim_{x \\to \\infty} \\exp(-x) = 0)$ \\( \\lim_{x \\to \\infty} \\exp(-x) = 0\\) \\(\\lim_{x \\to \\infty} \\exp(-x) = 0\\) (ax^2 + bx + c = 0) \\(ax^2 + bx + c = 0) \\(ax^2 + bx + c = 0\\) \\(ax^2 + bx + c = 0\\) $$ That is test $$ $$ That is test $$ $2^2$ $H_2O$ $That is my blog!$ $2^2$ $H_2O$ $That is my blog!$ \\(2^2\\) \\(H_2O​\\) \\(That is my blog!​\\) \\(2^2\\) \\(H_2O\\) \\(That is my blog!\\) $$\\begin{aligned} f_Y(y) &amp; = f_X[h(y)]|h’(y)| \\[2ex] &amp; = f_X[h(y)]h’(y) \\[2ex] &amp; = \\frac{1}{\\theta}e^{-\\frac{x}{\\theta}}[\\frac{dx}{dy}(-\\frac{\\theta}{ln(1-y)})] \\[2ex] &amp; = \\frac{1}{\\theta}e^{-\\frac{-\\frac{\\theta}{ln(1-y)}}{\\theta}}\\frac{\\theta}{1-y} \\[2ex] &amp; = \\frac{1}{\\theta}e^{ln(1-y)}\\frac{\\theta}{1-y} \\[2ex] &amp; = \\frac{1-y}{\\theta}\\frac{\\theta}{1-y} \\[2ex] &amp; = 1 \\end{aligned}$$ 123$$\\begin&#123;aligned&#125; f_Y(y) &amp; &#x3D; f_X[h(y)]|h&#39;(y)| \\\\[2ex] &amp; &#x3D; f_X[h(y)]h&#39;(y) \\\\[2ex] &amp; &#x3D; \\frac&#123;1&#125;&#123;\\theta&#125;e^&#123;-\\frac&#123;x&#125;&#123;\\theta&#125;&#125;[\\frac&#123;dx&#125;&#123;dy&#125;(-\\frac&#123;\\theta&#125;&#123;ln(1-y)&#125;)] \\\\[2ex] &amp; &#x3D; \\frac&#123;1&#125;&#123;\\theta&#125;e^&#123;-\\frac&#123;-\\frac&#123;\\theta&#125;&#123;ln(1-y)&#125;&#125;&#123;\\theta&#125;&#125;\\frac&#123;\\theta&#125;&#123;1-y&#125; \\\\[2ex] &amp; &#x3D; \\frac&#123;1&#125;&#123;\\theta&#125;e^&#123;ln(1-y)&#125;\\frac&#123;\\theta&#125;&#123;1-y&#125; \\\\[2ex] &amp; &#x3D; \\frac&#123;1-y&#125;&#123;\\theta&#125;\\frac&#123;\\theta&#125;&#123;1-y&#125; \\\\[2ex] &amp; &#x3D; 1 \\end&#123;aligned&#125;$$ $$\\begin{aligned} f_Y(y) &amp; = f_X[h(y)]|h’(y)| \\\\[2ex] &amp; = f_X[h(y)]h’(y) \\\\[2ex] &amp; = \\frac{1}{\\theta}e^{-\\frac{x}{\\theta}}[\\frac{dx}{dy}(-\\frac{\\theta}{ln(1-y)})] \\\\[2ex] &amp; = \\frac{1}{\\theta}e^{-\\frac{-\\frac{\\theta}{ln(1-y)}}{\\theta}}\\frac{\\theta}{1-y} \\\\[2ex] &amp; = \\frac{1}{\\theta}e^{ln(1-y)}\\frac{\\theta}{1-y} \\\\[2ex] &amp; = \\frac{1-y}{\\theta}\\frac{\\theta}{1-y} \\\\[2ex] &amp; = 1 \\end{aligned}$$ 123$$\\begin&#123;aligned&#125; f_Y(y) &amp; &#x3D; f_X[h(y)]|h&#39;(y)| \\\\\\\\[2ex] &amp; &#x3D; f_X[h(y)]h&#39;(y) \\\\\\\\[2ex] &amp; &#x3D; \\frac&#123;1&#125;&#123;\\theta&#125;e^&#123;-\\frac&#123;x&#125;&#123;\\theta&#125;&#125;[\\frac&#123;dx&#125;&#123;dy&#125;(-\\frac&#123;\\theta&#125;&#123;ln(1-y)&#125;)] \\\\\\\\[2ex] &amp; &#x3D; \\frac&#123;1&#125;&#123;\\theta&#125;e^&#123;-\\frac&#123;-\\frac&#123;\\theta&#125;&#123;ln(1-y)&#125;&#125;&#123;\\theta&#125;&#125;\\frac&#123;\\theta&#125;&#123;1-y&#125; \\\\\\\\[2ex] &amp; &#x3D; \\frac&#123;1&#125;&#123;\\theta&#125;e^&#123;ln(1-y)&#125;\\frac&#123;\\theta&#125;&#123;1-y&#125; \\\\\\\\[2ex] &amp; &#x3D; \\frac&#123;1-y&#125;&#123;\\theta&#125;\\frac&#123;\\theta&#125;&#123;1-y&#125; \\\\\\\\[2ex] &amp; &#x3D; 1 \\end&#123;aligned&#125;$$ Hexo标签插件 That’s testing. 1234&#123;% blockquote %&#125;That&#39;s testing.&#123;% endblockquote %&#125;仅含内容 这是一篇TestBlog 苑金浩yuanz1949.github.io 123&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 123&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125; NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 123&#123;% blockquote @DevDocs https:&#x2F;&#x2F;twitter.com&#x2F;devdocs&#x2F;status&#x2F;356095192085962752 %&#125;NEW: DevDocs now comes with syntax highlighting. http:&#x2F;&#x2F;devdocs.io&#123;% endblockquote %&#125; Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 123&#123;% blockquote Seth Godin http:&#x2F;&#x2F;sethgodin.typepad.com&#x2F;seths_blog&#x2F;2009&#x2F;07&#x2F;welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125; text.html www.example.com example.html1alert('Hello World!'); 123&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;code snippet&#123;% endcodeblock %&#125; Additional Options Description Default line_number Show line number true highlight Enable code highlighting true first_line Specify the first line number 1 mark Line highlight specific line(s), each value separated by a comma. Specify number range using a dash Example: mark:1,4-7,10 will mark line 1, 4 to 7 and 10. wrap Wrap the code block in `` true ``` [language] [title] [url] [link text] code snippet ``` pullquote content 123&#123;% pullquote test %&#125;pullquote content&#123;% endpullquote %&#125; 1&#123;% iframe url [width] [height] %&#125; 1&#123;% img [class names] &#x2F;path&#x2F;to&#x2F;image [width] [height] &#39;&quot;title text&quot; &quot;alt text&quot;&#39; %&#125; 1&#123;% include_code [title] [lang:language] [from:line] [to:line] path&#x2F;to&#x2F;file %&#125; baidu 1&#123;% link text url [external] [title] %&#125; /%E7%94%9F%E6%B4%BB/about/ 1&#123;% post_path filename %&#125; about 1&#123;% post_link filename [title] [escape] %&#125; /%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87TestBlog/0001-0500_x264.mp4 1&#123;% asset_path 0001-0500_x264.mp4 %&#125; 1&#123;% asset_img 0001-0500_x264[00_00_01--00_00_21].gif YJH %&#125; YJH 1&#123;% asset_link 0001-0500_x264.mp4 YJH %&#125; 123&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125; Here is the text of the footnote. ↩︎","categories":[{"name":"生活","slug":"生活","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"搞事情吖","slug":"生活/搞事情吖","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://yuanz1949.github.io/tags/%E6%B5%8B%E8%AF%95/"}]}],"categories":[{"name":"科技","slug":"科技","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"生物","slug":"科技/生物","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E7%94%9F%E7%89%A9/"},{"name":"索引","slug":"索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/"},{"name":"政策索引","slug":"索引/政策索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/%E6%94%BF%E7%AD%96%E7%B4%A2%E5%BC%95/"},{"name":"信息技术","slug":"科技/信息技术","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"},{"name":"资源索引","slug":"索引/资源索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/%E8%B5%84%E6%BA%90%E7%B4%A2%E5%BC%95/"},{"name":"生活","slug":"生活","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"搞事情吖","slug":"生活/搞事情吖","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/%E6%90%9E%E4%BA%8B%E6%83%85%E5%90%96/"},{"name":"认知","slug":"生活/认知","permalink":"https://yuanz1949.github.io/categories/%E7%94%9F%E6%B4%BB/%E8%AE%A4%E7%9F%A5/"},{"name":"多媒体","slug":"科技/多媒体","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E5%A4%9A%E5%AA%92%E4%BD%93/"},{"name":"工作流索引","slug":"索引/工作流索引","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%B4%A2%E5%BC%95/"},{"name":"空天","slug":"科技/空天","permalink":"https://yuanz1949.github.io/categories/%E7%A7%91%E6%8A%80/%E7%A9%BA%E5%A4%A9/"},{"name":"实时信息","slug":"索引/实时信息","permalink":"https://yuanz1949.github.io/categories/%E7%B4%A2%E5%BC%95/%E5%AE%9E%E6%97%B6%E4%BF%A1%E6%81%AF/"}],"tags":[{"name":"Chagas","slug":"Chagas","permalink":"https://yuanz1949.github.io/tags/Chagas/"},{"name":"疾病","slug":"疾病","permalink":"https://yuanz1949.github.io/tags/%E7%96%BE%E7%97%85/"},{"name":"政策","slug":"政策","permalink":"https://yuanz1949.github.io/tags/%E6%94%BF%E7%AD%96/"},{"name":"开发","slug":"开发","permalink":"https://yuanz1949.github.io/tags/%E5%BC%80%E5%8F%91/"},{"name":"分享","slug":"分享","permalink":"https://yuanz1949.github.io/tags/%E5%88%86%E4%BA%AB/"},{"name":"网站","slug":"网站","permalink":"https://yuanz1949.github.io/tags/%E7%BD%91%E7%AB%99/"},{"name":"命令行","slug":"命令行","permalink":"https://yuanz1949.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"},{"name":"GUI","slug":"GUI","permalink":"https://yuanz1949.github.io/tags/GUI/"},{"name":"资源","slug":"资源","permalink":"https://yuanz1949.github.io/tags/%E8%B5%84%E6%BA%90/"},{"name":"文化","slug":"文化","permalink":"https://yuanz1949.github.io/tags/%E6%96%87%E5%8C%96/"},{"name":"工具","slug":"工具","permalink":"https://yuanz1949.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"版本控制","slug":"版本控制","permalink":"https://yuanz1949.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"},{"name":"Python","slug":"Python","permalink":"https://yuanz1949.github.io/tags/Python/"},{"name":"算法","slug":"算法","permalink":"https://yuanz1949.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"数据处理","slug":"数据处理","permalink":"https://yuanz1949.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"绩点","slug":"绩点","permalink":"https://yuanz1949.github.io/tags/%E7%BB%A9%E7%82%B9/"},{"name":"设计","slug":"设计","permalink":"https://yuanz1949.github.io/tags/%E8%AE%BE%E8%AE%A1/"},{"name":"计划","slug":"计划","permalink":"https://yuanz1949.github.io/tags/%E8%AE%A1%E5%88%92/"},{"name":"毕业","slug":"毕业","permalink":"https://yuanz1949.github.io/tags/%E6%AF%95%E4%B8%9A/"},{"name":"江科大","slug":"江科大","permalink":"https://yuanz1949.github.io/tags/%E6%B1%9F%E7%A7%91%E5%A4%A7/"},{"name":"VPN","slug":"VPN","permalink":"https://yuanz1949.github.io/tags/VPN/"},{"name":"探索","slug":"探索","permalink":"https://yuanz1949.github.io/tags/%E6%8E%A2%E7%B4%A2/"},{"name":"化学","slug":"化学","permalink":"https://yuanz1949.github.io/tags/%E5%8C%96%E5%AD%A6/"},{"name":"仪器","slug":"仪器","permalink":"https://yuanz1949.github.io/tags/%E4%BB%AA%E5%99%A8/"},{"name":"python","slug":"python","permalink":"https://yuanz1949.github.io/tags/python/"},{"name":"书签","slug":"书签","permalink":"https://yuanz1949.github.io/tags/%E4%B9%A6%E7%AD%BE/"},{"name":"自动化","slug":"自动化","permalink":"https://yuanz1949.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"摄影","slug":"摄影","permalink":"https://yuanz1949.github.io/tags/%E6%91%84%E5%BD%B1/"},{"name":"单反","slug":"单反","permalink":"https://yuanz1949.github.io/tags/%E5%8D%95%E5%8F%8D/"},{"name":"工作流","slug":"工作流","permalink":"https://yuanz1949.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81/"},{"name":"视频","slug":"视频","permalink":"https://yuanz1949.github.io/tags/%E8%A7%86%E9%A2%91/"},{"name":"实验","slug":"实验","permalink":"https://yuanz1949.github.io/tags/%E5%AE%9E%E9%AA%8C/"},{"name":"Blender","slug":"Blender","permalink":"https://yuanz1949.github.io/tags/Blender/"},{"name":"3D","slug":"3D","permalink":"https://yuanz1949.github.io/tags/3D/"},{"name":"manim","slug":"manim","permalink":"https://yuanz1949.github.io/tags/manim/"},{"name":"天文","slug":"天文","permalink":"https://yuanz1949.github.io/tags/%E5%A4%A9%E6%96%87/"},{"name":"图像处理","slug":"图像处理","permalink":"https://yuanz1949.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"},{"name":"方头人","slug":"方头人","permalink":"https://yuanz1949.github.io/tags/%E6%96%B9%E5%A4%B4%E4%BA%BA/"},{"name":"热点","slug":"热点","permalink":"https://yuanz1949.github.io/tags/%E7%83%AD%E7%82%B9/"},{"name":"Hexo","slug":"Hexo","permalink":"https://yuanz1949.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://yuanz1949.github.io/tags/Github/"},{"name":"Blog","slug":"Blog","permalink":"https://yuanz1949.github.io/tags/Blog/"},{"name":"关于","slug":"关于","permalink":"https://yuanz1949.github.io/tags/%E5%85%B3%E4%BA%8E/"},{"name":"生活","slug":"生活","permalink":"https://yuanz1949.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"测试","slug":"测试","permalink":"https://yuanz1949.github.io/tags/%E6%B5%8B%E8%AF%95/"}]}